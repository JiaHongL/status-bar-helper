[
  {
    "command": "sbh.demo.toggleTheme",
    "text": "$(color-mode)",
    "tooltip": "Toggle between light and dark theme",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Toggle between Light and Dark themes in VS Code (one-click)\n// Purpose: Demonstrates how to trigger a built-in VS Code command from a script\n// Note: This uses 'workbench.action.toggleLightDarkThemes' which toggles the current color theme\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(async () => {\n  try {\n    // Execute the built-in toggle theme command\n    await vscode.commands.executeCommand('workbench.action.toggleLightDarkThemes');\n  } catch (e) {\n    // Show an error message in VS Code if the command fails\n    vscode.window.showErrorMessage('Toggle theme failed: ' + (e?.message || e));\n  } finally {\n    vm.stop();\n  }\n})();"
  },
  {
    "command": "sbh.demo.logMinimalPlus",
    "text": "$(output) Log",
    "tooltip": "VS Code + Node. Output + bottom log",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "example"
    ],
    "script": "// Minimal Log: VS Code + Node (read-only, one-click, dual output)\n// Example: Demonstrates how to log messages in a VS Code extension\n// 1. Create a custom Output Channel in VS Code\n// 2. Define a helper function to log to both Output Channel and console\n// 3. Show environment info (Node version, platform, architecture)\n// 4. List a few files/directories from the current workspace\n// 5. Show the currently active file and its language\n// 6. Display a completion message in VS Code's UI\n\n// Import VS Code API\nconst vscode = require('vscode');\n// Import Node.js file system and path modules\nconst fs = require('fs');\nconst path = require('path');\n// Inject VM API\nconst { vm } = statusBarHelper.v1; \n\n(function main(){\n  // Create a new Output Channel named \"SBH Minimal Log\"\n  const ch = vscode.window.createOutputChannel('SBH Minimal Log');\n\n  // Helper function: log to both Output Channel and console\n  const emit = (...a) => {\n    const line = a.join(' ');\n    ch.appendLine(line);\n    console.log(line);\n  };\n\n  // Show the Output Channel immediately\n  ch.show(true);\n\n  // Start logging\n  emit('▶ Start');\n\n  // Show Node.js version, platform, and architecture\n  emit('Node: ' + process.version + '  Platform: ' + process.platform + '/' + process.arch);\n\n  // Get current workspace root (or fallback to process.cwd())\n  const ws = vscode.workspace.workspaceFolders;\n  const root = ws && ws.length ? ws[0].uri.fsPath : process.cwd();\n  emit('Workdir: ' + root);\n\n  // Try listing the first 8 entries in the workspace folder\n  try {\n    const entries = fs.readdirSync(root, { withFileTypes: true }).slice(0, 8);\n    entries.forEach(e => emit((e.isDirectory() ? '[D] ' : '[F] ') + e.name));\n  } catch (e) {\n    emit('readdir failed: ' + e.message);\n  }\n\n  // Show the active file name and language if available\n  const ed = vscode.window.activeTextEditor;\n  if (ed && ed.document.uri.scheme === 'file') {\n    emit('Active file: ' + path.basename(ed.document.uri.fsPath) + ' (' + ed.document.languageId + ')');\n  }\n\n  // Final message\n  emit('✔ Done');\n\n  // Show a success message in VS Code\n  vscode.window.showInformationMessage('Log demo finished. Check \"SBH Minimal Log\" and the bottom run log.');\n\n  // Stop VM explicitly after completion\n  vm.stop();\n})();"
  },
  {
    "command": "sbh.demo.gitAdd",
    "text": "$(diff-added) Git Add",
    "tooltip": "Stage all changes in the first workspace folder",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "example",
      "git"
    ],
    "script": "// Git Add: stage all in first workspace (one-click)\n// Example: How to run a terminal command from a VS Code extension\n// 1. Get the first opened workspace folder path\n// 2. Use Node.js child_process.exec to execute a system command (git add .)\n// 3. Convert the command output (stdout/stderr) to string and handle it\n// 4. Show messages in the VS Code UI\n\n// Import VS Code API\nconst vscode = require('vscode');\n// Import exec from Node.js (used to run system commands)\nconst { exec } = require('child_process');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  // Get the opened workspace folders\n  const ws = vscode.workspace.workspaceFolders;\n  if (!ws || !ws.length) {\n    console.log('[GitAdd] No workspace folder.');\n    vscode.window.showWarningMessage('No workspace folder — cannot run git add.');\n    vm.stop();\n    return;\n  }\n\n  // Get the first workspace's filesystem path\n  const cwd = ws[0].uri.fsPath;\n  console.log('[GitAdd] cwd:', cwd);\n\n  // Execute the git add . command in the workspace directory\n  exec('git add .', { cwd }, (err, stdout, stderr) => {\n    if (err) {\n      // stderr usually contains error messages\n      console.error('[GitAdd] error:', stderr || err.message);\n      vscode.window.showErrorMessage('Git add failed: ' + (stderr || err.message));\n      vm.stop();\n      return;\n    }\n\n    // stdout contains the command output (Buffer → string)\n    if (stdout && stdout.trim()) console.log(stdout.trim());\n    console.log('[GitAdd] done.');\n\n    // Show a success message in VS Code\n    vscode.window.showInformationMessage('✅ git add . done');\n\n    vm.stop();\n  });\n})();"
  },
  {
    "command": "sbh.demo.storage",
    "text": "$(database) Storage",
    "tooltip": "How to use the custom statusBarHelper API",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "example",
      "storage"
    ],
    "script": "// Status Bar Helper v1: Demonstrates how to use the custom statusBarHelper API\n// Purpose:\n//  1. Show how to use custom storage (global & workspace) for key-value data\n//  2. Show how to use custom file APIs to read/write text, JSON, and binary data\n//  3. Show how to check existence, calculate file sizes, and log results\n//  4. Intended for demo/testing inside a VS Code extension with SBH enabled\n\n// Import Node.js Buffer (for binary and base64 handling)\nconst { Buffer } = require('buffer');\n\n// Destructure storage and files API from statusBarHelper v1\nconst { secret, storage, files, vm } = statusBarHelper.v1;\n\nfunction main() {\n\n  // Helper: current timestamp in readable format\n  const now = () => new Date().toISOString().replace('T', ' ').replace('Z', '');\n\n  // Helper: pretty-print any value for logging\n  const dump = (x) => {\n    if (x instanceof Uint8Array)\n      return `Uint8Array(${x.length}) [${Array.from(x).slice(0, 16).join(',')}${x.length > 16 ? ',…' : ''}]`;\n    try { return JSON.stringify(x, null, 2); } catch { return String(x); }\n  };\n\n  // Helper: prefixed log output\n  const log = (...a) => console.log('[SBH]', ...a.map(dump));\n\n  (async () => {\n    log('▶ start', now());\n\n    // ─────────────── secret ───────────────\n    await secret.set('github.token', 'ghp_xxx...');\n    const t = await secret.get('github.token');   // string | undefined\n    console.log('token', t);\n\n    // ─────────────── storage / global ───────────────\n    log('— storage / global —');\n    const gPrev = await storage.global.get('demo.keep', { runs: 0 });\n    await storage.global.set('demo.keep', { ...gPrev, runs: (gPrev.runs || 0) + 1, ts: now(), from: 'global' });\n    log('get keep =', await storage.global.get('demo.keep', null));\n    log('keys =', await storage.global.keys());\n\n    // ─────────────── storage / workspace ───────────────\n    log('— storage / workspace —');\n    try {\n      const wPrev = await storage.workspace.get('demo.keep', { runs: 0 });\n      await storage.workspace.set('demo.keep', { ...wPrev, runs: (wPrev.runs || 0) + 1, ts: now(), from: 'workspace' });\n      log('get keep =', await storage.workspace.get('demo.keep', null));\n      log('keys =', await storage.workspace.keys());\n    } catch (e) {\n      log('workspace storage not available:', e?.message || e);\n    }\n\n    // ─────────────── files API ───────────────\n    const dirs = await files.dirs();\n    log('dirs =', dirs);\n\n    // Text file (global scope)\n    const txtRel = 'demo/notes/hello.txt';\n    const txtOld = (await files.exists('global', txtRel)) ? await files.readText('global', txtRel) : '';\n    await files.writeText('global', txtRel, txtOld + `hello @ ${now()}\\n`);\n    log('readText:', await files.readText('global', txtRel));\n\n    // JSON file (workspace if available, otherwise global)\n    /** @type {'global'|'workspace'} */\n    const jsonScope = dirs.workspace ? 'workspace' : 'global';\n    const jsonRel = 'demo/data/sample.json';\n    const cur = (await files.exists(jsonScope, jsonRel))\n      ? await files.readJSON(jsonScope, jsonRel)\n      : { a: 1, createdAt: now() };\n    cur.updatedAt = now();\n    cur.count = (cur.count || 0) + 1;\n    await files.writeJSON(jsonScope, jsonRel, cur);\n    log('readJSON:', await files.readJSON(jsonScope, jsonRel));\n\n    // Binary file (Uint8Array)\n    const binRel = 'demo/bin/demo.bin';\n    await files.writeBytes('global', binRel, new Uint8Array([1, 2, 3, 4, 5, 254, 255]));\n    log('readBytes demo.bin:', await files.readBytes('global', binRel));\n\n    // Binary file (base64 string)\n    const b64Rel = 'demo/bin/base64.bin';\n    await files.writeBytes('global', b64Rel, Buffer.from([9, 8, 7, 6]).toString('base64'));\n    log('exists base64.bin:', await files.exists('global', b64Rel));\n\n    // Simulated list of known demo files + calculate size\n    /** @type {Array<{scope:'global'|'workspace', rel:string, type:'text'|'json'|'bytes'}>} */\n    const candidates = [\n      { scope: 'global', rel: 'demo/notes/hello.txt', type: 'text' },\n      { scope: jsonScope, rel: 'demo/data/sample.json', type: 'json' },\n      { scope: 'global', rel: 'demo/bin/demo.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/bin/base64.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/tmp/kept.txt', type: 'text' },\n    ];\n\n    /** @type {Array<{scope:string, path:string, type:string, size:number}>} */\n    const rows = [];\n    for (const c of candidates) {\n      if (await files.exists(c.scope, c.rel)) {\n        let size = 0;\n        if (c.type === 'text') {\n          const s = await files.readText(c.scope, c.rel);\n          size = Buffer.byteLength(s, 'utf8');\n        } else if (c.type === 'json') {\n          const obj = await files.readJSON(c.scope, c.rel);\n          size = Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        } else {\n          const b = await files.readBytes(c.scope, c.rel);\n          size = b?.length || 0;\n        }\n        rows.push({ scope: c.scope, path: c.rel, type: c.type, size });\n      }\n    }\n    log('files (simulated list):', rows);\n\n    // // Optional cleanup — user can delete via UI or uncomment below:\n    // await secret.delete('github.token');\n    // await storage.global.remove('demo.keep');\n    // await storage.workspace.remove('demo.keep').catch(()=>{});\n    // await files.remove('global', b64Rel);\n\n    log('✔ done', now());\n    vm.stop();\n  })().catch(e => {\n    console.error('❌', e);\n    vm.stop();\n  });\n}\n\nmain();"
  },
  {
    "text": "$(bookmark) Bookmarks - Sidebar",
    "tooltip": "Quick access to frequently used files",
    "command": "cmd.xd4vlg4p7z",
    "script": "// Bookmarks — Sidebar version (using statusBarHelper.v1.sidebar)\n// Same features as the original version: add current file / pick file / open / rename / edit (name+note) / copy path (in webview) / move up & down / search / import & export / repair path\n// Important: do NOT use vscode.Uri to open file → use string path with openTextDocument\n// Storage: workspace first, fallback global; stop automatically when Sidebar is closed (or replaced)\n\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { storage, vm, sidebar } = statusBarHelper.v1;\n\n(async function () {\n  // Status bar text (optional)\n  const setText = (t) => (typeof vm.setLabel === 'function' ? vm.setLabel(t) : vm.setText?.(t));\n  const setTip  = (t) => vm.setTooltip?.(t);\n  setText('Bookmarks'); setTip('Quick access to frequently used files');\n\n  // Storage (workspace > global)\n  const store = storage?.workspace || storage?.global;\n  if (!store) throw new Error('statusBarHelper.v1.storage unavailable');\n  const KEY = 'favorites.files.v6';\n  const defState = { items: [] }; // {id,name,fsPath,note,ts}\n  async function load(){ const s = await store.get(KEY, null); return (s && Array.isArray(s.items)) ? s : defState; }\n  async function save(st){ await store.set(KEY, st); }\n\n  // Remember last focused editor file path\n  let lastFilePath = null;\n  function rememberEditor(ed){ try{ const p = ed?.document?.uri?.fsPath; if(p) lastFilePath = String(p); }catch{} }\n  rememberEditor(vscode.window.activeTextEditor);\n  vscode.window.onDidChangeActiveTextEditor(rememberEditor);\n  vscode.window.onDidChangeTextEditorSelection(e=>rememberEditor(e?.textEditor));\n\n  // Path utilities\n  function normalizeFsPath(p) {\n    if (!p) return '';\n    p = String(p).trim();\n    if (process.platform === 'win32') {\n      const isUNC = p.startsWith('\\\\\\\\');\n      p = p.replace(/\\//g, '\\\\');\n      if (!isUNC) p = p.replace(/\\\\{2,}/g, '\\\\');\n    } else {\n      p = p.replace(/\\\\/g, '/').replace(/\\/{2,}/g, '/');\n    }\n    return p;\n  }\n  function cleanPath(raw){\n    if (!raw) return '';\n    let p = String(raw)\n      .replace(/^[\\s'\"]+|[\\s'\"]+$/g, '')\n      .replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n    p = normalizeFsPath(p);\n    try { p = path.resolve(p); } catch {}\n    return p;\n  }\n\n  // ───────────────── Sidebar Open ─────────────────\n  await sidebar.open({\n    html: getHtml(),\n    // Only stop VM when Sidebar is truly closed; if replaced by new 'open', ignore\n    onClose: (reason) => { if (reason === 'closed') vm.stop(); }\n  });\n  // Reverse: when VM stops, restore Sidebar to default page\n  vm.onStop(() => { try { sidebar.close(); } catch {} });\n\n  // Webview → Host messages\n  sidebar.onMessage(async (msg) => {\n    try {\n      switch (msg?.type) {\n        case 'ping': {\n          sidebar.postMessage({ type: 'pong' });\n          vscode.window.showInformationMessage('Bookmarks connected');\n          break;\n        }\n\n        case 'req:init': {\n          const st = await load();\n          st.items = (st.items || []).map(x => ({\n            id: String(x.id || ''),\n            name: String(x.name || ''),\n            fsPath: normalizeFsPath(String(x.fsPath || '')),\n            note: String(x.note || ''),\n            ts: Number(x.ts || Date.now())\n          }));\n          sidebar.postMessage({ type: 'init', state: st });\n          break;\n        }\n\n        case 'save': {\n          const st = msg.state;\n          if (st && Array.isArray(st.items)){\n            st.items = st.items.map(x=>({\n              id: String(x.id||''),\n              name: String(x.name||''),\n              fsPath: normalizeFsPath(String(x.fsPath||'')),\n              note: String(x.note||''),\n              ts: Number(x.ts||Date.now())\n            }));\n            await save({ items: st.items });\n            sidebar.postMessage({ type: 'saved' });\n          }\n          break;\n        }\n\n        case 'addCurrent': {\n          const fp = normalizeFsPath(String(lastFilePath||'')) || null;\n          sidebar.postMessage({ type: 'current', fsPath: fp });\n          break;\n        }\n\n        case 'pickFile': {\n          const picked = await vscode.window.showOpenDialog({\n            canSelectFiles:true, canSelectFolders:false, canSelectMany:false, openLabel:'Select File'\n          });\n          const uri = picked?.[0];\n          sidebar.postMessage({ type: 'picked', fsPath: normalizeFsPath(uri?.fsPath || '') || null });\n          break;\n        }\n\n        // Open file using string path only (no Uri)\n        case 'openFile': {\n          const raw = (msg && msg.fsPath) ? String(msg.fsPath) : '';\n          const fp  = cleanPath(raw);\n          if (!fp || !fs.existsSync(fp)) {\n            vscode.window.showWarningMessage('Cannot open file:\\n' + (fp || raw || '(empty)'));\n            break;\n          }\n          try {\n            const doc = await vscode.workspace.openTextDocument(fp);\n            await vscode.window.showTextDocument(doc, { preview: false });\n          } catch (e) {\n            vscode.window.showWarningMessage('Cannot open file:\\n' + fp);\n            console.log('[Bookmarks/openFile][fail]', String(e));\n          }\n          break;\n        }\n\n        case 'repath': {\n          const id = String(msg.id || '');\n          if (!id) break;\n          const picked = await vscode.window.showOpenDialog({\n            canSelectFiles: true, canSelectFolders: false, canSelectMany: false,\n            openLabel: 'Select File (Repair Path)'\n          });\n          const uri = picked?.[0];\n          const newPath = normalizeFsPath(uri?.fsPath || '');\n          if (!newPath) break;\n\n          const st = await load();\n          const idx = st.items.findIndex(x => x.id === id);\n          if (idx >= 0) {\n            st.items[idx].fsPath = newPath;\n            await save(st);\n            sidebar.postMessage({ type: 'init', state: st });\n            vscode.window.showInformationMessage('Path repaired');\n          }\n          break;\n        }\n\n        case 'copyPath': {\n          const text = String(msg.fsPath || '');\n          sidebar.postMessage({ type: 'doCopy', text });\n          break;\n        }\n\n        case 'notify': {\n          const m = msg.message || '';\n          if (msg.level==='warn') vscode.window.showWarningMessage(m);\n          else if (msg.level==='error') vscode.window.showErrorMessage(m);\n          else vscode.window.showInformationMessage(m);\n          break;\n        }\n      }\n    } catch (e) {\n      vscode.window.showErrorMessage('[Host Error] ' + (e?.message || String(e)));\n    }\n  });\n\n  // ───────────────── HTML (Webview) ─────────────────\n  // No CSP meta, maximize compatibility (inline JS/CSS only; no external links)\n  function getHtml(){\n    return [\n'<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>',\n'<title>Bookmarks</title>',\n'<style>',\n'body{margin:0;background:#1e1e1e;color:#ddd;font:12px system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;}',\n'.bar{display:flex;gap:8px;align-items:center;padding:8px;border-bottom:1px solid #3c3c3c;position:sticky;top:0;background:#1e1e1e;z-index:5;flex-wrap:wrap}',\n'.btn{border:1px solid #3c3c3c;background:rgba(255,255,255,.03);color:#ddd;padding:6px 10px;border-radius:8px;cursor:pointer;font-size:12px}',\n'.btn.primary{background:#0e639c;border-color:transparent;color:#fff}',\n'.list{display:grid;grid-template-columns:1fr;gap:8px;padding:8px}',\n'.card{border:1px solid #3c3c3c;border-radius:10px;background:rgba(255,255,255,.03);padding:8px;display:flex;flex-direction:column;gap:6px}',\n'.row{display:flex;gap:6px;flex-wrap:wrap;align-items:center}',\n'.title{margin:0;font-size:12px}',\n'.path{margin:0;color:#999;font-size:11px;word-break:break-all}',\n'.note{margin:0;color:#ccc;font-size:11px;white-space:pre-wrap;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3}',\n'input[type=text]{background:rgba(255,255,255,.03);border:1px solid #3c3c3c;color:#ddd;border-radius:8px;padding:6px 10px;font-size:12px;width:240px}',\n'dialog{border:1px solid #3c3c3c;background:#1e1e1e;color:#ddd;border-radius:10px;padding:0;width:min(560px,90vw)}',\n'dialog header{padding:8px;border-bottom:1px solid #3c3c3c}',\n'dialog main{padding:8px}',\n'textarea{width:100%;min-height:96px;background:rgba(255,255,255,.03);border:1px solid #3c3c3c;color:#ddd;border-radius:8px;padding:6px 10px;font-size:12px}',\n'.flex-end{display:flex;gap:8px;justify-content:flex-end;margin-top:8px}',\n'</style></head><body>',\n'<div class=\"bar\">',\n'  <button id=\"btnAddCurrent\" class=\"btn primary\" type=\"button\">Add Current File</button>',\n'  <button id=\"btnPick\" class=\"btn\" type=\"button\">Pick from Files</button>',\n'  <button id=\"btnExport\" class=\"btn\" type=\"button\">Export JSON</button>',\n'  <button id=\"btnImport\" class=\"btn\" type=\"button\">Import JSON</button>',\n'  <input id=\"q\" type=\"text\" placeholder=\"Search name/path/note (live)\"/>',\n'</div>',\n'<div id=\"list\" class=\"list\"></div>',\n'<dialog id=\"editDlg\"><header>Bookmark</header><main>',\n'  <div style=\"margin:6px 0\">Name</div><input id=\"fName\" type=\"text\" />',\n'  <div style=\"margin:8px 0 6px\">Note</div><textarea id=\"fNote\" placeholder=\"Optional\"></textarea>',\n'  <div class=\"flex-end\"><button id=\"editCancel\" class=\"btn\" type=\"button\">Cancel</button><button id=\"editOk\" class=\"btn primary\" type=\"button\">OK</button></div>',\n'</main></dialog>',\n'<dialog id=\"renameDlg\"><header>Rename</header><main>',\n'  <input id=\"renameText\" type=\"text\" />',\n'  <div class=\"flex-end\"><button id=\"renameCancel\" class=\"btn\" type=\"button\">Cancel</button><button id=\"renameOk\" class=\"btn primary\" type=\"button\">OK</button></div>',\n'</main></dialog>',\n'<script>',\n'var vscode = acquireVsCodeApi();',\n'var state = {items:[]};',\n'var listEl = document.getElementById(\"list\"); var qEl = document.getElementById(\"q\");',\n'var editDlg=document.getElementById(\"editDlg\"), fName=document.getElementById(\"fName\"), fNote=document.getElementById(\"fNote\"), editOk=document.getElementById(\"editOk\"), editCancel=document.getElementById(\"editCancel\");',\n'var renameDlg=document.getElementById(\"renameDlg\"), renameText=document.getElementById(\"renameText\"), renameOk=document.getElementById(\"renameOk\"), renameCancel=document.getElementById(\"renameCancel\");',\n'var pendingNewPath=null, editingId=null;',\n'function send(t,d){ var o=d||{}; o.type=t; vscode.postMessage(o); }',\n'function uid(){ return Math.random().toString(36).slice(2)+Date.now().toString(36); }',\n'function base(p){ if(!p) return \"\"; var i=Math.max(p.lastIndexOf(\"/\"),p.lastIndexOf(\"\\\\\\\\\")); return i>=0?p.slice(i+1):p; }',\n'function persist(){ send(\"save\",{state:state}); }',\n'function render(){ var q=(qEl.value||\"\").toLowerCase().trim(); var items=state.items.filter(function(it){ return !q || (it.name||\"\").toLowerCase().indexOf(q)>=0 || (it.fsPath||\"\").toLowerCase().indexOf(q)>=0 || (it.note||\"\").toLowerCase().indexOf(q)>=0; }); listEl.innerHTML=\"\"; if(!items.length){ var d=document.createElement(\"div\"); d.className=\"path\"; d.textContent=q?\"No matching items\":\"No bookmarks yet, use the buttons above to add.\"; d.style.padding=\"6px\"; listEl.appendChild(d); return; } items.forEach(function(it){ listEl.appendChild(card(it)); }); }',\n'function card(it){ var c=document.createElement(\"div\"); c.className=\"card\"; var h=document.createElement(\"h4\"); h.className=\"title\"; h.textContent=it.name||base(it.fsPath)||\"(Unnamed)\"; c.appendChild(h); var p=document.createElement(\"p\"); p.className=\"path\"; p.textContent=it.fsPath||\"\"; c.appendChild(p); if(it.note){ var n=document.createElement(\"p\"); n.className=\"note\"; n.textContent=it.note; c.appendChild(n); } var r=document.createElement(\"div\"); r.className=\"row\"; ',\n'  r.appendChild(btn(\"Open\", function(){ if(!it.fsPath){ alert(\"This bookmark has no path, please click \\\\\"Repair Path\\\\\" first.\"); return; } send(\"openFile\",{fsPath:it.fsPath}); }));',\n'  r.appendChild(btn(\"Move Up\", function(){ move(it.id,-1);}));',\n'  r.appendChild(btn(\"Move Down\", function(){ move(it.id,1);}));',\n'  r.appendChild(btn(\"Edit\", function(){ openEdit(it.id);}));',\n'  r.appendChild(btn(\"Rename\", function(){ openRename(it.id, it.name||base(it.fsPath)); }));',\n'  r.appendChild(btn(\"Copy Path\", function(){ if(!it.fsPath){ alert(\"No path to copy, please \\\\\"Repair Path\\\\\" first.\"); return; } send(\"copyPath\",{fsPath:it.fsPath}); }));',\n'  r.appendChild(btn(\"Repair Path\", function(){ send(\"repath\",{id: it.id}); }));',\n'  r.appendChild(btn(\"Remove\", function(){ removeItem(it.id);}));',\n'  c.appendChild(r); return c; }',\n'function btn(t,fn){ var b=document.createElement(\"button\"); b.className=\"btn\"; b.type=\"button\"; b.textContent=t; b.onclick=fn; return b; }',\n'function addItem(fsPath,name,note){ if(!fsPath){ send(\"notify\",{level:\"warn\",message:\"No file to add\"}); return; } state.items.unshift({id:uid(),name:(name||\"\").trim()||base(fsPath),fsPath:fsPath,note:(note||\"\"),ts:Date.now()}); persist(); render(); }',\n'function removeItem(id){ state.items = state.items.filter(function(x){return x.id!==id;}); persist(); render(); }',\n'function move(id,d){ var i=state.items.findIndex(function(x){return x.id===id;}); if(i<0) return; var j=i+d; if(j<0||j>=state.items.length) return; var x=state.items.splice(i,1)[0]; state.items.splice(j,0,x); persist(); render(); }',\n'function openRename(id,cur){ editingId=id; renameText.value=cur||\"\"; renameDlg.showModal(); renameText.focus(); renameText.select(); }',\n'renameOk.onclick=function(){ var it=state.items.find(function(x){return x.id===editingId;}); if(it){ var v=(renameText.value||\"\").trim(); it.name=v||base(it.fsPath); persist(); render(); } renameDlg.close(); };',\n'renameCancel.onclick=function(){ renameDlg.close(); };',\n'function openEdit(id){ editingId=id; var it=state.items.find(function(x){return x.id===id;}); if(!it) return; pendingNewPath=it.fsPath; fName.value=it.name||base(it.fsPath); fNote.value=it.note||\"\"; editDlg.showModal(); fName.focus(); fName.select(); }',\n'function openCreate(fp){ editingId=null; pendingNewPath=fp; fName.value=base(fp)||\"\"; fNote.value=\"\"; editDlg.showModal(); fName.focus(); fName.select(); }',\n'editOk.onclick=function(){ var name=(fName.value||\"\").trim(); var note=(fNote.value||\"\"); if(editingId){ var it=state.items.find(function(x){return x.id===editingId;}); if(it){ it.name=name||base(it.fsPath); it.note=note; persist(); render(); } }else{ addItem(pendingNewPath,name,note); } editDlg.close(); };',\n'editCancel.onclick=function(){ editDlg.close(); };',\n'document.getElementById(\"btnAddCurrent\").onclick=function(){ send(\"addCurrent\"); };',\n'document.getElementById(\"btnPick\").onclick=function(){ send(\"pickFile\"); };',\n'document.getElementById(\"btnExport\").onclick=function(){ try{ var blob=new Blob([JSON.stringify(state,null,2)],{type:\"application/json\"}); var url=URL.createObjectURL(blob); var a=document.createElement(\"a\"); a.href=url; a.download=\"favorites.files.json\"; a.click(); setTimeout(function(){URL.revokeObjectURL(url);},0);}catch(e){ alert(\"Export failed: \"+e); } };',\n'document.getElementById(\"btnImport\").onclick=function(){ try{ var i=document.createElement(\"input\"); i.type=\"file\"; i.accept=\"application/json\"; i.onchange=function(){ var f=i.files&&i.files[0]; if(!f) return; var rd=new FileReader(); rd.onload=function(){ try{ var j=JSON.parse(String(rd.result||\"{}\")); if(Array.isArray(j.items)){ state={items:j.items.map(function(x){ return {id:x.id||uid(),name:x.name||\"\",fsPath:x.fsPath||\"\",note:x.note||\"\",ts:x.ts||Date.now()}; })}; persist(); render(); } else { alert(\"Invalid format: missing items\"); } }catch(ex){ alert(\"JSON parse failed: \"+ex); } }; rd.readAsText(f); }; i.click(); }catch(e){ alert(\"Import failed: \"+e); } };',\n'qEl.oninput=function(){ render(); };',\n'window.addEventListener(\"message\",function(e){ var m=e.data||{};',\n'  if(m.type===\"init\"){ state=m.state||{items:[]}; render(); }',\n'  if(m.type===\"picked\"&&m.fsPath){ openCreate(m.fsPath); }',\n'  if(m.type===\"current\"&&m.fsPath){ openCreate(m.fsPath); }',\n'  if(m.type===\"doCopy\"){ var text=m.text||\"\"; if(navigator.clipboard && navigator.clipboard.writeText){ navigator.clipboard.writeText(text).then(function(){ send(\"notify\",{message:\"Path copied\"}); }).catch(function(){ fallbackCopy(text); }); } else { fallbackCopy(text); } }',\n'});',\n'function fallbackCopy(text){ try{ var ta=document.createElement(\"textarea\"); ta.value=text; ta.setAttribute(\"readonly\",\"\"); ta.style.position=\"fixed\"; ta.style.opacity=\"0\"; document.body.appendChild(ta); ta.select(); document.execCommand(\"copy\"); document.body.removeChild(ta); send(\"notify\",{message:\"Path copied\"}); }catch(e){ send(\"notify\",{level:\"error\",message:\"Copy failed: \"+(e&&e.message||e)}); } }',\n'window.addEventListener(\"load\",function(){ send(\"ping\"); send(\"req:init\"); });',\n'</script></body></html>'\n    ].join('');\n  }\n})();\n",
    "enableOnInit": false,
    "hidden": false,
    "tags": [
      "default",
      "tool"
    ]
  },
  {
    "command": "sbh.demo.whiteboard",
    "text": "$(paintcan) Board",
    "tooltip": "Board",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Whiteboard (no save): draw-only Webview + Export PNG + correct Undo/Redo scaling\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhWhiteboard',\n    'Whiteboard — Draw Only',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n\n  vm.onStop(reason => {\n    try { panel.dispose(); } catch {}\n  });\n\n  panel.onDidDispose(() => {\n    vm.stop();\n  });\n\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n\n  // 接收 webview 的匯出請求 → 存檔\n  panel.webview.onDidReceiveMessage(async (msg) => {\n    if (msg?.type !== 'exportPNG' || typeof msg.dataURL !== 'string') return;\n    try {\n      const now = new Date();\n      const y = now.getFullYear();\n      const m = String(now.getMonth()+1).padStart(2,'0');\n      const d = String(now.getDate()).padStart(2,'0');\n      const hh = String(now.getHours()).padStart(2,'0');\n      const mm = String(now.getMinutes()).padStart(2,'0');\n      const ss = String(now.getSeconds()).padStart(2,'0');\n      const defaultName = `whiteboard-${y}${m}${d}-${hh}${mm}${ss}.png`;\n\n      const uri = await vscode.window.showSaveDialog({\n        saveLabel: 'Export PNG',\n        defaultUri: vscode.Uri.file(path.join(process.cwd(), defaultName)),\n        filters: { 'PNG Image': ['png'] }\n      });\n      if (!uri) return;\n\n      const base64 = msg.dataURL.split(',')[1] || '';\n      fs.writeFileSync(uri.fsPath, Buffer.from(base64, 'base64'));\n\n      vscode.window.showInformationMessage(`✅ Exported: ${path.basename(uri.fsPath)}`);\n      panel.webview.postMessage({ type: 'exported', file: uri.fsPath });\n    } catch (e) {\n      vscode.window.showErrorMessage('Export failed: ' + (e?.message || e));\n    }\n  });\n\n  function getHtml(nonce){\n    return `<!doctype html>\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n<title>Whiteboard (Draw Only)</title>\n<style>\n  :root{ --h:32px }\n  body{font-family:var(--vscode-font-family);color:var(--vscode-foreground);background:var(--vscode-editor-background);margin:0}\n  .bar{display:flex;align-items:center;gap:8px;border-bottom:1px solid var(--vscode-editorGroup-border);padding:6px 8px;height:var(--h);user-select:none;background:var(--vscode-sideBar-background)}\n  .bar input[type=\"color\"]{width:28px;height:20px;border:1px solid var(--vscode-input-border);background:var(--vscode-input-background)}\n  .bar input[type=\"range\"]{width:120px}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer}\n  button:hover{background:var(--vscode-button-hoverBackground)}\n  #wrap{position:relative;height:calc(100vh - var(--h) - 2px)}\n  canvas{width:100%;height:100%}\n  #grid{position:absolute;inset:0;background:\n        linear-gradient(to right, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px,\n        linear-gradient(to bottom, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px;pointer-events:none;opacity:.2}\n  #msg{margin-left:auto;opacity:.85;font-size:.9em}\n</style>\n<div class=\"bar\">\n  <span>Color</span><input id=\"color\" type=\"color\" value=\"#00d3a7\">\n  <span>Size</span><input id=\"size\" type=\"range\" min=\"1\" max=\"32\" value=\"4\">\n  <button id=\"undo\">Undo</button>\n  <button id=\"redo\">Redo</button>\n  <button id=\"clear\">Clear</button>\n  <span style=\"flex:1\"></span>\n  <button id=\"export\">Export PNG</button>\n  <span id=\"msg\"></span>\n</div>\n<div id=\"wrap\">\n  <canvas id=\"c\"></canvas>\n  <div id=\"grid\"></div>\n</div>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const c = document.getElementById('c');\n  const ctx = c.getContext('2d');\n  let drawing=false, last=null;\n  let color=document.getElementById('color').value;\n  let size=+document.getElementById('size').value;\n  const undoStack=[], redoStack=[];\n  const msgEl = document.getElementById('msg');\n\n  function flash(t){ msgEl.textContent=t; setTimeout(()=>msgEl.textContent='', 2000); }\n  function dpr(){ return window.devicePixelRatio || 1; }\n  function applyScale(){ ctx.setTransform(1,0,0,1,0,0); ctx.scale(dpr(), dpr()); }\n\n  function resize(){\n    const r=c.getBoundingClientRect();\n    const tmp=document.createElement('canvas');\n    tmp.width=c.width; tmp.height=c.height;\n    tmp.getContext('2d').drawImage(c,0,0);\n\n    c.width = Math.max(1, Math.round(r.width  * dpr()));\n    c.height= Math.max(1, Math.round(r.height * dpr()));\n    applyScale();\n    try { ctx.drawImage(tmp, 0,0, tmp.width, tmp.height, 0,0, c.width, c.height); } catch {}\n  }\n  new ResizeObserver(resize).observe(document.getElementById('wrap'));\n  setTimeout(resize,0);\n\n  function line(p1,p2){\n    ctx.strokeStyle=color; ctx.lineWidth=size; ctx.lineCap='round'; ctx.lineJoin='round';\n    ctx.beginPath(); ctx.moveTo(p1.x,p1.y); ctx.lineTo(p2.x,p2.y); ctx.stroke();\n  }\n  function pos(e){ const r=c.getBoundingClientRect(); return { x:e.clientX-r.left, y:e.clientY-r.top }; }\n\n  function makeSnap(){ return { w: c.width, h: c.height, url: c.toDataURL('image/png') }; }\n  function snapshot(){ try{ undoStack.push(makeSnap()); if(undoStack.length>30) undoStack.shift(); }catch{} redoStack.length=0; }\n  function restore(snap){\n    return new Promise(res=>{\n      const img=new Image();\n      img.onload=()=>{\n        ctx.setTransform(1,0,0,1,0,0);\n        ctx.clearRect(0,0,c.width,c.height);\n        ctx.drawImage(img, 0,0, snap.w, snap.h, 0,0, c.width, c.height);\n        applyScale();\n        res();\n      };\n      img.src=snap.url;\n    });\n  }\n\n  c.addEventListener('pointerdown', e=>{ e.preventDefault(); snapshot(); drawing=true; last=pos(e); });\n  c.addEventListener('pointermove', e=>{ if(!drawing) return; const p=pos(e); line(last,p); last=p; });\n  c.addEventListener('pointerup',   ()=>{ drawing=false; last=null; });\n  c.addEventListener('pointerleave',()=>{ drawing=false; last=null; });\n\n  document.getElementById('color').oninput=e=>color=e.target.value;\n  document.getElementById('size').oninput =e=>size=+e.target.value;\n\n  document.getElementById('undo').onclick = async ()=>{\n    if(!undoStack.length) return;\n    const snap = undoStack.pop();\n    redoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('redo').onclick = async ()=>{\n    if(!redoStack.length) return;\n    const snap = redoStack.pop();\n    undoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('clear').onclick = ()=>{\n    snapshot();\n    ctx.setTransform(1,0,0,1,0,0);\n    ctx.clearRect(0,0,c.width,c.height);\n    applyScale();\n  };\n\n  document.getElementById('export').onclick= ()=>{\n    try{\n      const url=c.toDataURL('image/png');\n      vscode.postMessage({ type:'exportPNG', dataURL: url });\n      flash('Exporting…');\n    }catch(e){ flash('Export failed'); }\n  };\n  window.addEventListener('message', e=>{\n    const m=e.data||{};\n    if(m.type==='exported'){\n      const name=(m.file||'').split(/[\\\\/]/).pop()||m.file;\n      flash('Saved: '+name);\n    }\n  });\n<\\/script>`;\n  }\n})();"
  },
  {
    "command": "sbh.demo.pomodoro",
    "text": "🍅 Pomodoro",
    "tooltip": "Open Pomodoro Timer",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "productivity"
    ],
    "script": "// @ts-check\n// 🍅 Pomodoro in Status Bar — Quick Pick (Start / Stop, auto-clean on abort)\nconst vscode = require('vscode');\nconst { setInterval, clearInterval } = require('timers');\nconst { randomUUID } = require('crypto');\nconst { vm } = statusBarHelper.v1;\n\n(function () {\n  const DEFAULT_MIN = 25;\n  const PRIORITY = 1000;\n  const KEY = '__SBH_POMODORO_SINGLETON__';\n  /** @type {{\n   *  item?: vscode.StatusBarItem,\n   *  timer?: NodeJS.Timeout|null,\n   *  endAt?: number,\n   *  mode?: 'idle'|'running',\n   *  minutes?: number,\n   *  cmdId?: string,\n   *  disposable?: vscode.Disposable|null\n   * }} */\n  const S = (globalThis[KEY] ||= {\n    timer: null, endAt: 0, mode: 'idle', minutes: DEFAULT_MIN, disposable: null\n  });\n\n  const fmt = (secs) => {\n    const m = Math.floor(secs / 60);\n    const s = secs % 60;\n    return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;\n  };\n\n  const createItem = () => {\n    if (!S.item) {\n      S.item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, PRIORITY);\n      S.item.command = getCommandId();\n      S.item.tooltip = 'Pomodoro — click to open menu';\n      S.item.show();\n    }\n  };\n\n  const getCommandId = () => {\n    if (!S.cmdId) S.cmdId = `sbh.pomodoro.menu.${randomUUID()}`;\n    if (!S.disposable) {\n      try {\n        S.disposable = vscode.commands.registerCommand(S.cmdId, openMenu);\n      } catch {}\n    }\n    return S.cmdId;\n  };\n\n  const update = () => {\n    if (!S.item) return;\n    if (S.mode !== 'running') {\n      S.item.text = `🍅 ${String(S.minutes).padStart(2,'0')}:00`;\n      S.item.tooltip = 'Pomodoro — click to open menu';\n      return;\n    }\n    const remain = Math.max(0, Math.ceil((S.endAt - Date.now()) / 1000));\n    S.item.text = `🍅 ${fmt(remain)}`;\n    S.item.tooltip = 'Counting down — click to open menu';\n    if (remain <= 0) finish();\n  };\n\n  const start = (minutes = S.minutes) => {\n    createItem();\n    clearTimer();\n    S.minutes = minutes;\n    S.endAt = Date.now() + minutes * 60 * 1000;\n    S.mode = 'running';\n    update();\n    S.timer = setInterval(update, 1000);\n    vscode.window.showInformationMessage(`🍅 Started ${minutes} minutes`);\n  };\n\n  const finish = () => {\n    clearTimer();\n    S.mode = 'idle';\n    update();\n    vscode.window.showInformationMessage('⏰ Time’s up! Take a break.');\n    vscode.window.showWarningMessage('⏰ Pomodoro is over! Start another round?', 'Restart', 'Cancel')\n      .then(choice => { if (choice === 'Restart') start(S.minutes); });\n  };\n\n  const closeAll = () => {\n    clearTimer();\n    S.mode = 'idle';\n    if (S.item) { S.item.dispose(); S.item = undefined; }\n    if (S.disposable) { S.disposable.dispose(); S.disposable = null; }\n    S.cmdId = undefined;\n  };\n\n  const clearTimer = () => {\n    if (S.timer) { clearInterval(S.timer); S.timer = null; }\n  };\n\n  async function openMenu() {\n    const remain = S.mode === 'running' ? Math.max(0, Math.ceil((S.endAt - Date.now())/1000)) : null;\n    /** @type {Array<{label:string, detail?:string, action:'start'|'close'|'custom'|'stop'}>} */\n    const picks = [];\n\n    if (S.mode === 'running') {\n      picks.push({ label: 'Stop', detail: `Stop current timer (remaining ${fmt(remain)})`, action: 'stop' });\n      picks.push({ label: 'Start', detail: `Restart ${S.minutes} minutes`, action: 'start' });\n    } else {\n      picks.push({ label: 'Start', detail: `Start ${S.minutes} minute timer`, action: 'start' });\n    }\n    picks.push({ label: 'Custom minutes…', detail: 'Enter 1–120 minutes to start', action: 'custom' });\n    picks.push({ label: 'Close', detail: 'Remove status bar item', action: 'close' });\n\n    const picked = await vscode.window.showQuickPick(picks, {\n      placeHolder: 'Pomodoro — choose an action',\n      ignoreFocusOut: true\n    });\n    if (!picked) return;\n\n    if (picked.action === 'start') start(S.minutes);\n    else if (picked.action === 'stop') { clearTimer(); S.mode = 'idle'; update(); }\n    else if (picked.action === 'close') closeAll();\n    else if (picked.action === 'custom') {\n      const v = await vscode.window.showInputBox({\n        prompt: 'Enter minutes (1–120)',\n        value: String(S.minutes),\n        validateInput: (s) => {\n          const n = Number(s);\n          if (!Number.isFinite(n) || n < 1 || n > 120) return 'Enter an integer between 1 and 120';\n          return null;\n        }\n      });\n      if (v) start(Number(v));\n    }\n  }\n\n  // Automatically clean up when externally stopped (e.g., rerun, delete, hide, script change, or disable).\n  vm.onStop(reason => {\n    try { closeAll(); } catch {}\n  });\n\n  createItem();\n  update();\n})();"
  },
  {
    "command": "sbh.demo.vmChatA",
    "text": "$(comment) Chat A",
    "tooltip": "VM messaging demo (A) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "vm"
    ],
    "script": "// VM Chat A — demonstrates vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop\n// Commands assumed:\n//   A: sbh.demo.vmChatA\n//   B: sbh.demo.vmChatB\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main () {\n  const SELF = 'sbh.demo.vmChatA';\n  const PEER = 'sbh.demo.vmChatB';\n  let panel;\n\n  vm.onStop(() => { try { panel?.dispose(); } catch {} });\n\n  function ensurePanel () {\n    if (panel) return panel;\n    panel = vscode.window.createWebviewPanel(\n      'sbhVmChatA',\n      'VM Chat A',\n      vscode.ViewColumn.Active,\n      { enableScripts: true, retainContextWhenHidden: true }\n    );\n    panel.onDidDispose(() => { try { vm.stop(); } catch {} });\n\n    const nonce = Math.random().toString(36).slice(2);\n    panel.webview.html = getHtml(nonce, 'A', SELF, PEER);\n    panel.webview.onDidReceiveMessage(onWebviewMessage);\n    return panel;\n  }\n\n  function log (line) { try { panel?.webview.postMessage({ type: 'append', line }); } catch {} }\n\n  function onWebviewMessage (msg) {\n    if (!msg || typeof msg !== 'object') return;\n\n    if (msg.type === 'send') {\n      const text = String(msg.text || '').trim();\n      if (!text) return;\n      vm.sendMessage(PEER, { from: SELF, text, at: Date.now() });\n      log('[me -> B] ' + text);\n    } else if (msg.type === 'openPeer') {\n      vm.open(PEER, { from: SELF, text: '👋 Hello (started from A)', at: Date.now() })\n        .catch(e => log('[open error] ' + (e?.message || e)));\n      log('[system] Requested to open B');\n    } else if (msg.type === 'stopPeer') {\n      try { vm.stopByCommand(PEER, { type: 'peerStop', from: SELF, at: Date.now() }); }\n      catch (e) { log('[stopPeer error] ' + (e?.message || e)); }\n      log('[system] Requested to stop B');\n    } else if (msg.type === 'stopSelf') {\n      try { vm.stop({ type: 'selfStop', from: SELF, at: Date.now() }); } catch {}\n    }\n  }\n\n  // Receive messages from peer\n  vm.onMessage((from, payload) => {\n    try {\n      if (from !== PEER) return; // Only show peer messages\n      const text = (payload && payload.text != null) ? String(payload.text) : JSON.stringify(payload);\n      const ts = new Date(payload?.at || Date.now()).toLocaleTimeString();\n      log('[B -> me @ ' + ts + '] ' + text);\n    } catch (e) {\n      log('[recv error] ' + (e?.message || e));\n    }\n  });\n\n  ensurePanel();\n  log('[system] Chat A ready. Use the buttons to interact with Chat B.');\n})();\n\nfunction getHtml (nonce, label, selfCmd, peerCmd) {\n  return `<!doctype html>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'\">\n<title>VM Chat ${label}</title>\n<style>\n  body{font-family:var(--vscode-font-family);margin:0;background:var(--vscode-editor-background);color:var(--vscode-foreground);}\n  header{padding:8px;border-bottom:1px solid var(--vscode-editorGroup-border);display:flex;gap:8px;align-items:center;flex-wrap:wrap;}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer;font-size:.9em;}\n  button:hover{background:var(--vscode-button-hoverBackground);}\n  input{flex:1;min-width:160px;padding:4px 6px;background:var(--vscode-input-background);color:var(--vscode-input-foreground);border:1px solid var(--vscode-input-border);border-radius:3px;}\n  #log{padding:8px;font:12px var(--vscode-editor-font-family,monospace);white-space:pre-wrap;overflow:auto;max-height:60vh;}\n  footer{padding:6px 8px;border-top:1px solid var(--vscode-editorGroup-border);font-size:11px;opacity:.7;}\n  .cmd{opacity:.7;font-size:.8em}\n</style>\n<header>\n  <strong>Chat ${label}</strong>\n  <button id=\"openPeer\" title=\"Start peer script if not running\">Open Peer</button>\n  <button id=\"stopPeer\" title=\"Stop peer script\">Stop Peer</button>\n  <button id=\"stopSelf\" title=\"Stop this script\">Stop Self</button>\n  <input id=\"msg\" placeholder=\"Type message…\" />\n  <button id=\"send\">Send</button>\n</header>\n<div id=\"log\" tabindex=\"0\"></div>\n<footer>self: <code>${selfCmd}</code> &nbsp; peer: <code>${peerCmd}</code> — Demonstrating vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop</footer>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const logEl = document.getElementById('log');\n\n  function append(line){\n    const at = new Date().toLocaleTimeString();\n    logEl.textContent += \\`[\\${at}] \\${line}\\\\n\\`;\n    logEl.scrollTop = logEl.scrollHeight;\n  }\n\n  append('script injected');\n\n  window.addEventListener('message', e => {\n    const m = e.data || {};\n    if (m.type === 'append') append(m.line);\n  });\n\n  document.getElementById('send').onclick = () => {\n    const el = document.getElementById('msg');\n    vscode.postMessage({ type: 'send', text: el.value });\n    el.value = '';\n  };\n\n  document.getElementById('openPeer').onclick = () => vscode.postMessage({ type: 'openPeer' });\n  document.getElementById('stopPeer').onclick = () => vscode.postMessage({ type: 'stopPeer' });\n  document.getElementById('stopSelf').onclick = () => vscode.postMessage({ type: 'stopSelf' });\n\n  document.getElementById('msg').addEventListener('keydown', e => {\n    if (e.key === 'Enter') document.getElementById('send').click();\n  });\n\n  append('UI loaded.');\n</script>`;\n}\n"
  },
  {
    "command": "sbh.demo.vmChatB",
    "text": "$(comment-discussion) Chat B",
    "tooltip": "VM messaging demo (B) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "vm"
    ],
    "script": "// VM Chat B — demonstrates vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop\n// Commands assumed:\n//   A: sbh.demo.vmChatA\n//   B: sbh.demo.vmChatB\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main () {\n  const SELF = 'sbh.demo.vmChatB';\n  const PEER = 'sbh.demo.vmChatA';\n  let panel;\n\n  vm.onStop(() => { try { panel?.dispose(); } catch {} });\n\n  function ensurePanel () {\n    if (panel) return panel;\n    panel = vscode.window.createWebviewPanel(\n      'sbhVmChatB',\n      'VM Chat B',\n      vscode.ViewColumn.Active,\n      { enableScripts: true, retainContextWhenHidden: true }\n    );\n    panel.onDidDispose(() => { try { vm.stop(); } catch {} });\n\n    const nonce = Math.random().toString(36).slice(2);\n    panel.webview.html = getHtml(nonce, 'B', SELF, PEER);\n    panel.webview.onDidReceiveMessage(onWebviewMessage);\n    return panel;\n  }\n\n  function log (line) { try { panel?.webview.postMessage({ type: 'append', line }); } catch {} }\n\n  function onWebviewMessage (msg) {\n    if (!msg || typeof msg !== 'object') return;\n\n    if (msg.type === 'send') {\n      const text = String(msg.text || '').trim();\n      if (!text) return;\n      vm.sendMessage(PEER, { from: SELF, text, at: Date.now() });\n      log('[me -> A] ' + text);\n    } else if (msg.type === 'openPeer') {\n      vm.open(PEER, { from: SELF, text: '👋 Hello (started from B)', at: Date.now() })\n        .catch(e => log('[open error] ' + (e?.message || e)));\n      log('[system] Requested to open A');\n    } else if (msg.type === 'stopPeer') {\n      try { vm.stopByCommand(PEER, { type: 'peerStop', from: SELF, at: Date.now() }); }\n      catch (e) { log('[stopPeer error] ' + (e?.message || e)); }\n      log('[system] Requested to stop A');\n    } else if (msg.type === 'stopSelf') {\n      try { vm.stop({ type: 'selfStop', from: SELF, at: Date.now() }); } catch {}\n    }\n  }\n\n  // Receive messages from peer\n  vm.onMessage((from, payload) => {\n    try {\n      if (from !== PEER) return; // Only show peer messages\n      const text = (payload && payload.text != null) ? String(payload.text) : JSON.stringify(payload);\n      const ts = new Date(payload?.at || Date.now()).toLocaleTimeString();\n      log('[A -> me @ ' + ts + '] ' + text);\n    } catch (e) {\n      log('[recv error] ' + (e?.message || e));\n    }\n  });\n\n  ensurePanel();\n  log('[system] Chat B ready. Use the buttons to interact with Chat A.');\n})();\n\nfunction getHtml (nonce, label, selfCmd, peerCmd) {\n  return `<!doctype html>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'\">\n<title>VM Chat ${label}</title>\n<style>\n  body{font-family:var(--vscode-font-family);margin:0;background:var(--vscode-editor-background);color:var(--vscode-foreground);}\n  header{padding:8px;border-bottom:1px solid var(--vscode-editorGroup-border);display:flex;gap:8px;align-items:center;flex-wrap:wrap;}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer;font-size:.9em;}\n  button:hover{background:var(--vscode-button-hoverBackground);}\n  input{flex:1;min-width:160px;padding:4px 6px;background:var(--vscode-input-background);color:var(--vscode-input-foreground);border:1px solid var(--vscode-input-border);border-radius:3px;}\n  #log{padding:8px;font:12px var(--vscode-editor-font-family,monospace);white-space:pre-wrap;overflow:auto;max-height:60vh;}\n  footer{padding:6px 8px;border-top:1px solid var(--vscode-editorGroup-border);font-size:11px;opacity:.7;}\n  .cmd{opacity:.7;font-size:.8em}\n</style>\n<header>\n  <strong>Chat ${label}</strong>\n  <button id=\"openPeer\" title=\"Start peer script if not running\">Open Peer</button>\n  <button id=\"stopPeer\" title=\"Stop peer script\">Stop Peer</button>\n  <button id=\"stopSelf\" title=\"Stop this script\">Stop Self</button>\n  <input id=\"msg\" placeholder=\"Type message…\" />\n  <button id=\"send\">Send</button>\n</header>\n<div id=\"log\" tabindex=\"0\"></div>\n<footer>self: <code>${selfCmd}</code> &nbsp; peer: <code>${peerCmd}</code> — Demonstrating vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop</footer>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const logEl = document.getElementById('log');\n\n  function append(line){\n    const at = new Date().toLocaleTimeString();\n    logEl.textContent += \\`[\\${at}] \\${line}\\\\n\\`;\n    logEl.scrollTop = logEl.scrollHeight;\n  }\n\n  append('script injected');\n\n  window.addEventListener('message', e => {\n    const m = e.data || {};\n    if (m.type === 'append') append(m.line);\n  });\n\n  document.getElementById('send').onclick = () => {\n    const el = document.getElementById('msg');\n    vscode.postMessage({ type: 'send', text: el.value });\n    el.value = '';\n  };\n\n  document.getElementById('openPeer').onclick = () => vscode.postMessage({ type: 'openPeer' });\n  document.getElementById('stopPeer').onclick = () => vscode.postMessage({ type: 'stopPeer' });\n  document.getElementById('stopSelf').onclick = () => vscode.postMessage({ type: 'stopSelf' });\n\n  document.getElementById('msg').addEventListener('keydown', e => {\n    if (e.key === 'Enter') document.getElementById('send').click();\n  });\n\n  append('UI loaded.');\n</script>`;\n}\n"
  },
  {
    "command": "cmd.n69fhe52nu",
    "text": "⛅ Weather",
    "tooltip": "Click to view weather forecast",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Weather Forecast — Webview (Open-Meteo, no API key, English version, fixed hourly chart)\n// Paste this into status-bar-helper's Script field\n// Click on the status bar → open weather forecast Webview\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main () {\n  const panel = vscode.window.createWebviewPanel(\n    'sbhWeather',\n    'Weather Forecast',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n\n  vm.onStop(() => { try { panel.dispose(); } catch {} });\n  panel.onDidDispose(() => vm.stop());\n\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml (nonce) {\n  const cities = [\n    { name: 'Taipei',    lat: 25.0375, lon: 121.5637, tz: 'Asia/Taipei' },\n    { name: 'Hsinchu',   lat: 24.8066, lon: 120.9686, tz: 'Asia/Taipei' },\n    { name: 'Taichung',  lat: 24.1477, lon: 120.6736, tz: 'Asia/Taipei' },\n    { name: 'Tainan',    lat: 22.9997, lon: 120.2270, tz: 'Asia/Taipei' },\n    { name: 'Kaohsiung', lat: 22.6273, lon: 120.3014, tz: 'Asia/Taipei' },\n    { name: 'Hualien',   lat: 23.9872, lon: 121.6015, tz: 'Asia/Taipei' },\n    { name: 'Taitung',   lat: 22.7972, lon: 121.0717, tz: 'Asia/Taipei' },\n    { name: 'Tokyo',     lat: 35.6762, lon: 139.6503, tz: 'Asia/Tokyo' },\n    { name: 'Seoul',     lat: 37.5665, lon: 126.9780, tz: 'Asia/Seoul' },\n    { name: 'New York',  lat: 40.7128, lon: -74.0060, tz: 'America/New_York' },\n  ];\n\n  const options = cities.map((c, i) =>\n    `<option value=\"${i}\">${c.name}</option>`).join('');\n\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"Content-Security-Policy\"\n          content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'; connect-src https:;\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <title>Weather Forecast</title>\n    <style>\n      :root { --fg:#e7e7e7; --muted:#a7a7a7; --bg:#151515; --card:#222; --accent:#5da5ff; --border:#333; }\n      body { background:var(--bg); color:var(--fg); margin:0; font-family: ui-sans-serif, system-ui, -apple-system, \"Segoe UI\", Roboto, Arial; }\n      .wrap { padding:16px; max-width:1080px; margin:0 auto; }\n      .row { display:flex; gap:12px; align-items:center; flex-wrap:wrap; }\n      select, button, input { background:var(--card); color:var(--fg); border:1px solid var(--border); border-radius:10px; padding:8px 10px; }\n      button { cursor:pointer; }\n      .card { background:var(--card); border:1px solid var(--border); border-radius:14px; padding:14px; margin-top:14px; box-shadow: 0 8px 24px rgba(0,0,0,.24); }\n      .title { font-weight:700; font-size:18px; margin-bottom:6px; }\n      .muted { color:var(--muted); }\n      .grid { display:grid; grid-template-columns: repeat(5, minmax(0,1fr)); gap:12px; }\n      .day { background:#1b1b1b; border:1px solid #2d2d2d; border-radius:12px; padding:10px; text-align:center; }\n      .big { font-size:32px; font-weight:800; line-height:1; }\n      .kpis { display:flex; gap:16px; flex-wrap:wrap; margin-top:8px; }\n      .kpi { background:#1b1b1b; border:1px solid #2d2d2d; border-radius:12px; padding:10px 12px; min-width: 140px; }\n      canvas { width:100%; height:180px; }\n      a { color: var(--accent); text-decoration: none; }\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"row\">\n        <div class=\"title\" style=\"margin:0;\">🌤️ Weather Forecast</div>\n        <div style=\"flex:1\"></div>\n        <select id=\"city\">${options}</select>\n        <button id=\"refresh\">Refresh</button>\n      </div>\n\n      <div id=\"now\" class=\"card\">\n        <div class=\"row\">\n          <div class=\"title\" style=\"margin:0;\">Current Weather</div>\n          <div style=\"margin-left:auto\"><span id=\"updateAt\" class=\"muted\"></span></div>\n        </div>\n        <div class=\"row\" style=\"align-items:flex-end;\">\n          <div class=\"big\" id=\"nowTemp\">--°</div>\n          <div id=\"nowText\" style=\"margin-left:6px;\">--</div>\n        </div>\n        <div class=\"kpis\">\n          <div class=\"kpi\">💨 Wind <b id=\"nowWind\">-- m/s</b></div>\n          <div class=\"kpi\">🌧️ Daily Rain <b id=\"dayRain\">-- mm</b></div>\n          <div class=\"kpi\">🔺 High <b id=\"dayMax\">--°</b></div>\n          <div class=\"kpi\">🔻 Low <b id=\"dayMin\">--°</b></div>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"title\">Next 24h (Hourly)</div>\n        <canvas id=\"hourlyChart\" width=\"1200\" height=\"220\"></canvas>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"title\">Next 5 Days</div>\n        <div id=\"days\" class=\"grid\"></div>\n      </div>\n\n      <p class=\"muted\" style=\"margin-top:14px;\">Data: <a href=\"https://open-meteo.com/\" target=\"_blank\" rel=\"noreferrer\">Open-Meteo</a></p>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      // --- helpers & constants ---\n      const CITIES = ${JSON.stringify(cities)};\n      const $ = (id) => document.getElementById(id);\n      const fmtTime = (d) => new Date(d).toLocaleString();\n      const WMO = {\n        0:'Clear',1:'Mostly clear',2:'Partly cloudy',3:'Cloudy',45:'Fog',48:'Rime fog',\n        51:'Light drizzle',53:'Drizzle',55:'Heavy drizzle',56:'Freezing drizzle',57:'Freezing drizzle',\n        61:'Light rain',63:'Rain',65:'Heavy rain',66:'Freezing rain',67:'Freezing rain',\n        71:'Light snow',73:'Snow',75:'Heavy snow',77:'Snow grains',\n        80:'Showers (light)',81:'Showers (moderate)',82:'Showers (heavy)',\n        85:'Snow showers (light)',86:'Snow showers (heavy)',\n        95:'Thunderstorm',96:'Thunderstorm w/ hail',99:'Severe thunderstorm w/ hail'\n      };\n      const ICON = (code) => {\n        if ([0].includes(code)) return '☀️';\n        if ([1,2].includes(code)) return '⛅';\n        if ([3].includes(code)) return '☁️';\n        if ([45,48].includes(code)) return '🌫️';\n        if ([51,53,55,56,57,61,63,65,66,67,80,81,82].includes(code)) return '🌧️';\n        if ([71,73,75,77,85,86].includes(code)) return '❄️';\n        if ([95,96,99].includes(code)) return '⛈️';\n        return '🌡️';\n      };\n\n      // simple canvas line chart (no external deps)\n      function drawLine(canvas, values, labels){\n        const ctx = canvas.getContext('2d');\n        const W = canvas.width, H = canvas.height;\n        ctx.clearRect(0,0,W,H);\n        if (!values || !values.length) return;\n\n        const min = Math.min(...values), max = Math.max(...values);\n        const padL=44, padR=12, padT=18, padB=28;\n        const X = (i)=> padL + (W - padL - padR) * (i/(values.length-1));\n        const Y = (v)=> padT + (H - padT - padB) * (1 - (v - min) / Math.max(0.0001, (max - min)));\n\n        // axes & grid\n        ctx.globalAlpha=0.5; ctx.strokeStyle = '#444'; ctx.beginPath();\n        ctx.moveTo(padL, padT); ctx.lineTo(padL, H - padB); ctx.lineTo(W - padR, H - padB); ctx.stroke();\n        ctx.globalAlpha=1;\n\n        // y labels & gridlines\n        ctx.fillStyle = '#a7a7a7'; ctx.font='12px system-ui';\n        [min, (min+max)/2, max].forEach((v) => {\n          const y = Y(v);\n          ctx.fillText(v.toFixed(1)+'°', 6, y+4);\n          ctx.globalAlpha=0.15; ctx.strokeStyle='#888'; ctx.beginPath();\n          ctx.moveTo(padL, y); ctx.lineTo(W-padR, y); ctx.stroke(); ctx.globalAlpha=1;\n        });\n\n        // line\n        ctx.beginPath(); ctx.lineWidth=2; ctx.strokeStyle='#5da5ff';\n        values.forEach((v,i)=>{ const x=X(i), y=Y(v); if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); });\n        ctx.stroke();\n\n        // points\n        ctx.fillStyle='#5da5ff';\n        values.forEach((v,i)=>{ const x=X(i), y=Y(v); ctx.beginPath(); ctx.arc(x,y,2.5,0,Math.PI*2); ctx.fill(); });\n\n        // x labels every 3 hours\n        ctx.fillStyle='#a7a7a7'; ctx.textAlign='center';\n        labels.forEach((t,i)=>{ if(i%3===0){ const x=X(i); ctx.fillText(t, x, H-6); } });\n        ctx.textAlign='left';\n      }\n\n      async function fetchWeather(lat, lon, tz){\n        const url = new URL('https://api.open-meteo.com/v1/forecast');\n        url.searchParams.set('latitude', lat);\n        url.searchParams.set('longitude', lon);\n        url.searchParams.set('timezone', tz || 'auto');\n        url.searchParams.set('current_weather', 'true');\n        url.searchParams.set('hourly', 'temperature_2m');\n        url.searchParams.set('daily', 'weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum');\n        url.searchParams.set('forecast_days', '5');\n        url.searchParams.set('past_days', '1'); // include recent past hours to ensure coverage near \"now\"\n        const res = await fetch(url.toString(), { cache:'no-store' });\n        if (!res.ok) throw new Error('Network error: ' + res.status);\n        return res.json();\n      }\n\n      const citySel = $('city'), refreshBtn=$('refresh');\n      const nowTemp=$('nowTemp'), nowText=$('nowText'), nowWind=$('nowWind'), dayRain=$('dayRain'), dayMax=$('dayMax'), dayMin=$('dayMin'), updAt=$('updateAt');\n      const hourlyChart=$('hourlyChart'), daysWrap=$('days');\n\n      async function refresh(){\n        try{\n          const c=CITIES[Number(citySel.value)||0];\n          const d=await fetchWeather(c.lat,c.lon,c.tz);\n          const cw=d.current_weather||{};\n          nowTemp.textContent=(cw.temperature!=null ? cw.temperature.toFixed(1) : '--')+'°';\n          nowText.textContent=ICON(cw.weathercode)+' '+(WMO[cw.weathercode]||'--');\n          nowWind.textContent=(cw.windspeed!=null ? cw.windspeed : '--')+' m/s';\n          updAt.textContent='Updated '+fmtTime(new Date());\n\n          if(d.daily){\n            dayMax.textContent=(d.daily.temperature_2m_max?.[0]??'--')+'°';\n            dayMin.textContent=(d.daily.temperature_2m_min?.[0]??'--')+'°';\n            dayRain.textContent=((d.daily.precipitation_sum?.[0]??0))+' mm';\n          }\n\n          // ---- hourly: pick the closest hour to \"now\" instead of exact indexOf match ----\n          const times = d.hourly?.time || [];\n          const tempsAll = d.hourly?.temperature_2m || [];\n          const nowISO = cw.time || new Date().toISOString();\n          const nowMs = new Date(nowISO).getTime();\n          let start = 0, best = Infinity;\n          for (let i = 0; i < times.length; i++) {\n            const diff = Math.abs(new Date(times[i]).getTime() - nowMs);\n            if (diff < best) { best = diff; start = i; }\n          }\n          const end = Math.min(times.length, start + 24);\n          const temps = tempsAll.slice(start, end);\n          const labels = times.slice(start, end).map(t => {\n            const h = new Date(t).getHours().toString().padStart(2,'0');\n            return \\`\\${h}:00\\`;\n          });\n          drawLine(hourlyChart, temps, labels);\n\n          // ---- 5-day summary ----\n          const days = [];\n          const D = d.daily || {};\n          const n = Math.min(5, (D.time||[]).length);\n          for (let i=0;i<n;i++){\n            days.push({\n              date: D.time[i],\n              icon: ICON(D.weathercode?.[i]),\n              text: WMO[D.weathercode?.[i]] || '—',\n              max: D.temperature_2m_max?.[i],\n              min: D.temperature_2m_min?.[i],\n              rain: D.precipitation_sum?.[i] ?? 0\n            });\n          }\n          daysWrap.innerHTML = days.map(x => {\n            const dd = new Date(x.date);\n            const md = (dd.getMonth()+1) + '/' + dd.getDate();\n            return \\`\n              <div class=\"day\">\n                <div class=\"muted\">\\${md}</div>\n                <div style=\"font-size:24px\">\\${x.icon}</div>\n                <div style=\"margin:2px 0;\">\\${x.text}</div>\n                <div>H: \\${x.max?.toFixed?.(1)??'--'}°</div>\n                <div>L: \\${x.min?.toFixed?.(1)??'--'}°</div>\n                <div>Rain: \\${x.rain?.toFixed?.(1)??'--'} mm</div>\n              </div>\\`;\n          }).join('');\n        }catch(err){\n          console.error(err);\n          vscode?.postMessage?.({ type:'error', message:String(err) });\n          updAt.textContent = 'Update failed: ' + String(err).slice(0,80);\n        }\n      }\n\n      citySel.onchange = refresh;\n      refreshBtn.onclick = refresh;\n      refresh();\n    </script>\n  </body>\n  </html>`;\n}\n",
    "tags": [
      "default",
      "tool"
    ]
  },
  {
    "text": "$(game) Snake",
    "tooltip": "Click to play Snake",
    "command": "cmd.2k9yg2blib",
    "script": "// Snake — Webview Game (English UI, for status-bar-helper)\n// Features: Walls Kill/Wrap toggle (persistent), Pause/Resume, Restart, Speed, High Score\n// Canvas 400x400, grid 25x25 (smaller cells)\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhSnake',\n    '🐍 Snake — Game',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n\n  vm.onStop(() => { try { panel.dispose(); } catch {} });\n  panel.onDidDispose(() => vm.stop());\n\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Snake</title>\n    <style>\n      :root {\n        --bg:#0f1115; --card:#161a22; --line:#222838; --fg:#e6e6e6; --muted:#9aa2b1;\n        --accent:#7bd88f; --danger:#ff6b6b; --btn:#1d2330; --btnBorder:#2a3247;\n      }\n      html,body{height:100%}\n      body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:760px;margin:0 auto;padding:16px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px;box-shadow:0 10px 24px rgba(0,0,0,.25)}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:10px 12px;min-width:100px}\n      .btn{background:var(--btn);border:1px solid var(--btnBorder);border-radius:10px;padding:8px 12px;cursor:pointer;color:var(--fg)}\n      .btn:hover{filter:brightness(1.1)}\n      .btn-danger{background:#2a1212;border-color:#502222;color:#ffbbbb}\n      .row{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .muted{color:var(--muted)}\n      canvas{width:100%;height:auto;display:block;background:#000;border-radius:12px}\n      input[type=range]{accent-color:var(--accent)}\n      .legend{font-size:12px;color:var(--muted)}\n      .title{font-size:18px;font-weight:700}\n      .frame{padding:10px;border-radius:14px;border:1px solid #2b3144;background:#0e1219}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div class=\"title\">🐍 Snake — Game</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnWalls\" class=\"btn\">🧱 Walls: Kill</button>\n        <button id=\"btnPause\" class=\"btn\">⏸️ Pause</button>\n        <button id=\"btnRestart\" class=\"btn btn-danger\">🔄 Restart</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">Score: <b id=\"score\">0</b></div>\n          <div class=\"kpi\">High Score: <b id=\"best\">0</b></div>\n          <div class=\"kpi\">Speed: <b id=\"speedLabel\">120ms</b></div>\n          <input id=\"speed\" type=\"range\" min=\"60\" max=\"220\" step=\"10\" value=\"120\">\n        </div>\n      </div>\n\n      <div class=\"card frame\">\n        <canvas id=\"game\" width=\"600\" height=\"500\"></canvas>\n        <div class=\"legend\" style=\"margin-top:8px\">\n          Controls: Arrow keys / WASD · P = Pause/Resume · R = Restart · Walls: Kill/Wrap (toggle above)\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      // ====== Config & Elements ======\n      const $ = (id)=>document.getElementById(id);\n      const cvs = $('game'), ctx = cvs.getContext('2d');\n      const scoreEl=$('score'), bestEl=$('best');\n      const btnWalls=$('btnWalls'), btnPause=$('btnPause'), btnRestart=$('btnRestart');\n      const speedRange=$('speed'), speedLabel=$('speedLabel');\n\n      const GRID = 30;                       // grid size (NxN)\n      const CELL = Math.floor(cvs.width/GRID); // pixels per cell, derived from canvas size\n      const BEST_LS_KEY = 'sbh_snake_best';\n      const WALL_LS_KEY = 'sbh_snake_wall_mode'; // 'kill' | 'wrap'\n\n      // ====== State ======\n      let snake, dir, nextDir, food, score, best, timer, tickMs, paused, dead;\n      let wallMode; // 'kill' or 'wrap'\n\n      function loadWallMode(){ const v = localStorage.getItem(WALL_LS_KEY); return v==='wrap'?'wrap':'kill'; }\n      function saveWallMode(v){ localStorage.setItem(WALL_LS_KEY, v); }\n      function updateWallBtn(){ btnWalls.textContent = (wallMode==='kill') ? '🧱 Walls: Kill' : '🌀 Walls: Wrap'; }\n\n      function init(){\n        snake = [\n          {x: Math.floor(GRID/2),   y: Math.floor(GRID/2)},\n          {x: Math.floor(GRID/2)-1, y: Math.floor(GRID/2)},\n          {x: Math.floor(GRID/2)-2, y: Math.floor(GRID/2)},\n        ];\n        dir='RIGHT'; nextDir='RIGHT';\n        score=0; paused=false; dead=false;\n        spawnFood();\n        updateScore();\n        tickMs = Number(speedRange.value);\n        wallMode = loadWallMode();\n        updateWallBtn();\n        loopStart();\n      }\n\n      function loopStart(){ clearInterval(timer); timer=setInterval(tick, tickMs); }\n      function loopPause(p=true){\n        paused=p;\n        if (paused){ clearInterval(timer); btnPause.textContent='▶️ Resume'; }\n        else { loopStart(); btnPause.textContent='⏸️ Pause'; }\n      }\n\n      function updateScore(){\n        scoreEl.textContent = String(score);\n        best = Math.max(Number(localStorage.getItem(BEST_LS_KEY)||0), score);\n        localStorage.setItem(BEST_LS_KEY, best);\n        bestEl.textContent = String(best);\n      }\n\n      function spawnFood(){\n        while(true){\n          const fx = Math.floor(Math.random()*GRID);\n          const fy = Math.floor(Math.random()*GRID);\n          if (!snake.some(s=>s.x===fx && s.y===fy)){ food={x:fx,y:fy}; break; }\n        }\n      }\n\n      // ====== Input ======\n      const dirMap = {\n        'ArrowLeft':'LEFT','ArrowUp':'UP','ArrowRight':'RIGHT','ArrowDown':'DOWN',\n        'a':'LEFT','w':'UP','d':'RIGHT','s':'DOWN','A':'LEFT','W':'UP','D':'RIGHT','S':'DOWN'\n      };\n      window.addEventListener('keydown', e=>{\n        if (e.key==='p'||e.key==='P'){ loopPause(!paused); return; }\n        if (e.key==='r'||e.key==='R'){ restart(); return; }\n        const nd = dirMap[e.key];\n        if (!nd) return;\n        if ((dir==='LEFT' && nd==='RIGHT')||(dir==='RIGHT'&&nd==='LEFT')||\n            (dir==='UP'&&nd==='DOWN')||(dir==='DOWN'&&nd==='UP')) return;\n        nextDir = nd;\n      });\n      window.addEventListener('blur', ()=>{ if(!dead) loopPause(true); });\n      window.addEventListener('focus', ()=>{ if(!dead) loopPause(false); });\n\n      // ====== Game Loop ======\n      function tick(){\n        if (paused || dead) return;\n\n        dir = nextDir;\n        const head = {...snake[0]};\n        if (dir==='LEFT') head.x--;\n        else if (dir==='RIGHT') head.x++;\n        else if (dir==='UP') head.y--;\n        else if (dir==='DOWN') head.y++;\n\n        // Walls: Kill or Wrap\n        if (wallMode === 'kill') {\n          if (head.x<0 || head.y<0 || head.x>=GRID || head.y>=GRID){ return gameOver(); }\n        } else {\n          head.x = (head.x + GRID) % GRID;\n          head.y = (head.y + GRID) % GRID;\n        }\n\n        // Self-collision\n        if (snake.some(s=>s.x===head.x && s.y===head.y)){ return gameOver(); }\n\n        // Eat\n        const ate = (head.x===food.x && head.y===food.y);\n        snake.unshift(head);\n        if (ate){ score++; updateScore(); spawnFood(); } else { snake.pop(); }\n\n        draw();\n      }\n\n      // ====== Drawing ======\n      function draw(){\n        ctx.fillStyle='#000'; ctx.fillRect(0,0,cvs.width,cvs.height);\n        for (let y=0;y<GRID;y++){\n          for (let x=0;x<GRID;x++){\n            ctx.fillStyle = ((x+y)%2===0)?'#0a0a0a':'#0c0c0c';\n            ctx.fillRect(x*CELL, y*CELL, CELL, CELL);\n          }\n        }\n        // food\n        ctx.fillStyle='#ff5252'; roundRect(xpx(food.x), ypx(food.y), CELL, CELL, 4);\n        // snake\n        for (let i=0;i<snake.length;i++){\n          const s=snake[i];\n          ctx.fillStyle = (i===0)?'#7bd88f':'#57c274';\n          roundRect(xpx(s.x), ypx(s.y), CELL, CELL, i===0?6:4);\n        }\n      }\n\n      function xpx(gx){ return gx*CELL; }\n      function ypx(gy){ return gy*CELL; }\n      function roundRect(x,y,w,h,r){\n        ctx.beginPath();\n        ctx.moveTo(x+r,y);\n        ctx.arcTo(x+w,y,x+w,y+h,r);\n        ctx.arcTo(x+w,y+h,x,y+h,r);\n        ctx.arcTo(x,y+h,x,y,r);\n        ctx.arcTo(x,y,x+w,y,r);\n        ctx.closePath();\n        ctx.fill();\n      }\n\n      function gameOver(){\n        dead = true; clearInterval(timer);\n        ctx.fillStyle='rgba(0,0,0,.55)'; ctx.fillRect(0,0,cvs.width,cvs.height);\n        ctx.fillStyle='#fff'; ctx.textAlign='center';\n        ctx.font='bold 28px system-ui'; ctx.fillText('Game Over', cvs.width/2, cvs.height/2 - 10);\n        ctx.font='16px system-ui'; ctx.fillText('Press R to Restart', cvs.width/2, cvs.height/2 + 18);\n        return true;\n      }\n\n      function restart(){ clearInterval(timer); init(); draw(); }\n\n      // ====== UI Events ======\n      btnPause.addEventListener('click', ()=> loopPause(!paused));\n      btnRestart.addEventListener('click', restart);\n      btnWalls.addEventListener('click', ()=>{\n        wallMode = (wallMode==='kill') ? 'wrap' : 'kill';\n        saveWallMode(wallMode);\n        updateWallBtn();\n      });\n\n      speedRange.addEventListener('input', ()=>{\n        tickMs = Number(speedRange.value);\n        speedLabel.textContent = tickMs + 'ms';\n        if (!paused && !dead) loopStart();\n      });\n\n      // init\n      speedLabel.textContent = speedRange.value + 'ms';\n      bestEl.textContent = String(localStorage.getItem(BEST_LS_KEY)||0);\n      init();\n      draw();\n    </script>\n  </body>\n  </html>`;\n}\n",
    "enableOnInit": false,
    "hidden": true,
    "tags": [
      "game"
    ]
  },
  {
    "text": "$(game) Tetris",
    "tooltip": "Click to start playing Tetris",
    "command": "cmd.altyz8fux1",
    "script": "// Tetris — Webview Game (centered board + lock delay so you can rotate on landing)\n// Controls: ← → move · ↑/X rotate CW · Z rotate CCW · ↓ (hold) soft drop · Space hard drop · C/Shift Hold · P pause · R restart\n// Canvas 240x480 (10x20, 24px cell). Start Level adjustable. Gravity base 700ms (−60ms/level, min 80). Soft drop 60ms.\n// NEW: Lock Delay 500ms → when piece touches the ground, you can still rotate/move before it locks.\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhTetris',\n    '🧱 Tetris — Game',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n  vm.onStop(() => { try { panel.dispose(); } catch {} });\n  panel.onDidDispose(() => vm.stop());\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Tetris</title>\n    <style>\n      :root{--bg:#0f1115;--fg:#e6e6e6;--muted:#9aa2b1;--card:#161a22;--line:#222838;--btn:#1d2330;--btnb:#2a3247;--accent:#7bd88f}\n      html,body{height:100%}\n      body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:860px;margin:0 auto;padding:14px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .btn{background:var(--btn);border:1px solid var(--btnb);border-radius:10px;padding:8px 12px;color:var(--fg);cursor:pointer}\n      .btn:hover{filter:brightness(1.1)}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:8px 12px;min-width:120px}\n      .title{font-weight:700}\n      .legend{font-size:12px;color:var(--muted)}\n      canvas{display:block;background:#000;border-radius:8px}\n      /* 遊戲區塊置中 */\n      .board{display:flex;gap:12px;align-items:flex-start;flex-wrap:wrap;justify-content:center}\n      .side{display:flex;flex-direction:column;gap:10px}\n      .panel{background:#0e1219;border:1px solid #2b3144;border-radius:12px;padding:8px}\n      .grid{display:grid;grid-template-columns:repeat(2,auto);gap:10px;align-items:center}\n      input[type=range]{accent-color:var(--accent)}\n      .num{min-width:42px;display:inline-block;text-align:right}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div class=\"title\">🧱 Tetris — Game</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnPause\" class=\"btn\">⏸️ Pause</button>\n        <button id=\"btnRestart\" class=\"btn\">🔄 Restart</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">Score: <b id=\"score\">0</b></div>\n          <div class=\"kpi\">Lines: <b id=\"lines\">0</b></div>\n          <div class=\"kpi\">Level: <b id=\"level\">1</b></div>\n          <div class=\"kpi\">High Score: <b id=\"best\">0</b></div>\n        </div>\n        <div class=\"legend\" style=\"margin-top:6px\">\n          Controls: ← → move · ↑/X rotate CW · Z rotate CCW · ↓ (hold) soft drop · Space hard drop · C/Shift Hold · P pause · R restart\n        </div>\n      </div>\n\n      <!-- Settings：只保留 Start Level -->\n      <div class=\"card\">\n        <div class=\"title\" style=\"margin-bottom:8px\">Settings</div>\n        <div class=\"grid\">\n          <div>Start Level</div>\n          <div style=\"display:flex;align-items:center;gap:8px\">\n            <input id=\"startLevel\" type=\"range\" min=\"1\" max=\"20\" step=\"1\" value=\"1\">\n            <span id=\"startLevelLabel\" class=\"num\">1</span>\n          </div>\n        </div>\n        <div style=\"margin-top:10px;display:flex;gap:10px;align-items:center\">\n          <button id=\"btnApply\" class=\"btn\">✅ Apply & Restart</button>\n          <span class=\"legend\">Gravity speeds up by 60ms per level (min 80ms).</span>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"board\">\n          <!-- 小畫面：240x480 / 10x20 / 24px cell -->\n          <canvas id=\"game\" width=\"240\" height=\"480\"></canvas>\n          <div class=\"side\">\n            <div class=\"panel\">\n              <div class=\"title\">Hold</div>\n              <canvas id=\"hold\" width=\"96\" height=\"96\" style=\"margin-top:6px\"></canvas>\n            </div>\n            <div class=\"panel\">\n              <div class=\"title\">Next</div>\n              <canvas id=\"next\" width=\"96\" height=\"240\" style=\"margin-top:6px\"></canvas>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      // ====== Elements / Persistent Setting ======\n      const $ = id => document.getElementById(id);\n      const gc = $('game').getContext('2d');\n      const hc = $('hold').getContext('2d');\n      const nc = $('next').getContext('2d');\n\n      const scoreEl=$('score'), linesEl=$('lines'), levelEl=$('level'), bestEl=$('best');\n      const btnPause=$('btnPause'), btnRestart=$('btnRestart');\n      const startLevelInput=$('startLevel'), startLevelLabel=$('startLevelLabel');\n      const btnApply=$('btnApply');\n\n      const SETTINGS_KEY = 'sbh_tetris_settings_v3';\n      function loadSettings(){\n        try{\n          const v = JSON.parse(localStorage.getItem(SETTINGS_KEY)||'{}');\n          return { startLevel: Number.isFinite(v.startLevel)? v.startLevel : 1 };\n        }catch{ return { startLevel:1 }; }\n      }\n      function saveSettings(s){ localStorage.setItem(SETTINGS_KEY, JSON.stringify(s)); }\n\n      const S = loadSettings();\n      startLevelInput.value = String(S.startLevel);\n      startLevelLabel.textContent = S.startLevel;\n\n      // 固定參數\n      const BASE_MS  = 700; // 基礎重力（ms/格）\n      const SOFT_MS  = 60;  // 按住↓ 的連續 soft drop 間隔（ms/格）\n      const MIN_MS   = 80;  // 最快重力\n      const LOCK_DELAY_MS = 500; // ★ 落地後的「延遲鎖定」時間，可在這裡調整\n\n      // ====== Game Constants ======\n      const W = 10, H = 20, CELL = 24;\n      const BEST_KEY = 'sbh_tetris_high';\n      const COLORS = {\n        I:'#00f0f0', O:'#f0f000', T:'#a020f0', S:'#00d000', Z:'#d00000', J:'#0000d0', L:'#f0a000', GHOST:'rgba(255,255,255,0.15)'\n      };\n      const ROT = {\n        I: [\n          [[0,1],[1,1],[2,1],[3,1]],\n          [[2,0],[2,1],[2,2],[2,3]],\n          [[0,2],[1,2],[2,2],[3,2]],\n          [[1,0],[1,1],[1,2],[1,3]],\n        ],\n        O: [[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]]],\n        T: [\n          [[1,0],[0,1],[1,1],[2,1]],\n          [[1,0],[1,1],[2,1],[1,2]],\n          [[0,1],[1,1],[2,1],[1,2]],\n          [[1,0],[0,1],[1,1],[1,2]],\n        ],\n        S: [\n          [[1,0],[2,0],[0,1],[1,1]],\n          [[1,0],[1,1],[2,1],[2,2]],\n          [[1,1],[2,1],[0,2],[1,2]],\n          [[0,0],[0,1],[1,1],[1,2]],\n        ],\n        Z: [\n          [[0,0],[1,0],[1,1],[2,1]],\n          [[2,0],[1,1],[2,1],[1,2]],\n          [[0,1],[1,1],[1,2],[2,2]],\n          [[1,0],[0,1],[1,1],[0,2]],\n        ],\n        J: [\n          [[0,0],[0,1],[1,1],[2,1]],\n          [[1,0],[2,0],[1,1],[1,2]],\n          [[0,1],[1,1],[2,1],[2,2]],\n          [[1,0],[1,1],[0,2],[1,2]],\n        ],\n        L: [\n          [[2,0],[0,1],[1,1],[2,1]],\n          [[1,0],[1,1],[1,2],[2,2]],\n          [[0,1],[1,1],[2,1],[0,2]],\n          [[0,0],[1,0],[1,1],[1,2]],\n        ]\n      };\n      const TYPES = Object.keys(ROT);\n\n      // ====== Game State ======\n      let board, queue, cur, hold=null, canHold=true;\n      let score=0, lines=0, level=S.startLevel, best=Number(localStorage.getItem(BEST_KEY)||0);\n      let paused=false, over=false, timer=null;\n\n      // Soft drop\n      let softHeld=false, softTimer=null;\n\n      // ★ Lock Delay 狀態\n      let grounded=false;      // 是否已經「接地」（下一格下不去）\n      let lockExpire=0;        // 何時到期鎖定（time ms）\n\n      bestEl.textContent = String(best);\n\n      // ====== Helpers ======\n      function emptyBoard(){ return Array.from({length:H},()=>Array(W).fill(null)); }\n      function newBag(){ const a=[...TYPES]; for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]] } return a; }\n      function ensureQueue(){ if(queue.length<7) queue.push(...newBag()); }\n      function spawn(){\n        const type = queue.shift(); ensureQueue();\n        cur = { type, r:0, x:3, y:0 };\n        grounded=false; lockExpire=0;\n        if (!canPlace(cur, cur.x, cur.y)){ gameOver(); }\n        canHold = true;\n      }\n      function cells(p){ return ROT[p.type][p.r]; }\n      function canPlace(p, nx, ny, nr=p.r){\n        const shape = ROT[p.type][nr];\n        for(const [dx,dy] of shape){\n          const x = nx+dx, y = ny+dy;\n          if (x<0 || x>=W || y<0 || y>=H) return false;\n          if (board[y][x]) return false;\n        }\n        return true;\n      }\n      function startLockDelay(){ grounded=true; lockExpire = Date.now() + LOCK_DELAY_MS; }\n      function clearLock(){ grounded=false; lockExpire=0; }\n\n      function lock(){\n        for(const [dx,dy] of cells(cur)){\n          const x=cur.x+dx, y=cur.y+dy;\n          if (y>=0 && y<H) board[y][x] = cur.type;\n        }\n        grounded=false; lockExpire=0;\n        clearLines(); spawn();\n      }\n      function clearLines(){\n        let cleared=0;\n        for(let y=H-1;y>=0;){\n          if (board[y].every(Boolean)){ board.splice(y,1); board.unshift(Array(W).fill(null)); cleared++; }\n          else y--;\n        }\n        if (cleared>0){\n          score += [0,100,300,500,800][cleared] * level;\n          lines += cleared;\n          const newLevel = Math.max(1, S.startLevel + Math.floor(lines/10));\n          if (newLevel!==level){ level=newLevel; restartGravity(); }\n          updateHUD();\n        }\n      }\n      function holdSwap(){\n        if (!canHold || over) return;\n        if (hold===null){ hold=cur.type; spawn(); }\n        else { const t=hold; hold=cur.type; cur={type:t, r:0, x:3, y:0}; if(!canPlace(cur,cur.x,cur.y)){ gameOver(); return; } }\n        canHold=false; drawSide();\n      }\n\n      // 成功移動/旋轉後，更新接地狀態：如果仍接地就重置 lock delay\n      function refreshLockAfterAction(){\n        if (canPlace(cur, cur.x, cur.y+1)) {\n          clearLock();\n        } else {\n          startLockDelay(); // still grounded → reset timer\n        }\n      }\n\n      function rotate(dir){ // +1 CW / -1 CCW\n        if (over) return;\n        const nr = (cur.r + (dir>0?1:3)) % 4;\n        const kicks = [[0,0],[1,0],[-1,0],[0,-1],[2,0],[-2,0]];\n        for (const [kx,ky] of kicks){\n          const nx = cur.x+kx, ny=cur.y+ky;\n          if (canPlace(cur,nx,ny,nr)){ cur.r=nr; cur.x=nx; cur.y=ny; refreshLockAfterAction(); draw(); return; }\n        }\n      }\n\n      function move(dx){\n        if (over) return;\n        const nx = cur.x + dx;\n        if (canPlace(cur, nx, cur.y)){ cur.x = nx; refreshLockAfterAction(); draw(); }\n      }\n\n      function softDropStep(){\n        if (paused || over) return;\n        if (canPlace(cur, cur.x, cur.y+1)){\n          cur.y++; score += 1; updateHUD(false);\n          clearLock(); // 一旦往下成功，取消接地狀態\n          draw();\n        } else {\n          if (!grounded) { startLockDelay(); }\n          // 已接地：等到時間到才 lock\n          if (Date.now() >= lockExpire){ lock(); }\n          draw();\n        }\n      }\n\n      function hardDrop(){\n        if (over) return;\n        let dist=0; while (canPlace(cur,cur.x,cur.y+1)){ cur.y++; dist++; }\n        score += dist*2; updateHUD(false);\n        lock(); draw(); // Hard drop 立即鎖定\n      }\n\n      // ====== Gravity ======\n      function gravityMs(lv){\n        return Math.max(MIN_MS, BASE_MS - (lv-1)*60);\n      }\n      function restartGravity(){\n        clearInterval(timer);\n        timer = setInterval(()=>{\n          if (paused || over) return;\n          if (canPlace(cur, cur.x, cur.y+1)){\n            cur.y++;\n            clearLock();\n          } else {\n            if (!grounded) { startLockDelay(); }\n            else if (Date.now() >= lockExpire) { lock(); }\n          }\n          draw();\n        }, gravityMs(level));\n      }\n\n      // ====== Drawing ======\n      function drawCell(ctx,x,y,color){\n        ctx.fillStyle=color;\n        ctx.fillRect(x*CELL, y*CELL, CELL, CELL);\n        ctx.fillStyle='rgba(255,255,255,0.07)';\n        ctx.fillRect(x*CELL, y*CELL, CELL, Math.max(2, CELL*0.18));\n      }\n      function ghostY(){ let gy=cur.y; while (canPlace(cur,cur.x,gy+1)) gy++; return gy; }\n      function draw(){\n        const c = gc.canvas; gc.clearRect(0,0,c.width,c.height);\n        for(let y=0;y<H;y++){ for(let x=0;x<W;x++){ gc.fillStyle=((x+y)%2===0)?'#0a0a0a':'#0c0c0c'; gc.fillRect(x*CELL,y*CELL,CELL,CELL); } }\n        for(let y=0;y<H;y++){ for(let x=0;x<W;x++){ const t=board[y][x]; if(t) drawCell(gc,x,y,COLORS[t]); } }\n        const gy = ghostY();\n        for(const [dx,dy] of cells(cur)){ const x=cur.x+dx,y=gy+dy; gc.fillStyle=COLORS.GHOST; gc.fillRect(x*CELL,y*CELL,CELL,CELL); }\n        for(const [dx,dy] of cells(cur)){ const x=cur.x+dx,y=cur.y+dy; drawCell(gc,x,y,COLORS[cur.type]); }\n\n        // 如果接地中，可在底部畫一圈淡邊提示（可選）\n        // if (grounded) { gc.strokeStyle='rgba(255,255,255,.15)'; gc.lineWidth=2; gc.strokeRect(0, (H-1)*CELL+1, W*CELL, CELL-2); }\n\n        drawSide();\n        if (over) drawGameOver();\n      }\n      function drawGameOver(){\n        const c = gc.canvas; gc.fillStyle='rgba(0,0,0,0.6)'; gc.fillRect(0,0,c.width,c.height);\n        gc.fillStyle='#fff'; gc.textAlign='center'; gc.font='bold 22px system-ui'; gc.fillText('Game Over', c.width/2, c.height/2 - 10);\n        gc.font='14px system-ui'; gc.fillText('Press R to Restart', c.width/2, c.height/2 + 16);\n      }\n      function drawMini(ctx,type,cell=16){\n        ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\n        if(!type) return;\n        const shape=ROT[type][0]; const ox=2, oy=2;\n        for(const [dx,dy] of shape){\n          ctx.fillStyle=COLORS[type]; ctx.fillRect((ox+dx)*cell,(oy+dy)*cell,cell,cell);\n          ctx.fillStyle='rgba(255,255,255,0.08)'; ctx.fillRect((ox+dx)*cell,(oy+dy)*cell,cell,Math.max(2,cell*0.18));\n        }\n      }\n      function drawSide(){\n        drawMini(hc, hold, 16);\n        nc.clearRect(0,0,nc.canvas.width,nc.canvas.height);\n        const show = queue.slice(0,5), cell=14;\n        show.forEach((t,i)=>{\n          const offY = i*46 + 4;\n          const shape = ROT[t][0];\n          for(const [dx,dy] of shape){\n            nc.fillStyle=COLORS[t];\n            nc.fillRect((2+dx)*cell, (1+dy)*cell + offY, cell, cell);\n            nc.fillStyle='rgba(255,255,255,0.08)';\n            nc.fillRect((2+dx)*cell, (1+dy)*cell + offY, cell, Math.max(2,cell*0.18));\n          }\n        });\n      }\n\n      // ====== HUD ======\n      function updateHUD(updateBest=true){\n        scoreEl.textContent = String(score);\n        linesEl.textContent = String(lines);\n        levelEl.textContent = String(level);\n        if (updateBest){\n          const b = Math.max(Number(localStorage.getItem(BEST_KEY)||0), score);\n          localStorage.setItem(BEST_KEY, b);\n          bestEl.textContent = String(b);\n        }\n      }\n      function gameOver(){ over=true; clearInterval(timer); stopSoftHeld(); updateHUD(); draw(); }\n\n      // ====== Reset / Init ======\n      function resetGame(){\n        board = emptyBoard();\n        queue = [...newBag(), ...newBag()];\n        cur=null; hold=null; canHold=true;\n        score=0; lines=0; level=S.startLevel; paused=false; over=false;\n        grounded=false; lockExpire=0;\n        updateHUD();\n        spawn();\n        restartGravity();\n        draw();\n      }\n\n      // ====== Input ======\n      function stopSoftHeld(){ softHeld=false; clearInterval(softTimer); softTimer=null; }\n      window.addEventListener('keydown', (e)=>{\n        if (e.key===' '){ e.preventDefault(); }\n        if (over){ if (e.key==='r'||e.key==='R'){ resetGame(); } return; }\n\n        if (e.key==='p'||e.key==='P'){ paused=!paused; btnPause.textContent = paused?'▶️ Resume':'⏸️ Pause'; return; }\n        if (paused) return;\n\n        if (e.key==='ArrowLeft'){ move(-1); }\n        else if (e.key==='ArrowRight'){ move(1); }\n        else if (e.key==='ArrowDown'){\n          if (!softHeld){ softHeld=true; softDropStep(); softTimer=setInterval(softDropStep, Math.max(10, SOFT_MS)); }\n        }\n        else if (e.key==='ArrowUp' || e.key==='x' || e.key==='X'){ rotate(+1); }\n        else if (e.key==='z' || e.key==='Z'){ rotate(-1); }\n        else if (e.key==='c' || e.key==='C' || e.key==='Shift'){ holdSwap(); }\n        else if (e.key===' '){ hardDrop(); }\n        else if (e.key==='r' || e.key==='R'){ resetGame(); }\n      });\n      window.addEventListener('keyup', (e)=>{ if (e.key==='ArrowDown'){ stopSoftHeld(); } });\n      window.addEventListener('blur', ()=>{ if(!over){ paused=true; btnPause.textContent='▶️ Resume'; stopSoftHeld(); } });\n\n      // Buttons\n      btnPause.addEventListener('click', ()=>{ if(over) return; paused=!paused; btnPause.textContent = paused?'▶️ Resume':'⏸️ Pause'; });\n      btnRestart.addEventListener('click', resetGame);\n\n      // Settings UI\n      startLevelInput.addEventListener('input', ()=> startLevelLabel.textContent = startLevelInput.value);\n      btnApply.addEventListener('click', ()=>{\n        S.startLevel = Number(startLevelInput.value);\n        saveSettings(S);\n        resetGame();\n      });\n\n      // Init\n      resetGame();\n    </script>\n  </body>\n  </html>`;\n}\n",
    "enableOnInit": false,
    "hidden": false,
    "tags": [
      "game"
    ]
  },
  {
    "command": "cmd.nl2uuab6fb",
    "text": "🧩 2048",
    "tooltip": "Click to start playing 2048",
    "hidden": true,
    "enableOnInit": false,
    "script": "// 2048 — English UI (for status-bar-helper / VSCode Webview)\n// Controls: Arrow Keys / WASD · U Undo · R Restart\n// Features: 4x4 board, score/best, one-step Undo, auto-focus, simple spawn/merge animations\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbh2048',\n    '🧩 2048 (EN)',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n  vm.onStop(() => { try { panel.dispose(); } catch {} });\n  panel.onDidDispose(() => vm.stop());\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>2048</title>\n    <style>\n      :root{\n        --bg:#0f1115; --fg:#e6e6e6; --muted:#9aa2b1; --card:#161a22; --line:#222838;\n        --accent:#7bd88f; --board:#111722; --cell:#0e1219; --gap:10px; --size:360px; --radius:12px;\n      }\n      html,body{height:100%} body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:860px;margin:0 auto;padding:14px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .btn{background:#1d2330;border:1px solid #2a3247;border-radius:10px;color:var(--fg);padding:8px 12px;cursor:pointer}\n      .btn:hover{filter:brightness(1.08)}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:8px 12px;min-width:120px}\n      .legend{font-size:12px;color:var(--muted)}\n      .boardWrap{display:flex;justify-content:center}\n      .board{position:relative;width:var(--size);height:var(--size);background:var(--board);border-radius:16px;padding:var(--gap);box-sizing:border-box}\n      .grid{position:absolute;left:var(--gap);top:var(--gap);right:var(--gap);bottom:var(--gap);display:grid;grid-template-columns:repeat(4,1fr);grid-template-rows:repeat(4,1fr);gap:var(--gap)}\n      .bgcell{background:var(--cell);border-radius:var(--radius)}\n      .tiles{position:absolute;left:var(--gap);top:var(--gap);right:var(--gap);bottom:var(--gap)}\n      .tile{\n        position:absolute; display:flex;align-items:center;justify-content:center;\n        font-weight:800; border-radius:var(--radius); user-select:none;\n        transition: transform 120ms ease, background 120ms ease, color 120ms ease;\n        will-change: transform;\n      }\n      .pop{animation:pop .12s ease}\n      @keyframes pop{0%{transform:scale(.6)}100%{transform:scale(1)}}\n      .bump{animation:bump .12s ease}\n      @keyframes bump{0%{transform:scale(1)}50%{transform:scale(1.08)}100%{transform:scale(1)}}\n\n      /* Tile colors */\n      .v2 {background:#2b364d;color:#e6eefc}\n      .v4 {background:#31405b;color:#eef4ff}\n      .v8 {background:#3a6eea;color:#fff}\n      .v16{background:#2aa3ef;color:#fff}\n      .v32{background:#22c6b8;color:#102a2a}\n      .v64{background:#7bd88f;color:#0e2414}\n      .v128{background:#ffd34d;color:#40320a}\n      .v256{background:#ffb14d;color:#3b2510}\n      .v512{background:#ff8a5c;color:#3a1710}\n      .v1024{background:#ff6b6b;color:#3a0f12}\n      .v2048{background:#b892ff;color:#1e123a}\n      .v4096,.v8192,.v16384{background:#64d7d6;color:#0c1e21}\n\n      /* For smaller canvas, change --size to 320px or 300px */\n      @media (max-width:480px){ :root{ --size:320px } }\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div style=\"font-weight:700\">🧩 2048</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnUndo\" class=\"btn\" title=\"Undo (U)\">↩️ Undo</button>\n        <button id=\"btnNew\" class=\"btn\" title=\"Restart (R)\">🔄 New Game</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">Score: <b id=\"score\">0</b></div>\n          <div class=\"kpi\">Best: <b id=\"best\">0</b></div>\n        </div>\n        <div class=\"legend\" style=\"margin-top:6px\">Use Arrow Keys / WASD to move. Press <b>U</b> to Undo, <b>R</b> to Restart.</div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"boardWrap\">\n          <div id=\"board\" class=\"board\" tabindex=\"0\" title=\"Use Arrow Keys / WASD to move\">\n            <div class=\"grid\" id=\"grid\"></div>\n            <div class=\"tiles\" id=\"tiles\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      const $ = id => document.getElementById(id);\n      const boardEl = $('board'), gridEl = $('grid'), tilesEl = $('tiles');\n      const scoreEl=$('score'), bestEl=$('best'), btnNew=$('btnNew'), btnUndo=$('btnUndo');\n\n      const N = 4;\n      const LS_KEY = 'sbh_2048_state_v1_en';\n      const BEST_KEY = 'sbh_2048_best_en';\n      const SIZE = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--size')) || 360;\n      const GAP = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--gap')) || 10;\n      const inner = SIZE - GAP*2;\n      const cell = Math.floor((inner - GAP*3)/4); // 4 cols => 3 gaps\n\n      // Build background grid\n      function buildBg(){\n        gridEl.innerHTML='';\n        for(let i=0;i<N*N;i++){\n          const c=document.createElement('div');\n          c.className='bgcell';\n          gridEl.appendChild(c);\n        }\n      }\n\n      // State\n      let grid, score=0, best=Number(localStorage.getItem(BEST_KEY)||0);\n      let prevState=null; // Undo snapshot: {grid, score}\n\n      // Utils\n      function cloneGrid(g){ return g.map(r=>r.slice()); }\n      function emptyGrid(){ return Array.from({length:N}, ()=>Array(N).fill(0)); }\n      function randChoice(a){ return a[(Math.random()*a.length)|0]; }\n\n      function saveState(){\n        localStorage.setItem(LS_KEY, JSON.stringify({ grid, score }));\n        localStorage.setItem(BEST_KEY, String(best));\n      }\n      function loadState(){\n        try{\n          const v = JSON.parse(localStorage.getItem(LS_KEY)||'null');\n          if (v && v.grid && Array.isArray(v.grid) && v.grid.length===4) {\n            grid = v.grid; score = v.score||0;\n          } else {\n            newGame(true);\n          }\n        }catch{\n          newGame(true);\n        }\n        best = Math.max(best, Number(localStorage.getItem(BEST_KEY)||0));\n      }\n\n      // Position helpers\n      function posToTransform(r,c){\n        const x = c*(cell+GAP);\n        const y = r*(cell+GAP);\n        return \\`translate(\\${x}px, \\${y}px)\\`;\n      }\n\n      // Spawn a new tile\n      function spawn(pop=true){\n        const empties=[];\n        for(let r=0;r<N;r++) for(let c=0;c<N;c++) if(grid[r][c]===0) empties.push([r,c]);\n        if (empties.length===0) return false;\n        const [r,c]=randChoice(empties);\n        grid[r][c] = Math.random()<0.9 ? 2 : 4;\n        draw(true, [{r,c,pop}]);\n        return true;\n      }\n\n      // Slide & merge\n      function slideRowLeft(row){\n        const a = row.filter(v=>v!==0);\n        let moved=false, gained=0, mergedIndex=new Set();\n        for(let i=0;i<a.length-1;i++){\n          if (a[i]!==0 && a[i]===a[i+1] && !mergedIndex.has(i)){\n            a[i]*=2; gained+=a[i]; a.splice(i+1,1); mergedIndex.add(i);\n            moved=true;\n          }\n        }\n        while(a.length<N) a.push(0);\n        for(let i=0;i<N;i++) if(a[i]!==row[i]) moved=true;\n        return {row:a, moved, gained};\n      }\n\n      function rotateGrid(g){ // clockwise\n        const r = emptyGrid();\n        for(let i=0;i<N;i++) for(let j=0;j<N;j++) r[j][N-1-i]=g[i][j];\n        return r;\n      }\n\n      function move(dir){ // 'left'|'right'|'up'|'down'\n        prevState = { grid: cloneGrid(grid), score };\n\n        let g = cloneGrid(grid);\n        let totalGained=0, movedAny=false;\n\n        function applyLeft(){\n          for(let r=0;r<N;r++){\n            const res = slideRowLeft(g[r]);\n            g[r]=res.row;\n            if (res.moved) movedAny=true;\n            totalGained+=res.gained;\n          }\n        }\n\n        if (dir==='left'){ applyLeft(); }\n        else if (dir==='right'){\n          g = g.map(row=>row.slice().reverse());\n          applyLeft();\n          g = g.map(row=>row.slice().reverse());\n        }\n        else if (dir==='up'){\n          g = rotateGrid(g); g = rotateGrid(g); g = rotateGrid(g); // CCW\n          applyLeft();\n          g = rotateGrid( rotateGrid( rotateGrid(g) ) ); // back CW\n        }\n        else if (dir==='down'){\n          g = rotateGrid(g); // CW\n          applyLeft();\n          g = rotateGrid( rotateGrid( rotateGrid(g) ) ); // back CCW\n        }\n\n        if (!movedAny){\n          prevState=null; // nothing changed → no undo snapshot\n          return false;\n        }\n\n        grid = g;\n        score += totalGained;\n        best = Math.max(best, score);\n        draw(totalGained>0, [], totalGained>0); // bump if merged\n        saveState();\n        setTimeout(()=>{\n          if (!spawn(true)) checkGameOver();\n          saveState();\n        }, 80);\n        return true;\n      }\n\n      function checkGameOver(){\n        for(let r=0;r<N;r++) for(let c=0;c<N;c++) if(grid[r][c]===0) return false;\n        for(let r=0;r<N;r++){\n          for(let c=0;c<N;c++){\n            const v=grid[r][c];\n            if (r+1<N && grid[r+1][c]===v) return false;\n            if (c+1<N && grid[r][c+1]===v) return false;\n          }\n        }\n        overlay('Game Over 😵');\n        return true;\n      }\n\n      // Rendering\n      function tileClass(v){\n        if (v<=2048) return 'v'+v;\n        if (v<=4096) return 'v4096';\n        if (v<=8192) return 'v8192';\n        return 'v16384';\n      }\n      function fontSizeFor(v){\n        const len=String(v).length;\n        if (len<=2) return Math.floor(cell*0.42)+'px';\n        if (len===3) return Math.floor(cell*0.36)+'px';\n        if (len===4) return Math.floor(cell*0.30)+'px';\n        return Math.floor(cell*0.26)+'px';\n      }\n\n      function draw(popNew=false, newTiles=[], bump=false){\n        tilesEl.innerHTML='';\n        for(let r=0;r<N;r++){\n          for(let c=0;c<N;c++){\n            const v=grid[r][c];\n            if (!v) continue;\n            const t=document.createElement('div');\n            t.className='tile '+tileClass(v);\n            t.style.width=cell+'px'; t.style.height=cell+'px';\n            t.style.transform=posToTransform(r,c);\n            t.style.fontSize=fontSizeFor(v);\n            t.textContent=String(v);\n            if (newTiles.some(p=>p.r===r && p.c===c)) t.classList.add('pop');\n            if (bump) t.classList.add('bump');\n            tilesEl.appendChild(t);\n          }\n        }\n        scoreEl.textContent = String(score);\n        bestEl.textContent  = String(best);\n      }\n\n      // Overlay\n      let overlayDiv=null;\n      function overlay(text){\n        if (overlayDiv){ overlayDiv.remove(); overlayDiv=null; }\n        overlayDiv=document.createElement('div');\n        overlayDiv.style.position='absolute';\n        overlayDiv.style.inset='0';\n        overlayDiv.style.background='rgba(0,0,0,.55)';\n        overlayDiv.style.borderRadius='16px';\n        overlayDiv.style.display='flex';\n        overlayDiv.style.alignItems='center';\n        overlayDiv.style.justifyContent='center';\n        overlayDiv.style.flexDirection='column';\n        overlayDiv.style.color='#fff';\n        overlayDiv.style.font='bold 22px system-ui';\n        overlayDiv.innerHTML = \\`<div>\\${text}</div><div style=\"font:14px system-ui;margin-top:8px\">Press <b>R</b> to restart</div>\\`;\n        boardEl.appendChild(overlayDiv);\n      }\n      function clearOverlay(){ if (overlayDiv){ overlayDiv.remove(); overlayDiv=null; } }\n\n      // Input\n      function handleKey(e){\n        const k = e.key;\n        if (['ArrowLeft','ArrowRight','ArrowUp','ArrowDown',' '].includes(k)) e.preventDefault();\n        if (k==='ArrowLeft' || k==='a' || k==='A') move('left');\n        else if (k==='ArrowRight' || k==='d' || k==='D') move('right');\n        else if (k==='ArrowUp' || k==='w' || k==='W') move('up');\n        else if (k==='ArrowDown' || k==='s' || k==='S') move('down');\n        else if (k==='u' || k==='U') undo();\n        else if (k==='r' || k==='R') newGame();\n      }\n      window.addEventListener('keydown', handleKey);\n      boardEl.addEventListener('click', ()=>boardEl.focus());\n      boardEl.addEventListener('mouseenter', ()=>boardEl.focus());\n\n      // Undo (one step)\n      function undo(){\n        if (!prevState) return;\n        grid = cloneGrid(prevState.grid);\n        score = prevState.score;\n        prevState = null;\n        clearOverlay();\n        draw();\n        saveState();\n      }\n\n      // New game\n      function newGame(first=false){\n        grid = emptyGrid();\n        score=0; prevState=null; clearOverlay();\n        spawn(false); spawn(false); // two tiles to start\n        draw();\n        if (!first) saveState();\n      }\n\n      // Init\n      buildBg();\n      loadState();\n      draw();\n      if (!grid || grid.flat().every(v=>v===0)){ newGame(); }\n      btnNew.addEventListener('click', newGame);\n      btnUndo.addEventListener('click', undo);\n      setTimeout(()=>boardEl.focus(), 0); // ensure key input\n    </script>\n  </body>\n  </html>`;\n}\n",
    "tags": [
      "game"
    ]
  },
  {
    "command": "cmd.jenw3mfotp",
    "text": "⚫️⚪️   Gomoku",
    "tooltip": "Click to start playing Gomoku",
    "hidden": true,
    "enableOnInit": false,
    "script": "// Gomoku (PvE only) — English UI, AI levels 1..6\n// For: status-bar-helper (VSCode Webview)\n// Controls: Click to place a stone · New Game to restart · Undo reverts both AI & your last moves (so it's your turn again)\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhGomoku',\n    '⚫️⚪️ Gomoku — PvE (EN)',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n  vm.onStop(() => { try{ panel.dispose(); } catch{} });\n  panel.onDidDispose(() => vm.stop());\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n    <title>Gomoku</title>\n    <style>\n      :root{ --bg:#0f1115; --fg:#e6e6e6; --muted:#9aa2b1; --card:#161a22; --line:#222838; --btn:#1d2330; --btnb:#2a3247; --accent:#7bd88f; }\n      html,body{height:100%}\n      body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:860px;margin:0 auto;padding:14px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .btn{background:var(--btn);border:1px solid var(--btnb);border-radius:10px;padding:8px 12px;color:var(--fg);cursor:pointer}\n      .btn:hover{filter:brightness(1.06)}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px}\n      .grid{display:grid;grid-template-columns:repeat(6,auto);gap:10px;align-items:center}\n      .legend{font-size:12px;color:var(--muted)}\n      .board{display:flex;justify-content:center}\n      canvas{display:block;background:#0b0f18;border-radius:12px;outline:none}\n      select,input[type=range]{background:#101522;border:1px solid var(--line);color:var(--fg);padding:6px 8px;border-radius:10px}\n      input[type=range]{accent-color:var(--accent)}\n      .num{min-width:24px;display:inline-block;text-align:right}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:8px 12px;min-width:140px}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div class=\"title\" style=\"font-weight:700\">⚫️⚪️ Gomoku — PvE</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnUndo\" class=\"btn\">↩️ Undo</button>\n        <button id=\"btnNew\" class=\"btn\">🔄 New Game</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">Turn: <b id=\"turnLabel\">You (Black)</b></div>\n          <div class=\"kpi\">AI Level: <b id=\"lvlLabel\">3</b>/6</div>\n        </div>\n        <div class=\"grid\" style=\"margin-top:8px\">\n          <div>You play</div>\n          <select id=\"selSide\">\n            <option value=\"black\">Black (first)</option>\n            <option value=\"white\">White (second)</option>\n          </select>\n\n          <div>AI Level</div>\n          <div style=\"display:flex;align-items:center;gap:8px\">\n            <input id=\"level\" type=\"range\" min=\"1\" max=\"6\" step=\"1\" value=\"3\">\n            <span id=\"lvl\" class=\"num\">3</span>\n          </div>\n\n          <div class=\"legend\" style=\"grid-column:1/-1\">\n            Tip: Click the board to place. Undo reverts both the AI move and your last move, so it's your turn again.\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"board\">\n          <!-- 420×420 board, 15×15 grid -->\n          <canvas id=\"board\" width=\"420\" height=\"420\" tabindex=\"0\" title=\"Click to place a stone\"></canvas>\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      const $ = id => document.getElementById(id);\n      const cvs = $('board'), ctx = cvs.getContext('2d');\n      const selSide=$('selSide'), levelEl=$('level'), lvlText=$('lvl'), lvlLabel=$('lvlLabel'), turnLabel=$('turnLabel');\n      const btnNew=$('btnNew'), btnUndo=$('btnUndo');\n\n      // ----- Board -----\n      const N = 15;\n      const PAD = 20;\n      const W = cvs.width, H = cvs.height;\n      const GAP = Math.floor((W - PAD*2) / (N-1));  // grid spacing\n      const R = Math.floor(GAP * 0.42);             // stone radius\n      const EMPTY=0, BLACK=1, WHITE=2;\n\n      // State\n      let board, turn, human=BLACK, ai=WHITE, lastMove=null, over=false;\n      const history=[];\n      let winnerSide=null;\n\n      // AI configs (topK, depth, time limit)\n      function cfgFor(level){\n        switch(+level){\n          case 1: return { topK:8,  depth:0, limitMs:40  }; // casual random among top, quick threats\n          case 2: return { topK:8,  depth:0, limitMs:80  }; // greedy\n          case 3: return { topK:10, depth:1, limitMs:120 }; // strong greedy (instant kill/block)\n          case 4: return { topK:10, depth:2, limitMs:180 }; // 2-ply\n          case 5: return { topK:14, depth:2, limitMs:220 }; // 2-ply with more candidates\n          case 6: return { topK:10, depth:3, limitMs:350 }; // 3-ply with time cap\n          default: return { topK:10, depth:1, limitMs:120 };\n        }\n      }\n\n      // Init\n      function newBoard(){\n        board = Array.from({length:N}, ()=>Array(N).fill(EMPTY));\n        history.length=0; lastMove=null; over=false; winnerSide=null;\n      }\n      function setSides(){\n        if (selSide.value==='black'){ human=BLACK; ai=WHITE; }\n        else { human=WHITE; ai=BLACK; }\n        turn = BLACK; // black first\n        updateLabels();\n      }\n      function updateLabels(){\n        lvlText.textContent = String(levelEl.value);\n        lvlLabel.textContent = String(levelEl.value);\n        const t = (turn===human)?'You':'AI';\n        const tside = (turn===BLACK)?'Black':'White';\n        turnLabel.textContent = \\`\\${t} (\\${tside})\\`;\n      }\n\n      // Drawing\n      function drawBoard(){\n        ctx.clearRect(0,0,W,H);\n        // background\n        for(let y=0;y<H;y+=20){\n          for(let x=0;x<W;x+=20){\n            ctx.fillStyle = ((x+y)%40===0)?'#0b0f18':'#0c111a';\n            ctx.fillRect(x,y,20,20);\n          }\n        }\n        // grid lines\n        ctx.strokeStyle='#2b3144'; ctx.lineWidth=1.2;\n        for(let i=0;i<N;i++){\n          ctx.beginPath(); ctx.moveTo(PAD, PAD+i*GAP); ctx.lineTo(W-PAD, PAD+i*GAP); ctx.stroke();\n          ctx.beginPath(); ctx.moveTo(PAD+i*GAP, PAD); ctx.lineTo(PAD+i*GAP, H-PAD); ctx.stroke();\n        }\n        // star points\n        const stars=[[3,3],[3,11],[7,7],[11,3],[11,11]];\n        ctx.fillStyle='#9aa2b1';\n        for(const [gx,gy] of stars){\n          const {cx,cy}=cellXY(gx,gy);\n          ctx.beginPath(); ctx.arc(cx,cy,3,0,Math.PI*2); ctx.fill();\n        }\n        // stones\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            const v=board[y][x];\n            if (v!==EMPTY){\n              const {cx,cy}=cellXY(x,y);\n              const grad=ctx.createRadialGradient(cx,cy,2,cx,cy,R);\n              if (v===BLACK){ grad.addColorStop(0,'#555'); grad.addColorStop(1,'#111'); }\n              else { grad.addColorStop(0,'#fff'); grad.addColorStop(1,'#d9d9d9'); }\n              ctx.fillStyle=grad; ctx.beginPath(); ctx.arc(cx,cy,R,0,Math.PI*2); ctx.fill();\n            }\n          }\n        }\n        // last move highlight\n        if (lastMove){\n          const {cx,cy}=cellXY(lastMove.x,lastMove.y);\n          ctx.strokeStyle='#ffd34d'; ctx.lineWidth=2;\n          ctx.beginPath(); ctx.arc(cx,cy,R+3,0,Math.PI*2); ctx.stroke();\n        }\n        // game over overlay\n        if (over){\n          ctx.fillStyle='rgba(0,0,0,.55)'; ctx.fillRect(0,0,W,H);\n          ctx.fillStyle='#fff'; ctx.font='bold 22px system-ui'; ctx.textAlign='center';\n          ctx.fillText((winnerSide===human?'You Win 🎉':'AI Wins 🤖'), W/2, H/2 - 12);\n          ctx.font='14px system-ui'; ctx.fillText('Press New Game to play again', W/2, H/2 + 16);\n        }\n      }\n\n      function cellXY(x,y){ return { cx: PAD + x*GAP, cy: PAD + y*GAP }; }\n      function posToCell(px,py){\n        function snap(v){ return Math.round((v - PAD) / GAP); }\n        const x=snap(px), y=snap(py);\n        if (x<0||x>=N||y<0||y>=N) return null;\n        const {cx,cy}=cellXY(x,y);\n        const dist=Math.hypot(px-cx, py-cy);\n        if (dist<=GAP*0.5) return {x,y};\n        return null;\n      }\n\n      // Win check\n      function countDir(x,y,dx,dy,side){\n        let c=0, i=1;\n        while(true){\n          const nx=x+dx*i, ny=y+dy*i;\n          if (nx<0||ny<0||nx>=N||ny>=N) break;\n          if (board[ny][nx]!==side) break;\n          c++; i++;\n        }\n        return c;\n      }\n      function isFive(x,y,side){\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n        for (const [dx,dy] of dirs){\n          const c = 1 + countDir(x,y,dx,dy,side) + countDir(x,y,-dx,-dy,side);\n          if (c>=5) return true;\n        }\n        return false;\n      }\n\n      // Evaluation (heuristic)\n      function evaluate(){\n        let scoreAI=0, scoreHu=0;\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n        function lineScore(x,y,dx,dy,side){\n          const px=x-dx, py=y-dy;\n          if (px>=0&&py>=0&&px<N&&py<N && board[py][px]===side) return 0;\n          let i=0, len=0;\n          while(true){\n            const nx=x+dx*i, ny=y+dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N) break;\n            if (board[ny][nx]!==side) break;\n            len++; i++;\n          }\n          const leftOpen = (px>=0&&py>=0&&px<N&&py<N && board[py][px]===EMPTY);\n          const rx=x+dx*len, ry=y+dy*len;\n          const rightOpen = (rx>=0&&ry>=0&&rx<N&&ry<N && board[ry][rx]===EMPTY);\n          const open = (leftOpen?1:0)+(rightOpen?1:0);\n          if (len>=5) return 1000000;\n          if (len===4 && open===2) return 100000;\n          if (len===4 && open===1) return 8000;\n          if (len===3 && open===2) return 1500;\n          if (len===3 && open===1) return 200;\n          if (len===2 && open===2) return 80;\n          if (len===2 && open===1) return 20;\n          if (len===1 && open===2) return 6;\n          return 0;\n        }\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            const v=board[y][x];\n            if (v===EMPTY) continue;\n            for(const [dx,dy] of dirs){\n              const s = lineScore(x,y,dx,dy,v);\n              if (v===ai) scoreAI += s; else scoreHu += s;\n            }\n          }\n        }\n        return scoreAI - scoreHu;\n      }\n\n      function pointScore(x,y,side){\n        if (board[y][x]!==EMPTY) return -Infinity;\n        let score=0;\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n        for(const [dx,dy] of dirs){\n          let a=0,b=0,blockA=false,blockB=false;\n          for(let i=1;i<5;i++){\n            const nx=x+dx*i, ny=y+dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N){ blockA=true; break; }\n            const v=board[ny][nx];\n            if (v===side) a++; else { if (v!==EMPTY) blockA=true; break; }\n          }\n          for(let i=1;i<5;i++){\n            const nx=x-dx*i, ny=y-dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N){ blockB=true; break; }\n            const v=board[ny][nx];\n            if (v===side) b++; else { if (v!==EMPTY) blockB=true; break; }\n          }\n          const len=a+b+1;\n          const open = (blockA?0:1)+(blockB?0:1);\n          if (len>=5){ score += 1e6; continue; }\n          if (len===4 && open===2) score += 1e5;\n          else if (len===4 && open===1) score += 6e3;\n          else if (len===3 && open===2) score += 1200;\n          else if (len===3 && open===1) score += 150;\n          else if (len===2 && open===2) score += 60;\n          else if (len===2 && open===1) score += 16;\n        }\n        return score;\n      }\n\n      function hasNeighbor2(x,y){\n        for(let dy=-2; dy<=2; dy++){\n          for(let dx=-2; dx<=2; dx++){\n            if (dx===0 && dy===0) continue;\n            const nx=x+dx, ny=y+dy;\n            if (nx<0||ny<0||nx>=N||ny>=N) continue;\n            if (board[ny][nx]!==EMPTY) return true;\n          }\n        }\n        return false;\n      }\n      function genCandidates(topK, biasForSide=ai){\n        const list=[];\n        let hasStone=false;\n        for(let y=0;y<N;y++){ for(let x=0;x<N;x++){ if(board[y][x]!==EMPTY){ hasStone=true; break; } } if (hasStone) break; }\n        if (!hasStone){\n          const c=Math.floor(N/2);\n          return [{x:c,y:c,score:0}];\n        }\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            if (board[y][x]!==EMPTY) continue;\n            if (!hasNeighbor2(x,y)) continue;\n            const off = pointScore(x,y,biasForSide);\n            const def = pointScore(x,y,biasForSide===ai?human:ai) * 0.96;\n            const sc = Math.max(off, def);\n            list.push({x,y,score:sc, offensive:off, defensive:def});\n          }\n        }\n        list.sort((a,b)=>b.score-a.score);\n        return list.slice(0, topK);\n      }\n\n      function immediateMove(){\n        const cand = genCandidates(30, ai);\n        for(const c of cand){\n          board[c.y][c.x]=ai;\n          const win=isFive(c.x,c.y,ai);\n          board[c.y][c.x]=EMPTY;\n          if (win) return c;\n        }\n        for(const c of cand){\n          board[c.y][c.x]=human;\n          const oppWin=isFive(c.x,c.y,human);\n          board[c.y][c.x]=EMPTY;\n          if (oppWin) return c;\n        }\n        return null;\n      }\n\n      function search(depth, alpha, beta, curSide, cfg, deadline){\n        if (performance.now() > deadline) return { score:evaluate(), move:null, cutoff:true };\n        if (depth===0) return { score:evaluate(), move:null };\n        if (lastMove && isFive(lastMove.x,lastMove.y,lastMove.side)){\n          const s = (lastMove.side===ai)? 999999 : -999999;\n          return { score:s, move:null };\n        }\n        const cand = genCandidates(cfg.topK, curSide);\n        if (cand.length===0) return { score:evaluate(), move:null };\n\n        let bestMove=null;\n\n        if (curSide===ai){\n          let best=-Infinity;\n          for(const c of cand){\n            board[c.y][c.x]=curSide;\n            const prev=lastMove; lastMove={x:c.x,y:c.y,side:curSide};\n            let val;\n            if (isFive(c.x,c.y,curSide)){\n              val=999999 - (cfg.depth-depth);\n            }else{\n              const r = search(depth-1, alpha, beta, human, cfg, deadline);\n              val=r.score;\n              if (r.cutoff) { board[c.y][c.x]=EMPTY; lastMove=prev; return { score:best, move:bestMove, cutoff:true }; }\n            }\n            board[c.y][c.x]=EMPTY; lastMove=prev;\n\n            if (val>best){ best=val; bestMove={x:c.x,y:c.y}; }\n            if (val>alpha) alpha=val;\n            if (beta<=alpha) break;\n          }\n          return { score:best, move:bestMove };\n        }else{\n          let best=Infinity;\n          for(const c of cand){\n            board[c.y][c.x]=curSide;\n            const prev=lastMove; lastMove={x:c.x,y:c.y,side:curSide};\n            let val;\n            if (isFive(c.x,c.y,curSide)){\n              val=-999999 + (cfg.depth-depth);\n            }else{\n              const r = search(depth-1, alpha, beta, ai, cfg, deadline);\n              val=r.score;\n              if (r.cutoff) { board[c.y][c.x]=EMPTY; lastMove=prev; return { score:best, move:bestMove, cutoff:true }; }\n            }\n            board[c.y][c.x]=EMPTY; lastMove=prev;\n\n            if (val<best){ best=val; bestMove={x:c.x,y:c.y}; }\n            if (val<beta) beta=val;\n            if (beta<=alpha) break;\n          }\n          return { score:best, move:bestMove };\n        }\n      }\n\n      async function aiMove(){\n        if (over || turn!==ai) return;\n        const level = +levelEl.value;\n        const cfg = cfgFor(level);\n        const deadline = performance.now() + cfg.limitMs;\n\n        if (level<=3){\n          const imm = immediateMove();\n          if (imm){ place(imm.x,imm.y,ai); return; }\n        }\n\n        let move=null;\n        if (cfg.depth===0){\n          const cand = genCandidates(cfg.topK, ai);\n          if (cand.length===0){ const c=Math.floor(N/2); move={x:c,y:c}; }\n          else{\n            if (level===1){ const k=Math.max(1, Math.min(6, cand.length)); move=cand[(Math.random()*k)|0]; }\n            else { move=cand[0]; }\n          }\n        }else{\n          const res = search(cfg.depth, -Infinity, Infinity, ai, cfg, deadline);\n          move = res.move || immediateMove() || genCandidates(1, ai)[0];\n        }\n\n        if (move) place(move.x, move.y, ai);\n      }\n\n      function place(x,y,side){\n        if (board[y][x]!==EMPTY || over) return false;\n        board[y][x]=side;\n        history.push({x,y,side});\n        lastMove={x,y,side};\n        if (isFive(x,y,side)){ over=true; winnerSide=side; }\n        else { turn = (side===BLACK)? WHITE : BLACK; }\n        updateLabels(); drawBoard();\n        if (!over && turn===ai) setTimeout(aiMove, 30);\n        return true;\n      }\n\n      function undo(){\n        if (history.length===0 || over) return;\n        let popped = history.pop(); board[popped.y][popped.x]=EMPTY;\n        if (popped.side===ai && history.length>0){\n          popped = history.pop(); board[popped.y][popped.x]=EMPTY;\n        }\n        over=false; winnerSide=null;\n        const last = history[history.length-1];\n        if (last){ turn = (last.side===BLACK)? WHITE : BLACK; lastMove=last; }\n        else { turn = BLACK; lastMove=null; }\n        if (turn!==human && history.length>0){\n          const p = history.pop(); board[p.y][p.x]=EMPTY;\n          const last2 = history[history.length-1];\n          turn = last2 ? ((last2.side===BLACK)? WHITE : BLACK) : BLACK;\n          lastMove = last2 || null;\n        }\n        updateLabels(); drawBoard();\n      }\n\n      // Events\n      cvs.addEventListener('mousedown', (e)=>{\n        if (over || turn!==human) return;\n        const rect=cvs.getBoundingClientRect();\n        const pos = posToCell(e.clientX - rect.left, e.clientY - rect.top);\n        if (!pos) return;\n        place(pos.x,pos.y,human);\n      });\n      btnNew.addEventListener('click', ()=>{\n        newBoard(); setSides(); drawBoard();\n        if (turn===ai) setTimeout(aiMove, 60);\n        cvs.focus();\n      });\n      btnUndo.addEventListener('click', ()=>{ undo(); cvs.focus(); });\n      selSide.addEventListener('change', ()=>{\n        newBoard(); setSides(); drawBoard();\n        if (turn===ai) setTimeout(aiMove, 60);\n      });\n      levelEl.addEventListener('input', ()=>{ lvlText.textContent=String(levelEl.value); lvlLabel.textContent=String(levelEl.value); });\n\n      // Boot\n      newBoard(); setSides(); drawBoard();\n      if (turn===ai) setTimeout(aiMove, 80);\n      setTimeout(()=>cvs.focus(), 0);\n    </script>\n  </body>\n  </html>`;\n}\n",
    "tags": [
      "game"
    ]
  },
  {
    "command": "cmd.y3mogfpotv",
    "text": "Clipboard Tabs",
    "tooltip": "",
    "hidden": true,
    "enableOnInit": false,
    "script": "// Clipboard Tabs — uses statusBarHelper.v1.storage (workspace-preferred), compact UI, editable\n// Auto-stops the script (vm.stop) when the webview is closed.\nconst vscode = require('vscode');\nconst { storage, vm } = statusBarHelper.v1;\n\n(async function main () {\n  const setText = (t) => (typeof vm.setLabel === 'function' ? vm.setLabel(t) : (vm.setText?.(t)));\n  const setTip  = (t) => vm.setTooltip?.(t);\n  setText('📋 Tabs');\n  setTip('Clipboard Tabs: opens/focuses the panel; data stored via SBH storage');\n\n  // ---------- storage (prefer workspace, fallback global) ----------\n  const store = storage?.workspace || storage?.global;\n  if (!store) throw new Error('statusBarHelper.v1.storage is not available');\n\n  const STORE_KEY = 'clipboard.tabs.v1';\n  const defaultState = { active: 'default', tabs: [ { id: 'default', name: 'Default', items: [] } ] };\n\n  async function loadState() {\n    const s = await store.get(STORE_KEY, null);\n    return s && s.tabs ? s : defaultState;\n  }\n  async function saveState(state) {\n    await store.set(STORE_KEY, state);\n  }\n\n  // ---------- singleton panel ----------\n  const g = globalThis;\n  const panel = await createOrRevealPanel();\n\n  vm.onStop?.(() => { try { panel?.dispose(); } catch {} });\n\n  function safeStop(reason){\n    try{\n      if (g.__sbhStopping) return;\n      g.__sbhStopping = true;\n      vm.stop?.(reason);\n    } finally { setTimeout(()=>{ g.__sbhStopping = false; }, 0); }\n  }\n\n  async function createOrRevealPanel(){\n    if (g.__sbhClipboardTabsPanel && !g.__sbhClipboardTabsPanel._disposed) {\n      try { g.__sbhClipboardTabsPanel.reveal(); return g.__sbhClipboardTabsPanel; } catch {}\n    }\n    const p = vscode.window.createWebviewPanel(\n      'sbhClipboardTabs', 'Clipboard Tabs', vscode.ViewColumn.Active,\n      { enableScripts: true, retainContextWhenHidden: true }\n    );\n    const nonce = Math.random().toString(36).slice(2);\n    p.webview.html = getHtml(nonce);\n\n    // Message bridge\n    p.webview.onDidReceiveMessage(async (msg) => {\n      switch (msg.type) {\n        case 'req:init': {\n          const state = await loadState();\n          p.webview.postMessage({ type: 'init', state });\n          break;\n        }\n        case 'save': {\n          if (msg.state && msg.state.tabs) {\n            await saveState(msg.state);\n            p.webview.postMessage({ type: 'saved' });\n          }\n          break;\n        }\n        case 'getSelection': {\n          const ed = vscode.window.activeTextEditor;\n          const text = ed ? ed.document.getText(ed.selection) : '';\n          p.webview.postMessage({ type: 'selection', text });\n          break;\n        }\n        case 'getClipboard': {\n          const text = await vscode.env.clipboard.readText();\n          p.webview.postMessage({ type: 'clipboard', text });\n          break;\n        }\n        case 'writeClipboard': {\n          await vscode.env.clipboard.writeText(String(msg.text || ''));\n          vscode.window.showInformationMessage('Copied to system clipboard');\n          break;\n        }\n        case 'notify': {\n          if (msg.level === 'warn') vscode.window.showWarningMessage(msg.message || '');\n          else if (msg.level === 'error') vscode.window.showErrorMessage(msg.message || '');\n          else vscode.window.showInformationMessage(msg.message || '');\n          break;\n        }\n      }\n    });\n\n    p.onDidDispose(() => {\n      p._disposed = true;\n      safeStop('webview-closed');\n    });\n\n    g.__sbhClipboardTabsPanel = p;\n    return p;\n  }\n\n  // ---------- Webview HTML ----------\n  function getHtml(nonce) {\n    const csp = [\n      \"default-src 'none'\",\n      \"img-src https:\",\n      \"style-src 'unsafe-inline'\",\n      `script-src 'nonce-${nonce}'`,\n    ].join('; ');\n    return /*html*/`\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Clipboard Tabs</title>\n<style>\n  :root{\n    --bg: var(--vscode-editor-background, #1e1e1e);\n    --fg: var(--vscode-foreground, #ddd);\n    --muted: var(--vscode-descriptionForeground, #999);\n    --accent: var(--vscode-button-background, #0e639c);\n    --accentHover: var(--vscode-button-hoverBackground, #1177bb);\n    --border: var(--vscode-editorWidget-border, #3c3c3c);\n    --card: rgba(255,255,255,0.03);\n    --shadow: rgba(0,0,0,0.2);\n    --fs: 12px; --fs-sm: 11px; --pad: 8px; --pad-sm: 6px; --gap: 8px; --radius: 8px;\n  }\n  *{ box-sizing: border-box; }\n  body{ margin:0; background:var(--bg); color:var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; font-size:var(--fs); }\n  .toolbar{ display:flex; align-items:center; gap:var(--gap); padding:var(--pad); border-bottom:1px solid var(--border); position:sticky; top:0; background:var(--bg); z-index:5; flex-wrap:wrap; }\n  .actions{ display:flex; gap:var(--gap); flex-wrap:wrap; }\n  .search{ margin-left:auto; }\n  .search input{ background:var(--card); border:1px solid var(--border); color:var(--fg); border-radius:var(--radius); padding:var(--pad-sm) 10px; width:220px; font-size:var(--fs); }\n  @media (max-width: 560px){ .search{ flex-basis:100%; order:2; margin-left:0; } .search input{ width:100%; } .actions{ order:1; } }\n\n  .btn{ border:1px solid var(--border); background:var(--card); color:var(--fg); padding:var(--pad-sm) 10px; border-radius:var(--radius); cursor:pointer; box-shadow:0 1px 2px var(--shadow); font-size:var(--fs); }\n  .btn.primary{ background:var(--accent); border-color:transparent; color:white; }\n  .btn.primary:hover{ background:var(--accentHover); }\n  .btn:hover{ filter:brightness(1.08); }\n  .btn.danger{ border-color:#a11; }\n\n  .tabs{ display:flex; gap:6px; padding:8px var(--pad); border-bottom:1px solid var(--border); flex-wrap:wrap; }\n  .tab{ padding:4px 10px; border:1px solid var(--border); border-radius:999px; background:var(--card); cursor:pointer; font-size:var(--fs); }\n  .tab.active{ background:var(--accent); color:white; border-color:transparent; }\n\n  .grid{ display:grid; grid-template-columns:repeat(auto-fill, minmax(220px,1fr)); gap:8px; padding:8px; }\n  .card{ border:1px solid var(--border); border-radius:10px; background:var(--card); padding:8px; display:flex; flex-direction:column; gap:6px; }\n  .card h4{ margin:0; font-size:var(--fs); }\n  .card pre{ margin:0; font-size:var(--fs-sm); white-space:pre-wrap; word-break:break-word; font-family: ui-monospace,\"SFMono-Regular\",Menlo,Consolas,monospace; max-height:120px; overflow:auto; }\n  .row{ display:flex; align-items:center; gap:6px; flex-wrap:wrap; }\n  .muted{ color:var(--muted); font-size:var(--fs-sm); }\n  footer{ padding:6px var(--pad); border-top:1px solid var(--border); font-size:var(--fs-sm); color:var(--muted); }\n\n  dialog{ border:1px solid var(--border); background:var(--bg); color:var(--fg); border-radius:10px; padding:0; width:min(560px, 90vw); }\n  dialog header{ padding:8px var(--pad); border-bottom:1px solid var(--border); font-size:var(--fs); }\n  dialog main{ padding:var(--pad); }\n  textarea, input[type=\"text\"].full{ width:100%; background:var(--card); color:var(--fg); border:1px solid var(--border); border-radius:8px; padding:8px; font-size:var(--fs); }\n</style>\n</head>\n<body>\n  <header class=\"toolbar\">\n    <div class=\"actions\">\n      <button id=\"add-snippet\" class=\"btn primary\">＋ New Snippet</button>\n      <button id=\"add-tab\" class=\"btn\">➕ New Tab</button>\n      <button id=\"rename-tab\" class=\"btn\">✏️ Rename</button>\n      <button id=\"delete-tab\" class=\"btn danger\">🗑 Delete Tab</button>\n    </div>\n    <div class=\"search\"><input id=\"q\" type=\"text\" placeholder=\"Search title/content (live)\"/></div>\n  </header>\n\n  <div class=\"tabs\" id=\"tabs\"></div>\n  <div class=\"grid\" id=\"grid\"></div>\n  <footer>Tip: “Copy” only writes to the clipboard.</footer>\n\n  <!-- Create/Edit snippet -->\n  <dialog id=\"dlg\">\n    <header><strong id=\"dlg-title\">New Snippet</strong></header>\n    <main>\n      <div class=\"row\" style=\"margin-bottom:6px\">\n        <button id=\"from-selection\" class=\"btn\">From Selection</button>\n        <button id=\"from-clipboard\" class=\"btn\">From Clipboard</button>\n      </div>\n      <input id=\"f-title\" class=\"full\" type=\"text\" placeholder=\"Title (optional)\" />\n      <div style=\"height:6px\"></div>\n      <textarea id=\"f-text\" rows=\"8\" placeholder=\"Paste or type content...\"></textarea>\n      <div style=\"height:6px\"></div>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"dlg-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"dlg-ok\" class=\"btn primary\">Save</button>\n      </div>\n    </main>\n  </dialog>\n\n  <!-- Prompt (new tab / rename) -->\n  <dialog id=\"input-dlg\">\n    <header><strong id=\"input-title\">Input</strong></header>\n    <main>\n      <input id=\"input-text\" class=\"full\" type=\"text\" />\n      <div style=\"height:6px\"></div>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"input-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"input-ok\" class=\"btn primary\">OK</button>\n      </div>\n    </main>\n  </dialog>\n\n  <!-- Confirm -->\n  <dialog id=\"confirm-dlg\">\n    <header><strong>Confirm</strong></header>\n    <main>\n      <p id=\"confirm-msg\" style=\"margin:0 0 8px\"></p>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"confirm-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"confirm-ok\" class=\"btn primary\">Confirm</button>\n      </div>\n    </main>\n  </dialog>\n\n  <script nonce=\"${nonce}\">\n    const vscode = acquireVsCodeApi();\n\n    // ----- State provided by outer storage (webview keeps an in-memory copy) -----\n    let state = null;\n\n    // Request initial state\n    window.addEventListener('load', () => {\n      vscode.postMessage({ type: 'req:init' });\n    });\n\n    // ---- Refs ----\n    const tabsEl = document.getElementById('tabs');\n    const gridEl = document.getElementById('grid');\n    const qEl = document.getElementById('q');\n    const btnAddSnippet = document.getElementById('add-snippet');\n    const btnAddTab = document.getElementById('add-tab');\n    const btnRenameTab = document.getElementById('rename-tab');\n    const btnDeleteTab = document.getElementById('delete-tab');\n\n    const dlg = document.getElementById('dlg');\n    const dlgTitle = document.getElementById('dlg-title');\n    const fTitle = document.getElementById('f-title');\n    const fText = document.getElementById('f-text');\n    const btnOk = document.getElementById('dlg-ok');\n    const btnCancel = document.getElementById('dlg-cancel');\n    const btnFromSel = document.getElementById('from-selection');\n    const btnFromClip = document.getElementById('from-clipboard');\n\n    const inputDlg = document.getElementById('input-dlg');\n    const inputTitle = document.getElementById('input-title');\n    const inputText = document.getElementById('input-text');\n    const inputOk = document.getElementById('input-ok');\n    const inputCancel = document.getElementById('input-cancel');\n\n    const confirmDlg = document.getElementById('confirm-dlg');\n    const confirmMsg = document.getElementById('confirm-msg');\n    const confirmOk = document.getElementById('confirm-ok');\n    const confirmCancel = document.getElementById('confirm-cancel');\n\n    let editingItem = null; // {tabId, itemId} | null\n\n    // ---- Helpers ----\n    function persist(){ if(state) vscode.postMessage({ type: 'save', state }); }\n    function notify(message, level){ vscode.postMessage({ type:'notify', message, level }); }\n\n    function confirmWeb(message){\n      return new Promise((resolve) => {\n        confirmMsg.textContent = message; confirmDlg.showModal();\n        const onOk = () => { cleanup(); resolve(true); };\n        const onCancel = () => { cleanup(); resolve(false); };\n        const onKey = (e)=>{ if(e.key==='Escape') onCancel(); if(e.key==='Enter') onOk(); };\n        function cleanup(){ confirmOk.removeEventListener('click',onOk); confirmCancel.removeEventListener('click',onCancel); confirmDlg.removeEventListener('keydown',onKey); confirmDlg.close(); }\n        confirmOk.addEventListener('click', onOk, {once:true});\n        confirmCancel.addEventListener('click', onCancel, {once:true});\n        confirmDlg.addEventListener('keydown', onKey);\n      });\n    }\n    function promptWeb(title, def=''){\n      return new Promise((resolve)=>{\n        inputTitle.textContent = title; inputText.value = def; inputDlg.showModal();\n        inputText.focus(); inputText.select();\n        const onOk = () => { cleanup(); resolve(inputText.value.trim() || null); };\n        const onCancel = () => { cleanup(); resolve(null); };\n        const onKey = (e)=>{ if(e.key==='Escape') onCancel(); if(e.key==='Enter') onOk(); };\n        function cleanup(){ inputOk.removeEventListener('click',onOk); inputCancel.removeEventListener('click',onCancel); inputDlg.removeEventListener('keydown',onKey); inputDlg.close(); }\n        inputOk.addEventListener('click', onOk, {once:true});\n        inputCancel.addEventListener('click', onCancel, {once:true});\n        inputDlg.addEventListener('keydown', onKey);   // <-- FIXED (was \"on Key\")\n      });\n    }\n\n    function render(){\n      // tabs\n      tabsEl.innerHTML = '';\n      for (const t of state.tabs) {\n        const el = document.createElement('button');\n        el.className = 'tab' + (t.id === state.active ? ' active' : '');\n        el.textContent = t.name;\n        el.onclick = () => { state.active = t.id; persist(); render(); };\n        tabsEl.appendChild(el);\n      }\n\n      // items\n      const tab = activeTab();\n      const q = (qEl.value || '').toLowerCase().trim();\n      const items = tab.items.filter(it =>\n        !q || (it.title || '').toLowerCase().includes(q) || (it.text || '').toLowerCase().includes(q)\n      );\n\n      gridEl.innerHTML = '';\n      if (!items.length) {\n        const empty = document.createElement('div'); empty.className = 'muted';\n        empty.style.padding = '6px var(--pad)'; empty.textContent = q ? 'No matching snippets' : 'No snippets yet. Click “New Snippet” to start.';\n        gridEl.appendChild(empty); return;\n      }\n      for (const it of items) gridEl.appendChild(card(tab.id, it));\n    }\n\n    function card(tabId, it){\n      const card = document.createElement('div'); card.className = 'card';\n      const title = document.createElement('h4'); title.textContent = it.title || preview(it.text); card.appendChild(title);\n      const pre = document.createElement('pre'); pre.textContent = it.text; card.appendChild(pre);\n      const row = document.createElement('div'); row.className = 'row';\n      const bCopy = button('Copy', async () => {\n        try { await navigator.clipboard.writeText(it.text); notify('Copied'); }\n        catch { vscode.postMessage({ type:'writeClipboard', text: it.text }); }\n      });\n      const bEdit = button('Edit', () => openEdit(tabId, it.id));\n      const bDel  = button('Delete', async () => { const ok = await confirmWeb('Delete this snippet?'); if(!ok) return; removeItem(tabId, it.id); });\n      row.append(bCopy, bEdit, bDel); card.appendChild(row);\n      const ts = document.createElement('div'); ts.className = 'muted'; ts.textContent = new Date(it.ts).toLocaleString(); card.appendChild(ts);\n      return card;\n    }\n\n    function button(text, onClick){ const b=document.createElement('button'); b.className='btn'; b.textContent=text; b.onclick=onClick; return b; }\n    function preview(s){ s=(s||'').replace(/\\\\s+/g,' ').trim(); return s.length>30? s.slice(0,30)+'…' : s || '(Untitled)'; }\n    function activeTab(){ let t = state.tabs.find(t=>t.id===state.active); if(!t){ state.active = state.tabs[0]?.id || 'default'; t = state.tabs[0] || {id:'default',name:'Default',items:[]}; } return t; }\n\n    // Toolbar actions (guard if state not ready)\n    btnAddTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const name = await promptWeb('New tab name', 'New Tab'); if(!name) return;\n      const id = uid(); state.tabs.push({ id, name, items:[] }); state.active = id; persist(); render();\n    };\n    btnRenameTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const tab = activeTab(); const name = await promptWeb('Rename tab', tab.name); if(!name) return;\n      tab.name = name; persist(); render();\n    };\n    btnDeleteTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const tab = activeTab();\n      const ok = await confirmWeb(\\`Delete tab “\\${tab.name}”? (All snippets in it will be removed)\\`);\n      if(!ok) return;\n      state.tabs = state.tabs.filter(t => t.id !== tab.id);\n      if (!state.tabs.length) state = { active:'default', tabs:[{id:'default', name:'Default', items:[]}] };\n      else if (!state.tabs.find(t => t.id === state.active)) state.active = state.tabs[0].id;\n      persist(); render();\n    };\n    qEl.oninput = () => { if(state) render(); };\n\n    // Item actions\n    btnAddSnippet.onclick = () => { if(!state) return notify('Please wait… loading data'); openCreate(); };\n    function openCreate(){\n      editingItem = null;\n      dlgTitle.textContent = 'New Snippet';\n      fTitle.value = ''; fText.value = '';\n      dlg.showModal(); fTitle.focus();\n    }\n    function openEdit(tabId, itemId){\n      editingItem = { tabId, itemId };\n      const tab = state.tabs.find(t => t.id === tabId);\n      const item = tab.items.find(i => i.id === itemId);\n      dlgTitle.textContent = 'Edit Snippet'; fTitle.value = item.title || ''; fText.value = item.text || '';\n      dlg.showModal(); fTitle.focus(); fTitle.select();\n    }\n\n    btnFromSel.onclick  = () => vscode.postMessage({ type:'getSelection' });\n    btnFromClip.onclick = () => vscode.postMessage({ type:'getClipboard' });\n    btnCancel.onclick   = () => dlg.close();\n\n    btnOk.onclick = () => {\n      if(!state) return;\n      const title = fTitle.value.trim(); const text = fText.value;\n      if(!text){ notify('Content required', 'warn'); return; }\n      if (editingItem) {\n        const tab = state.tabs.find(t => t.id === editingItem.tabId);\n        const item = tab.items.find(i => i.id === editingItem.itemId);\n        item.title = title || undefined; item.text = text; item.ts = Date.now();\n      } else {\n        const tab = activeTab();\n        tab.items.unshift({ id: uid(), title: title || undefined, text, ts: Date.now() });\n      }\n      persist(); render(); dlg.close();\n    };\n\n    function removeItem(tabId, itemId){\n      const tab = state.tabs.find(t => t.id === tabId);\n      tab.items = tab.items.filter(i => i.id !== itemId);\n      persist(); render();\n    }\n\n    // Messages from extension\n    window.addEventListener('message', (e) => {\n      const msg = e.data || {};\n      if (msg.type === 'init') { state = msg.state; render(); }\n      if (msg.type === 'selection' && dlg.open) { if (fText.value) fText.value += '\\\\n'; fText.value += msg.text || ''; }\n      if (msg.type === 'clipboard' && dlg.open) { if (fText.value) fText.value += '\\\\n'; fText.value += msg.text || ''; }\n    });\n\n    function uid(){ return Math.random().toString(36).slice(2) + Date.now().toString(36); }\n  </script>\n</body>\n</html>\n    `;\n  }\n})();\n",
    "tags": [
      "tool"
    ]
  },
  {
    "command": "cmd.zfj6xqiha3",
    "text": "$(layout-sidebar-left) sidebar",
    "tooltip": "example",
    "hidden": true,
    "enableOnInit": false,
    "script": "// === Demo: Open Sidebar + Tab; cross-message; close both when either closes ===\nconst vscode = require('vscode');\nconst { sidebar, vm } = statusBarHelper.v1;\n\n// Shared HTML (minimal UI: input → send to the other view, and \"Close Both\")\nconst html = (who) => `<!doctype html>\n<html><head><meta charset=\"utf-8\"/>\n<style>\n :root { color-scheme: light dark; }\n body { margin:0; padding:14px; font-family: var(--vscode-font-family);\n        color: var(--vscode-editor-foreground);\n        background: var(--vscode-editor-background); }\n h3 { margin:0 0 10px; font-weight:600; }\n .row { display:flex; gap:8px; margin:10px 0; }\n input { flex:1; padding:6px 8px; border-radius:6px;\n         background:var(--vscode-input-background);\n         color:var(--vscode-input-foreground);\n         border:1px solid var(--vscode-input-border); }\n button { padding:6px 10px; border-radius:6px; cursor:pointer;\n          border:1px solid var(--vscode-input-border);\n          background:var(--vscode-button-secondaryBackground,transparent);\n          color:var(--vscode-button-secondaryForeground,var(--vscode-editor-foreground)); }\n #log { margin-top:10px; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n #log div { margin:4px 0; opacity:.9; }\n</style></head>\n<body>\n  <h3>${who}</h3>\n  <div class=\"row\">\n    <input id=\"msg\" placeholder=\"type something…\"/>\n    <button id=\"send\">Send → Other</button>\n    <button id=\"closeBoth\">Close Both</button>\n  </div>\n  <div id=\"log\"></div>\n<script>\n  const vscode = acquireVsCodeApi();\n  const log = (t) => { const d=document.createElement('div'); d.textContent=t; document.getElementById('log').prepend(d); };\n\n  document.getElementById('send').onclick = () => {\n    const v = document.getElementById('msg').value || '(empty)';\n    vscode.postMessage({ type:'relay', from:'${who}', text:v });\n    document.getElementById('msg').value = '';\n  };\n  document.getElementById('closeBoth').onclick = () => {\n    vscode.postMessage({ type:'closeAll', from:'${who}' });\n  };\n\n  window.addEventListener('message', (e) => {\n    const { type, text } = e.data || {};\n    if (type === 'note') log(text);\n  });\n</script></body></html>`;\n\n// 1) Open Sidebar\nawait sidebar.open({ \n  html: html('Sidebar'),\n  onClose: ()=> vm.onStop()  \n});\n\n// 2) Open Tab (WebviewPanel)\nconst panel = vscode.window.createWebviewPanel(\n  'sbh.dualDemo',\n  'SBH Demo (Tab)',\n  vscode.ViewColumn.Active,\n  { enableScripts: true, retainContextWhenHidden: true }\n);\npanel.webview.html = html('Tab');\n\n// Helpers to post messages\nconst sendToSidebar = (m) => sidebar.postMessage(m);\nconst sendToTab     = (m) => panel.webview.postMessage(m);\n\n// 3) VM as a relay between both views\nconst offSidebarMsg = sidebar.onMessage((m) => {\n  if (!m || typeof m !== 'object') return;\n  if (m.type === 'relay')   sendToTab({ type:'note', text:`Sidebar → ${m.text}` });\n  if (m.type === 'closeAll') closeBoth();\n});\nconst dTabMsg = panel.webview.onDidReceiveMessage((m) => {\n  if (!m || typeof m !== 'object') return;\n  if (m.type === 'relay')   sendToSidebar({ type:'note', text:`Tab → ${m.text}` });\n  if (m.type === 'closeAll') closeBoth();\n});\n\n// 4) Closing logic: if either closes, close both (guard against re-entry)\nlet closing = false;\nfunction closeBoth() {\n  if (closing) return;\n  closing = true;\n  try { panel.dispose(); } catch {}\n  try { sidebar.close(); } catch {}\n  try { vm.stop(); } catch {}\n}\n// If user closes one side manually, close the other too\nconst offSidebarClose = sidebar.onClose(() => {\n  if (!closing) { closing = true; try { \n    vm.stop();\n  } catch {} }\n});\nconst dTabClose = panel.onDidDispose(() => {\n  if (!closing) { closing = true; try { \n    vm.stop();\n  } catch {} }\n});\n\n// 5) Initial notes\nsendToSidebar({ type:'note', text:'Hello from VM → Sidebar' });\nsendToTab({ type:'note', text:'Hello from VM → Tab' });\n\n// 6) Cleanup when script stops\nvm?.onStop?.(() => {\n  try { offSidebarMsg?.dispose?.(); } catch {}\n  try { offSidebarClose?.dispose?.(); } catch {}\n  try { dTabMsg?.dispose?.(); } catch {}\n  try { dTabClose?.dispose?.(); } catch {}\n  try { panel.dispose(); } catch {}\n  try { sidebar.close(); } catch {}\n});\n",
    "tags": [
      "example"
    ]
  },
  {
    "command": "cmd.dtx7g7hehd",
    "text": "$(cloud) Weather (Sidebar)",
    "tooltip": "Next 24-hour weather forecast",
    "hidden": true,
    "enableOnInit": false,
    "script": "// Sidebar — Weather (Next 24 hours; list view with precip bar — EN)\n// Paste into a Status Bar Helper script field and run.\nconst vscode = require('vscode');\nconst { vm, sidebar } = statusBarHelper.v1;\n\n(async function main () {\n  const nonce = Math.random().toString(36).slice(2);\n  await sidebar.open({ \n    html: getHtml(nonce),\n   onClose: () => vm.stop()\n  });\n  vm.onStop(() => { try { sidebar.close(); } catch {} });\n})();\n\nfunction getHtml (nonce) {\n  const cities = [\n    { name: 'Taipei',   lat: 25.0375, lon: 121.5637, tz: 'Asia/Taipei' },\n    { name: 'Hsinchu',  lat: 24.8066, lon: 120.9686, tz: 'Asia/Taipei' },\n    { name: 'Taichung', lat: 24.1477, lon: 120.6736, tz: 'Asia/Taipei' },\n    { name: 'Tainan',   lat: 22.9997, lon: 120.2270, tz: 'Asia/Taipei' },\n    { name: 'Kaohsiung',lat: 22.6273, lon: 120.3014, tz: 'Asia/Taipei' },\n    { name: 'Hualien',  lat: 23.9872, lon: 121.6015, tz: 'Asia/Taipei' },\n    { name: 'Taitung',  lat: 22.7972, lon: 121.0717, tz: 'Asia/Taipei' },\n    { name: 'Tokyo',    lat: 35.6762, lon: 139.6503, tz: 'Asia/Tokyo' },\n    { name: 'Seoul',    lat: 37.5665, lon: 126.9780, tz: 'Asia/Seoul' },\n    { name: 'New York', lat: 40.7128, lon: -74.0060, tz: 'America/New_York' },\n  ];\n  const options = cities.map((c,i)=>`<option value=\"${i}\">${c.name}</option>`).join('');\n\n  return `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\"/>\n  <meta http-equiv=\"Content-Security-Policy\"\n        content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'; connect-src https:;\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Weather — Next 24 hours</title>\n  <style>\n    :root{\n      --fg:#e7e7e7; --muted:#a7a7a7; --bg:#1e1e1e; --card:#232323; --line:#2f2f2f;\n      --pill:#1a1a1a; --green:#2ed39a;\n    }\n    *{box-sizing:border-box}\n    body{margin:0;font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial;background:var(--bg);color:var(--fg)}\n    .wrap{padding:16px;max-width:860px;margin:0 auto}\n    .row{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n    h1{font-size:28px;margin:0 8px 0 0;line-height:1.2}\n    .muted{color:var(--muted)}\n    select,button{background:var(--pill);color:var(--fg);border:1px solid var(--line);border-radius:12px;padding:8px 12px;cursor:pointer}\n\n    .card{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:16px;margin-top:16px;box-shadow:0 10px 26px rgba(0,0,0,.22)}\n    .big{font-size:44px;font-weight:800;letter-spacing:1px;line-height:1}\n    .wx{font-size:20px;font-weight:700;margin-left:12px}\n    .when{margin-top:8px;color:var(--muted)}\n    .windRow{margin-top:6px;color:var(--muted);display:flex;align-items:center;gap:6px;font-size:14px}\n\n    .kpis{display:flex;gap:12px;flex-wrap:wrap;margin-top:12px}\n    .kpi{background:var(--pill);border:1px solid var(--line);border-radius:14px;padding:10px 14px;display:flex;align-items:center;gap:10px;font-weight:700}\n\n    .legend{display:flex;align-items:center;gap:12px;margin-bottom:8px}\n    .lg{background:var(--pill);border:1px solid var(--line);border-radius:999px;padding:8px 12px;display:flex;align-items:center;gap:8px}\n    .dot{width:10px;height:10px;border-radius:50%}\n    .blue{background:#5da5ff}.green{background:var(--green)}\n\n    /* Hourly list + precip bar */\n    .list{margin-top:10px}\n    .item{padding:14px 6px;border-top:1px solid var(--line);display:grid;grid-template-columns:70px 90px 1fr 74px;gap:14px;align-items:center}\n    .time{color:var(--muted);width:70px}\n    .tval{font-weight:800;font-size:18px;min-width:90px}\n\n    .bar{position:relative;height:8px;border-radius:999px;background:#181818;border:1px solid #2a2a2a;overflow:hidden}\n    .fill{position:absolute;top:-1px;left:-1px;bottom:-1px;width:0;border-radius:999px;background:var(--green)}\n    .emoji{text-align:right;opacity:.95}\n    .pct{font-weight:700;text-align:right}\n\n    @media (max-width:560px){\n      .big{font-size:38px}\n      .wx{font-size:18px}\n      .item{grid-template-columns:62px 82px 1fr 60px}\n      .tval{font-size:17px}\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"row\">\n      <h1 style=\"font-size:15px\">🌤️ Weather — Next 24 hours</h1>\n      <div style=\"flex:1\"></div>\n      <button id=\"btnRefresh\">Refresh</button>\n      <select id=\"city\">${options}</select>\n    </div>\n\n    <div class=\"card\" id=\"cardNow\">\n      <div class=\"row\" style=\"align-items:flex-end;\">\n        <div class=\"big\" id=\"nowTemp\">--°</div>\n        <div class=\"wx\" id=\"nowWx\">—</div>\n      </div>\n      <div class=\"windRow\"><span>💨</span><span id=\"nowWind\">-- m/s</span></div>\n      <div class=\"when\" id=\"updateAt\">—</div>\n      <div class=\"kpis\">\n        <div class=\"kpi\">🔺 <span id=\"dayMax\">--°</span></div>\n        <div class=\"kpi\">🔻 <span id=\"dayMin\">--°</span></div>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <div class=\"legend\">\n        <div class=\"lg\"><span class=\"dot blue\"></span><b>Temp</b></div>\n        <div class=\"lg\"><span class=\"dot green\"></span><b>Precip %</b></div>\n      </div>\n      <div class=\"list\" id=\"list\"></div>\n    </div>\n\n    <p class=\"muted\" style=\"margin-top:14px;\">\n      Source: <a href=\"https://open-meteo.com/\" target=\"_blank\" rel=\"noreferrer\" style=\"color:#79a9ff;text-decoration:none;\">Open-Meteo</a> (no API key).\n    </p>\n  </div>\n\n  <script nonce=\"${nonce}\">\n    const CITIES = ${JSON.stringify(cities)};\n    const vscodeApi = (typeof acquireVsCodeApi === 'function') ? acquireVsCodeApi() : null;\n\n    const $ = (id)=>document.getElementById(id);\n    const citySel=$('city'), btnRefresh=$('btnRefresh');\n    const nowTemp=$('nowTemp'), nowWx=$('nowWx'), nowWind=$('nowWind'), updAt=$('updateAt');\n    const dayMax=$('dayMax'), dayMin=$('dayMin'), list=$('list');\n\n    // WMO weather code -> plain English text + an emoji helper\n    const WMO={\n      0:'Clear',1:'Partly cloudy',2:'Partly cloudy',3:'Overcast',45:'Fog',48:'Depositing rime fog',\n      51:'Drizzle',53:'Drizzle',55:'Drizzle',56:'Freezing drizzle',57:'Freezing drizzle',\n      61:'Rain',63:'Rain',65:'Heavy rain',66:'Freezing rain',67:'Freezing rain',\n      71:'Snow',73:'Snow',75:'Heavy snow',77:'Snow grains',\n      80:'Rain showers',81:'Rain showers',82:'Heavy showers',\n      85:'Snow showers',86:'Heavy snow showers',\n      95:'Thunderstorm',96:'Thunderstorm w/ hail',99:'Severe thunderstorm'\n    };\n    const ICON=(code)=>{ if([0].includes(code))return'☀️'; if([1,2].includes(code))return'⛅';\n      if([3].includes(code))return'☁️'; if([45,48].includes(code))return'🌫️';\n      if([51,53,55,56,57,61,63,65,66,67,80,81,82].includes(code))return'🌧️';\n      if([71,73,75,77,85,86].includes(code))return'❄️'; if([95,96,99].includes(code))return'⛈️'; return'🌡️'; };\n\n    const LS_KEY='sbh_w_sidebar_pref_en';\n    const loadPref=()=>{ try{return JSON.parse(localStorage.getItem(LS_KEY)||'{}');}catch{return{}}};\n    const savePref=(o)=>localStorage.setItem(LS_KEY, JSON.stringify(o));\n    const pref=loadPref(); citySel.value=String(pref.cityIndex??0);\n\n    async function fetchWeather(lat,lon,tz){\n      const url=new URL('https://api.open-meteo.com/v1/forecast');\n      url.searchParams.set('latitude',lat); url.searchParams.set('longitude',lon);\n      url.searchParams.set('timezone',tz||'auto');\n      url.searchParams.set('current_weather','true');\n      url.searchParams.set('hourly','temperature_2m,precipitation_probability,weathercode');\n      url.searchParams.set('forecast_days','2'); // 2 days to ensure enough hours ahead\n      const res=await fetch(url.toString(),{cache:'no-store'}); if(!res.ok) throw new Error('Network '+res.status);\n      return res.json();\n    }\n    const hh=(d)=>String(new Date(d).getHours()).padStart(2,'0')+':00';\n    const fmt=(d)=>new Date(d).toLocaleString();\n\n    async function refresh(){\n      const idx=Number(citySel.value)||0; const c=CITIES[idx]; savePref({cityIndex:idx});\n      const data=await fetchWeather(c.lat,c.lon,c.tz);\n\n      // Current\n      const cw=data.current_weather||{};\n      nowTemp.textContent=(cw.temperature!=null?cw.temperature.toFixed(1):'--')+'°';\n      nowWx.textContent=(ICON(cw.weathercode)+' '+(WMO[cw.weathercode]||'—'));\n      nowWind.textContent=(cw.windspeed!=null?cw.windspeed:'--')+' m/s';\n      updAt.textContent=fmt(new Date());\n      const d=data.daily||{};\n      if(d.temperature_2m_max){ dayMax.textContent=d.temperature_2m_max[0].toFixed(1)+'°'; dayMin.textContent=d.temperature_2m_min[0].toFixed(1)+'°'; }\n\n      // Next 24 hours\n      const h=data.hourly||{}; const times=h.time||[];\n      let start=times.indexOf(cw.time);\n      if(start<0){\n        const now=new Date(); const y=now.getFullYear(),m=now.getMonth(),da=now.getDate(),hr=now.getHours();\n        const isoHour=new Date(y,m,da,hr,0,0).toISOString().slice(0,13);\n        start=times.findIndex(t=>t.startsWith(isoHour));\n        if(start<0) start=0;\n      }\n\n      const items=[];\n      for(let i=0;i<24 && start+i<times.length;i++){\n        const k=start+i;\n        items.push({\n          hh: hh(times[k]),\n          t:  h.temperature_2m?.[k],\n          p:  Math.max(0, Math.min(100, h.precipitation_probability?.[k] ?? 0)),\n          ic: ICON(h.weathercode?.[k])\n        });\n      }\n\n      // Time | Temp | Precip progress | Icon + %\n      list.innerHTML = items.map(it =>\n        '<div class=\"item\" role=\"listitem\">' +\n          '<div class=\"time\">'+ it.hh +'</div>' +\n          '<div class=\"tval\">'+ (it.t!=null?it.t.toFixed(1):'--') +'°</div>' +\n          '<div class=\"bar\" aria-label=\"Precip '+ it.p +'%\"><div class=\"fill\" style=\"width:'+ it.p +'%\"></div></div>' +\n          '<div class=\"emoji\">'+ it.ic +' <span class=\"pct\">'+ it.p +'%</span></div>' +\n        '</div>'\n      ).join('');\n    }\n\n    citySel.addEventListener('change',refresh);\n    btnRefresh.addEventListener('click',refresh);\n\n    refresh().catch(err=>{ updAt.textContent='Load failed: '+String(err).slice(0,80); });\n  </script>\n</body>\n</html>`;\n}\n",
    "tags": [
      "example",
      "tool"
    ]
  },
  {
    "command": "cmd.vd4vsxkib5",
    "text": "$(comment-discussion) Gemini Chat",
    "tooltip": "Chat with Gemini; supports Markdown, file knowledge, and temperature/safety controls.",
    "hidden": true,
    "enableOnInit": false,
    "script": "// Gemini — Copilot Chat (Status Bar Helper script)\n// Storage: API Key is saved in secret; other fields are stored in storage (workspace > global).\n// All keys use prefix gemini_chat.*; responses are rendered in Markdown.\n// When calling Gemini, we include systemInstruction, conversation history, and attachments (text/binary).\n\nconst vscode = require('vscode');\nconst { secret, storage, vm, sidebar } = statusBarHelper.v1;\n\n/* ──────────────── Storage Utilities ──────────────── */\nconst store = (storage && storage.workspace) || (storage && storage.global) || null;\nif (!store) throw new Error('statusBarHelper.v1.storage is not available');\n\nconst K = (name) => `gemini_chat.${name}`;\nconst SECRET_KEY = K('apiKey');\n\nconst FIELD_KEYS = [\n  'customerServiceName', 'tone', 'verbosity', 'banned',\n  'kb', 'kbFiles', 'model', 'temperature', 'maxTokens',\n  'safety', 'history'\n];\n\nasync function sget (name, def) {\n  try { return await store.get(K(name), def); } catch { return def; }\n}\nasync function sset (name, val) {\n  try { await store.set(K(name), val); return null; } catch (e) { return String(e && e.message || e); }\n}\nasync function sremove (name) {\n  try { await store.remove(K(name)); } catch {}\n}\n\n/* ──────────────── Sidebar lifecycle ──────────────── */\n(async function main () {\n  await sidebar.open({\n    html: getHtml(),\n    onClose: (reason) => { if (reason === 'closed') vm.stop(); }\n  });\n  vm.onStop(() => { try { sidebar.close(); } catch {} });\n})();\n\n/* ──────────────── Webview ↔ Host ──────────────── */\nsidebar.onMessage(async (msg) => {\n  try {\n    const t = msg && msg.type;\n\n    if (t === 'ping') {\n      sidebar.postMessage({ type: 'pong' });\n      return;\n    }\n\n    if (t === 'req:init') {\n      const apiKey = (await secret.get(SECRET_KEY)) || '';\n      const [\n        customerServiceName, tone, verbosity, banned,\n        kb, kbFiles, model, temperature, maxTokens,\n        safety, history\n      ] = await Promise.all([\n        sget('customerServiceName', 'Assistant'),\n        sget('tone', 'Friendly & Professional'),\n        sget('verbosity', 'Moderate'),\n        sget('banned', ''),\n        sget('kb', ''),\n        sget('kbFiles', []),\n        sget('model', 'gemini-1.5-flash'),\n        sget('temperature', 0.3),\n        sget('maxTokens', 2048),\n        sget('safety', 'neutral'),\n        sget('history', [])\n      ]);\n\n      sidebar.postMessage({\n        type: 'init',\n        data: {\n          apiKey, customerServiceName, tone, verbosity, banned,\n          kb, kbFiles: Array.isArray(kbFiles) ? kbFiles : [],\n          model, temperature, maxTokens, safety,\n          history: Array.isArray(history) ? history : []\n        }\n      });\n      return;\n    }\n\n    if (t === 'save') {\n      const d = (msg && msg.data) || {};\n      const errors = {};\n\n      // secret\n      try { await secret.set(SECRET_KEY, String(d.apiKey || '')); }\n      catch (e) { errors.apiKey = String(e && e.message || e); }\n\n      // storage\n      for (const k of FIELD_KEYS) {\n        if (!(k in d)) continue;\n        const err = await sset(k, d[k]);\n        if (err) errors[k] = err;\n      }\n\n      sidebar.postMessage({ type: 'saved', errors });\n      return;\n    }\n\n    if (t === 'history.set') {\n      const arr = Array.isArray(msg.history) ? msg.history : [];\n      await sset('history', arr);\n      return;\n    }\n\n    if (t === 'openExternal') {\n      const url = String(msg.url || '');\n      if (url) {\n        try { await vscode.env.openExternal(vscode.Uri.parse(url)); }\n        catch (e) { vscode.window.showWarningMessage('Cannot open link: ' + url); }\n      }\n      return;\n    }\n\n    if (t === 'storage.clearAll') {\n      await Promise.all(FIELD_KEYS.map(sremove));\n      await secret.set(SECRET_KEY, '');\n      sidebar.postMessage({ type: 'saved', errors: {} });\n      return;\n    }\n\n  } catch (e) {\n    try { sidebar.postMessage({ type: 'error', message: String(e && e.message || e) }); } catch {}\n  }\n});\n\n/* ──────────────── HTML (embed webview JS via data:URI) ──────────────── */\nfunction getHtml () {\n  const js = getClientJs();\n  const jsBase64 = Buffer.from(js, 'utf8').toString('base64');\n\n  return [\n'<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/>',\n'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>',\n'<title>Gemini — Copilot Chat</title>',\n'<style>',\n':root{--bg:#0f1115;--panel:#0b0d12;--card:#11141b;--text:#d7dce2;--sub:#9aa3ad;--brand:#5a9cff;--danger:#ff6b6b;--line:#222735}',\n'*{box-sizing:border-box}html,body{height:100%}body{margin:0;background:var(--bg);color:var(--text);font:13px/1.6 system-ui,-apple-system,Segoe UI,Roboto,Inter,Helvetica,Arial}',\n'.wrap{height:100vh;display:grid;grid-template-rows:auto 1fr auto}',\n'header{display:flex;gap:10px;align-items:center;padding:10px 12px;background:var(--panel);border-bottom:1px solid var(--line)}',\n'.title{font-weight:600;margin-right:auto}',\n'select,button,input[type=\"text\"],input[type=\"password\"],textarea{background:#0f1420;color:var(--text);border:1px solid var(--line);border-radius:10px;padding:6px 10px}',\n'button{cursor:pointer}.ghost{background:transparent}.danger{background:#341315;border-color:#522322;color:#ffd1cf}',\n'.content{padding:14px;overflow:auto}.bubble{max-width:860px;margin:0 auto 12px;background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px 14px}',\n'.role{font-size:11px;color:var(--sub);margin-bottom:6px}',\n'.composer{position:sticky;bottom:0;background:linear-gradient(180deg,transparent,rgba(15,17,21,.95));border-top:1px solid var(--line);padding:10px 12px}',\n'.box{max-width:900px;margin:0 auto;background:var(--panel);border:1px solid var(--line);border-radius:14px;padding:10px;display:grid;grid-template-columns:1fr auto;gap:10px}',\n'.tools{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:8px;align-items:center}',\n'textarea{width:100%;min-height:68px;max-height:180px;resize:vertical;background:#0f1420;border:1px solid var(--line);color:var(--text);border-radius:10px;padding:10px}',\n'.actions{display:flex;gap:8px}.btn{padding:8px 14px;border-radius:10px}.primary{background:var(--brand);border-color:#2a64ff;color:#fff}.hidden{display:none}',\n'.modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center}',\n'.card{width:640px;background:#11141b;border:1px solid var(--line);border-radius:14px;padding:16px}.grid{display:grid;grid-template-columns:140px 1fr;gap:10px;align-items:center}',\n'.atts{display:flex;gap:6px;flex-wrap:wrap}.chip{display:inline-flex;align-items:center;gap:6px;padding:4px 8px;border-radius:999px;border:1px solid var(--line);background:#0f1420}.x{cursor:pointer;opacity:.8}',\n'.muted{color:#9aa3ad}',\n\n/* Markdown styles */\n'.md{line-height:1.65;word-wrap:break-word}',\n'.md h1{font-size:20px;margin:12px 0 6px} .md h2{font-size:18px;margin:12px 0 6px} .md h3{font-size:16px;margin:10px 0 6px}',\n'.md p{margin:6px 0} .md ul,.md ol{margin:6px 0 6px 22px} .md li{margin:4px 0}',\n'.md code{font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;background:#0b1020;border:1px solid #23304b;padding:1px 5px;border-radius:6px}',\n'.md pre{background:#0b1020;border:1px solid #23304b;border-radius:10px;padding:10px;overflow:auto}',\n'.md pre code{background:transparent;border:0;padding:0}',\n'.md blockquote{margin:6px 0;padding:6px 10px;border-left:3px solid #324457;background:rgba(255,255,255,.03);border-radius:6px}',\n'.md a{color:#8ab4ff;text-decoration:underline} .md hr{border:0;border-top:1px solid var(--line);margin:10px 0}',\n'</style>',\n'</head><body>',\n'  <div class=\"wrap\">',\n'    <header>',\n'      <div class=\"title\">Gemini — Copilot Chat</div>',\n'      <div>Model <select id=\"model\"><option value=\"gemini-1.5-flash\" selected>gemini-1.5-flash</option><option value=\"gemini-1.5-pro\">gemini-1.5-pro</option></select></div>',\n'      <button id=\"btnSettings\" class=\"ghost\">Settings</button>',\n'      <button id=\"btnClear\" class=\"ghost danger\">Clear Chat</button>',\n'    </header>',\n'    <div id=\"content\" class=\"content\"></div>',\n'    <div class=\"composer\"><div class=\"box\">',\n'      <div>',\n'        <div class=\"tools\">',\n'          <span>Temperature <input id=\"temp\" type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" value=\"0.3\"> <span id=\"tempV\">0.3</span></span>',\n'          <span>Max Tokens <input id=\"tokens\" type=\"range\" min=\"256\" max=\"8192\" step=\"64\" value=\"2048\"> <span id=\"tokensV\">2048</span></span>',\n'          <span>Safety <select id=\"safety\"><option value=\"relaxed\">Relaxed</option><option value=\"neutral\" selected>Neutral</option><option value=\"strict\">Strict</option></select></span>',\n'          <input id=\"file\" type=\"file\" multiple class=\"hidden\"/> <button id=\"btnFile\" class=\"ghost\">Attach</button> <div id=\"attList\" class=\"atts\"></div>',\n'        </div>',\n'        <textarea id=\"input\" placeholder=\"Type a message… Enter to send; Shift+Enter for newline\"></textarea>',\n'      </div>',\n'      <div class=\"actions\"><button id=\"btnStop\" class=\"btn hidden\">Stop</button><button id=\"btnSend\" class=\"btn primary\">Send</button></div>',\n'    </div></div>',\n'  </div>',\n\n'  <div id=\"dlg\" class=\"modal\"><div class=\"card\">',\n'    <h3 style=\"margin:0 0 8px 0\">Settings</h3>',\n'    <div class=\"grid\">',\n'      <label for=\"apiKey\">Gemini API Key</label><input id=\"apiKey\" type=\"password\" placeholder=\"AI...\">',\n'      <label for=\"agentName\">Agent Name</label><input id=\"agentName\" type=\"text\" placeholder=\"e.g., Assistant\">',\n'      <label for=\"tone\">Tone</label><select id=\"tone\"><option>Friendly & Professional</option><option>Casual</option><option>Formal</option><option>Technical</option></select>',\n'      <label for=\"verbosity\">Verbosity</label><select id=\"verbosity\"><option>Concise</option><option selected>Moderate</option><option>Detailed</option></select>',\n'      <label for=\"banned\">Banned Words</label><textarea id=\"banned\" rows=\"2\" placeholder=\"Comma separated, e.g., guarantee, absolutely\"></textarea>',\n'      <label for=\"kb\">Knowledge Base</label><textarea id=\"kb\" rows=\"4\" placeholder=\"Paste FAQ / doc snippets; will be added to the system prompt.\"></textarea>',\n'      <label>Reference Files</label>',\n'      <div><input id=\"kbFile\" type=\"file\" multiple class=\"hidden\"/> <button id=\"btnKbAdd\" class=\"ghost\">Add File</button> <div id=\"kbList\" class=\"atts\" style=\"margin-top:8px\"></div> <p class=\"muted\" style=\"margin:6px 0 0\">Recommended &lt; 1MB per file. Text files are injected directly; images/binaries are sent as inlineData.</p></div>',\n'    </div>',\n'    <p class=\"muted\" style=\"margin:10px 0 0\">API Key is stored in secret; others are stored in workspace storage (or global if unavailable).</p>',\n'    <div style=\"display:flex;gap:8px;justify-content:flex-end;margin-top:10px\"><button id=\"btnSave\" class=\"btn primary\">Save</button></div>',\n'  </div></div>',\n\n`<script src=\"data:text/javascript;base64,${jsBase64}\"></script>`,\n'</body></html>'\n  ].join('');\n}\n\n/* ──────────────── Webview script (data:URI) ──────────────── */\nfunction getClientJs () {\n  return `\n(function(){\n  // ===== Bridge & Polyfills =====\n  var vscode = acquireVsCodeApi();\n  function send(type, data){ var o=data||{}; o.type=type; vscode.postMessage(o); }\n  function $(s){ return document.querySelector(s); }\n\n  if (typeof window.URL === 'undefined' && typeof self !== 'undefined') { window.URL = self.URL; }\n  var AbortC = (typeof AbortController !== 'undefined') ? AbortController : null;\n\n  // ===== Elements =====\n  var dlg=$(\"#dlg\"), btnSave=$(\"#btnSave\"), btnSettings=$(\"#btnSettings\"), btnClear=$(\"#btnClear\");\n  var apiKeyEl=$(\"#apiKey\"), agentNameEl=$(\"#agentName\"), toneEl=$(\"#tone\"), verbEl=$(\"#verbosity\"), bannedEl=$(\"#banned\"), kbEl=$(\"#kb\");\n  var kbList=$(\"#kbList\"), kbFileEl=$(\"#kbFile\"), btnKbAdd=$(\"#btnKbAdd\");\n  var modelSel=$(\"#model\"), temp=$(\"#temp\"), tempV=$(\"#tempV\"), tokens=$(\"#tokens\"), tokensV=$(\"#tokensV\"), safetySel=$(\"#safety\");\n  var content=$(\"#content\"), inputEl=$(\"#input\"), btnSend=$(\"#btnSend\"), btnStop=$(\"#btnStop\");\n  var attList=$(\"#attList\"), fileEl=$(\"#file\"), btnFile=$(\"#btnFile\");\n\n  var state={\n    apiKey:\"\", customerServiceName:\"Assistant\", tone:\"Friendly & Professional\", verbosity:\"Moderate\", banned:\"\",\n    kb:\"\", kbFiles:[],\n    attFiles:[], // temporary attachments per-message\n    model:\"gemini-1.5-flash\", temperature:0.3, maxTokens:2048, safety:\"neutral\", history:[]\n  };\n\n  // ===== Toast =====\n  function toast(t){\n    var d=document.createElement('div');\n    d.textContent=t;\n    d.style.cssText='position:fixed;right:12px;bottom:12px;background:#183a2e;border:1px solid #2f5d4b;color:#fff;padding:8px 10px;border-radius:8px;z-index:9;opacity:.98';\n    document.body.appendChild(d);\n    setTimeout(function(){d.remove();},2200);\n  }\n\n  // ===== Minimal Markdown renderer =====\n  function escapeHtml(s){ return String(s).replace(/[&<>\"]/g, function(c){return c==='&'?'&amp;':c==='<'?'&lt;':c==='>'?'&gt;':'&quot;';}); }\n  function mdLinks(html){\n    return html.replace(/\\\\[([^\\\\]]+)\\\\]\\\\(([^)\\\\s]+)\\\\)/g, function(_,text,url){\n      var safe = escapeHtml(text); var u = escapeHtml(url);\n      return '<a href=\"'+u+'\" data-ext=\"'+u+'\">'+safe+'</a>';\n    });\n  }\n  function mdInline(html){\n    html = html.replace(/\\\\\\`([^\\\\\\`]+)\\\\\\`/g, '<code>$1</code>');\n    html = html.replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, '<strong>$1</strong>');\n    html = html.replace(/\\\\*([^*]+)\\\\*/g, '<em>$1</em>');\n    return mdLinks(html);\n  }\n  function renderMarkdown(src){\n    if(!src) return '';\n    var s = escapeHtml(String(src));\n    s = s.replace(/\\\\n?\\\\\\`\\\\\\`\\\\\\`([a-zA-Z0-9_-]+)?\\\\n([\\\\s\\\\S]*?)\\\\n\\\\\\`\\\\\\`\\\\\\`/g,\n      function(_,lang,code){ return '<pre><code class=\"lang-'+(lang||'')+'\">'+code.replace(/</g,'&lt;')+'</code></pre>'; });\n\n    var out=[], lines=s.split(/\\\\r?\\\\n/), i=0;\n    while(i<lines.length){\n      var line=lines[i];\n      var m=line.match(/^(#{1,6})\\\\s+(.*)$/);\n      if(m){ out.push('<h'+m[1].length+'>'+mdInline(m[2])+'</h'+m[1].length+'>'); i++; continue; }\n      if(/^>\\\\s?/.test(line)){ var buf=[]; while(i<lines.length && /^>\\\\s?/.test(lines[i])){ buf.push(lines[i].replace(/^>\\\\s?/, '')); i++; } out.push('<blockquote>'+mdInline(buf.join('\\\\n'))+'</blockquote>'); continue; }\n      if(/^\\\\s*[-*+]\\\\s+/.test(line)){ var items=[]; while(i<lines.length && /^\\\\s*[-*+]\\\\s+/.test(lines[i])){ items.push('<li>'+mdInline(lines[i].replace(/^\\\\s*[-*+]\\\\s+/, ''))+'</li>'); i++; } out.push('<ul>'+items.join('')+'</ul>'); continue; }\n      if(/^\\\\s*\\\\d+\\\\.\\\\s+/.test(line)){ var items2=[]; while(i<lines.length && /^\\\\s*\\\\d+\\\\.\\\\s+/.test(lines[i])){ items2.push('<li>'+mdInline(lines[i].replace(/^\\\\s*\\\\d+\\\\.\\\\s+/, ''))+'</li>'); i++; } out.push('<ol>'+items2.join('')+'</ol>'); continue; }\n      if(/^\\\\s*([-*_])\\\\1{2,}\\\\s*$/.test(line)){ out.push('<hr/>'); i++; continue; }\n      if(line.trim().length){ var buf2=[line]; i++; while(i<lines.length && lines[i].trim().length && !/^(#{1,6})\\\\s+|^>\\\\s?|^\\\\s*[-*+]\\\\s+|^\\\\s*\\\\d+\\\\.\\\\s+|^\\\\s*([-*_])\\\\1{2,}\\\\s*$/.test(lines[i])){ buf2.push(lines[i]); i++; } out.push('<p>'+mdInline(buf2.join(' '))+'</p>'); continue; }\n      i++;\n    }\n    return '<div class=\"md\">'+out.join('')+'</div>';\n  }\n\n  function hookExternalLinks(root){\n    (root||document).querySelectorAll('a[data-ext]').forEach(function(a){\n      a.addEventListener('click', function(ev){\n        ev.preventDefault();\n        var url = a.getAttribute('data-ext') || a.href;\n        if(url){ send('openExternal', { url:url }); }\n      });\n    });\n  }\n\n  // ===== Chat bubbles =====\n  function addBubble(role, html){\n    var wrap=document.createElement('div'); wrap.className='bubble';\n    var r=document.createElement('div'); r.className='role'; r.textContent = (role==='user'?'You':'Gemini'); wrap.appendChild(r);\n    var b=document.createElement('div'); b.className='body'; b.innerHTML = html; wrap.appendChild(b);\n    content.appendChild(wrap);\n    content.scrollTop=content.scrollHeight;\n    hookExternalLinks(b);\n    return b;\n  }\n  function addUser(text){ return addBubble('user', renderMarkdown(text)); }\n  function addBot(text){ return addBubble('assistant', renderMarkdown(text)); }\n  function addBotThinking(){ return addBubble('assistant', '<div class=\"md\"><em>…thinking</em></div>'); }\n  function replaceBody(el, text){ if(!el) return; el.innerHTML = renderMarkdown(text); hookExternalLinks(el); }\n\n  // ===== Init messages from host =====\n  window.addEventListener('message', function(e){\n    var m=e.data||{};\n    if(m.type==='init'){\n      Object.assign(state, m.data||{});\n      apiKeyEl.value=state.apiKey||'';\n      agentNameEl.value=state.customerServiceName||'';\n      toneEl.value=state.tone||'Friendly & Professional';\n      verbEl.value=state.verbosity||'Moderate';\n      bannedEl.value=state.banned||'';\n      kbEl.value=state.kb||'';\n      modelSel.value=state.model||'gemini-1.5-flash';\n      temp.value=String(state.temperature||0.3); tempV.textContent=temp.value;\n      tokens.value=String(state.maxTokens||2048); tokensV.textContent=tokens.value;\n      safetySel.value=state.safety||'neutral';\n      renderKbList(); renderAttList(); renderHistory();\n    }\n    if(m.type==='saved'){\n      if(m.errors && Object.keys(m.errors).length){ toast('Some fields failed to save (see Console).'); console.log('[saved errors]', m.errors); }\n      else toast('Saved.');\n      dlg.style.display='none';\n    }\n    if(m.type==='error'){ toast('Error: '+(m.message||'')); }\n  });\n\n  function renderHistory(){\n    content.innerHTML='';\n    (state.history||[]).forEach(function(x){ addBubble(x.role, renderMarkdown(x.content||'')); });\n  }\n\n  // ===== File helpers (shared) =====\n  function isTextLike(file){\n    if (file.type && file.type.indexOf('text/') === 0) return true;\n    var n=file.name||''; return /\\\\.(txt|md|markdown|csv|json|log|yaml|yml|xml|html|css|js|ts|tsx|jsx|py|rb|php|java|kt|go|rs|c|cpp|h|hpp|cs|sql)$/i.test(n);\n  }\n  function toBase64FromDataURL(s){ var i=s.indexOf(','); return i>=0 ? s.slice(i+1) : s; }\n\n  function readFilesTo(targetArr, files, onDone){\n    var max=1024*1024, list=[].slice.call(files||[]), pending=list.length; if(!pending){ onDone&&onDone(); return; }\n    for(var k=0;k<list.length;k++){\n      (function(file){\n        if(file.size>max){ pending--; if(!pending) onDone&&onDone(); return; }\n        var item={ name:file.name, size:file.size, mime:(file.type||'application/octet-stream'), kind:'text', text:'', base64:'' };\n        if(isTextLike(file)){\n          var fr=new FileReader();\n          fr.onload=function(){ item.kind='text'; item.text=String(fr.result||''); targetArr.push(item); pending--; if(!pending) onDone&&onDone(); };\n          fr.onerror=function(){ pending--; if(!pending) onDone&&onDone(); };\n          fr.readAsText(file);\n        }else{\n          var fr2=new FileReader();\n          fr2.onload=function(){ item.kind='binary'; item.base64=toBase64FromDataURL(String(fr2.result||'')); targetArr.push(item); pending--; if(!pending) onDone&&onDone(); };\n          fr2.onerror=function(){ pending--; if(!pending) onDone&&onDone(); };\n          fr2.readAsDataURL(file);\n        }\n      })(list[k]);\n    }\n  }\n\n  // ===== KB files (settings dialog) =====\n  function renderKbList(){\n    kbList.innerHTML=(state.kbFiles||[]).map(function(a,idx){\n      var sz=a.size?(Math.round(a.size/1024)+'KB'):'';\n      return '<span class=\"chip\" data-i=\"'+idx+'\">'+ (a.name||'file') +' <span class=\"muted\">'+sz+'</span> <span class=\"x\" title=\"Remove\">✕</span></span>';\n    }).join('');\n    var xs=kbList.querySelectorAll('.chip .x');\n    for(var i=0;i<xs.length;i++){\n      xs[i].addEventListener('click', function(ev){\n        var p=ev.target.closest('.chip'); var ii=Number(p.getAttribute('data-i'));\n        state.kbFiles.splice(ii,1); renderKbList();\n      });\n    }\n  }\n  btnKbAdd.addEventListener('click', function(){ kbFileEl.click(); });\n  kbFileEl.addEventListener('change', function(){ readFilesTo(state.kbFiles, kbFileEl.files, renderKbList); kbFileEl.value=''; });\n\n  // ===== Temporary chat attachments =====\n  function renderAttList(){\n    attList.innerHTML=(state.attFiles||[]).map(function(a,idx){\n      var sz=a.size?(Math.round(a.size/1024)+'KB'):'';\n      return '<span class=\"chip\" data-i=\"'+idx+'\">'+ (a.name||'file') +' <span class=\"muted\">'+sz+'</span> <span class=\"x\" title=\"Remove\">✕</span></span>';\n    }).join('');\n    var xs=attList.querySelectorAll('.chip .x');\n    for(var i=0;i<xs.length;i++){\n      xs[i].addEventListener('click', function(ev){\n        var p=ev.target.closest('.chip'); var ii=Number(p.getAttribute('data-i'));\n        state.attFiles.splice(ii,1); renderAttList();\n      });\n    }\n  }\n  btnFile.addEventListener('click', function(){ fileEl.click(); });\n  fileEl.addEventListener('change', function(){ readFilesTo(state.attFiles, fileEl.files, renderAttList); fileEl.value=''; });\n\n  // ===== Prompt builders =====\n  function buildSystemText(state) {\n    const name = state.customerServiceName || 'Assistant';\n    const tone = state.tone || 'Friendly & Professional';\n    const verbosity = state.verbosity || 'Moderate';\n    const banned = String(state.banned || '').split(/[，,、\\\\s]+/).filter(Boolean);\n\n    const lines = [\n      'You are \"' + name + '\". Reply in English.',\n      'Tone: ' + tone + '.',\n      (verbosity === 'Concise'\n        ? 'Keep answers concise (about 2–4 lines) with bullet points.'\n        : (verbosity === 'Detailed'\n          ? 'Answers can be more detailed. Include steps and small examples when useful.'\n          : 'Keep a moderate length with clear bullet points.')),\n      (banned.length ? ('Avoid the following words: ' + banned.join(', ') + '. If needed, paraphrase.') : '')\n    ];\n    if (state.kb) lines.push('Reference materials (quote when relevant):\\\\n' + state.kb);\n    return lines.filter(Boolean).join('\\\\n\\\\n');\n  }\n\n  function mapHistoryToContents(history){\n    return (history||[]).slice(-10).map(function(m){\n      return { role: (m.role === 'assistant' ? 'model' : 'user'), parts: [{ text: String(m.content || '') }] };\n    });\n  }\n\n  function buildUserPartsWithRefs(prompt, kbFiles, attFiles){\n    var parts = [];\n    // persistent kb files\n    (kbFiles||[]).forEach(function(f){\n      if (f && f.kind === 'text' && f.text) {\n        parts.push({ text: '[KB: ' + (f.name||'file') + ']\\\\n' + String(f.text) });\n      } else if (f && f.base64) {\n        parts.push({ text: '[KB (non-text)]: ' + (f.name||'file') });\n        parts.push({ inlineData: { mimeType: (f.mime||'application/octet-stream'), data: f.base64 } });\n      }\n    });\n    // per-message attachments\n    (attFiles||[]).forEach(function(f){\n      if (f && f.kind === 'text' && f.text) {\n        parts.push({ text: '[Attachment: ' + (f.name||'file') + ']\\\\n' + String(f.text) });\n      } else if (f && f.base64) {\n        parts.push({ text: '[Attachment (non-text)]: ' + (f.name||'file') });\n        parts.push({ inlineData: { mimeType: (f.mime||'application/octet-stream'), data: f.base64 } });\n      }\n    });\n    parts.push({ text: String(prompt||'') });\n    return parts;\n  }\n\n  // ===== Call Gemini =====\n  var inflight = null;\n  function setBusy(on){\n    btnSend.disabled = on;\n    btnStop.classList.toggle('hidden', !on);\n    inputEl.disabled = on;\n  }\n\n  async function callGemini(prompt){\n    var apiKey = state.apiKey || '';\n    if(!apiKey){ toast('Please set your Gemini API Key in Settings first.'); return '(error) API Key is not configured.'; }\n\n    var url = 'https://generativelanguage.googleapis.com/v1beta/models/'\n      + encodeURIComponent(state.model||'gemini-1.5-flash')\n      + ':generateContent?key=' + encodeURIComponent(apiKey);\n\n    var thr = (state.safety === 'strict')\n      ? 'BLOCK_MEDIUM_AND_ABOVE'\n      : (state.safety === 'relaxed' ? 'BLOCK_NONE' : 'BLOCK_ONLY_HIGH');\n\n    var payload = {\n      systemInstruction: { parts: [{ text: buildSystemText(state) }] },\n      contents: [\n        ...mapHistoryToContents(state.history),\n        { role: 'user', parts: buildUserPartsWithRefs(prompt, state.kbFiles, state.attFiles) }\n      ],\n      generationConfig: {\n        temperature: Number(state.temperature||0.3),\n        maxOutputTokens: Number(state.maxTokens||2048)\n      },\n      safetySettings: [\n        { category: 'HARM_CATEGORY_HATE_SPEECH',       threshold: thr },\n        { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: thr },\n        { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: thr },\n        { category: 'HARM_CATEGORY_HARASSMENT',        threshold: thr },\n        { category: 'HARM_CATEGORY_CIVIC_INTEGRITY',   threshold: thr }\n      ]\n    };\n\n    var opts = { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) };\n    if (AbortC){ inflight = new AbortC(); opts.signal = inflight.signal; } else { inflight = { abort:function(){} }; }\n\n    try{\n      var res = await fetch(url, opts);\n      if(!res.ok){ throw new Error('HTTP '+res.status+' : '+(await res.text())); }\n      var j = await res.json();\n      var text = j && j.candidates && j.candidates[0] && j.candidates[0].content && j.candidates[0].content.parts && j.candidates[0].content.parts[0] && j.candidates[0].content.parts[0].text || '';\n      return text || '(no content)';\n    }catch(e){\n      return '(error) ' + (e && e.message || String(e));\n    }finally{\n      inflight = null;\n    }\n  }\n\n  async function onSend(){\n    var msg = (inputEl.value||'').trim();\n    if(!msg) return;\n    inputEl.value='';\n    addUser(msg);\n    var thinkingBody = addBotThinking();\n    setBusy(true);\n    var reply = await callGemini(msg);\n    replaceBody(thinkingBody, reply);\n    state.history.push({ role:'user', content:msg });\n    state.history.push({ role:'assistant', content:reply });\n    send('history.set', { history: state.history });\n    setBusy(false);\n    // If you prefer clearing attachments after each send, uncomment:\n    // state.attFiles = []; renderAttList();\n  }\n\n  // ===== IME guard =====\n  var __imeComposing = false;\n  inputEl.addEventListener('compositionstart', function(){ __imeComposing = true; });\n  inputEl.addEventListener('compositionend',   function(){ __imeComposing = false; });\n  inputEl.addEventListener('keydown', function(e){\n    if (__imeComposing && e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }, true);\n  (function(){ var __origOnSend = onSend; onSend = function(){ if(__imeComposing) return; return __origOnSend.apply(this, arguments); }; })();\n\n  // ===== Events =====\n  btnSend.addEventListener('click', onSend);\n  inputEl.addEventListener('keydown', function(ev){\n    if(ev.key==='Enter' && !ev.shiftKey){ ev.preventDefault(); onSend(); }\n  });\n  btnStop.addEventListener('click', function(){\n    if(inflight && inflight.abort) try{ inflight.abort(); }catch{}\n    setBusy(false);\n  });\n\n  // ===== Save settings =====\n  btnSave.addEventListener('click', function(){\n    state.apiKey=(apiKeyEl.value||'').trim();\n    state.customerServiceName=(agentNameEl.value||'').trim();\n    state.tone=toneEl.value||'Friendly & Professional';\n    state.verbosity=verbEl.value||'Moderate';\n    state.banned=(bannedEl.value||'').trim();\n    state.kb=(kbEl.value||'').trim();\n    state.model=modelSel.value||'gemini-1.5-flash';\n    state.temperature=Number(temp.value||0.3);\n    state.maxTokens=Number(tokens.value||2048);\n    state.safety=safetySel.value||'neutral';\n    send('save',{data:{\n      apiKey:state.apiKey, customerServiceName:state.customerServiceName, tone:state.tone, verbosity:state.verbosity, banned:state.banned, kb:state.kb, kbFiles:state.kbFiles, model:state.model, temperature:state.temperature, maxTokens:state.maxTokens, safety:state.safety\n    }});\n  });\n\n  // ===== Misc UI =====\n  btnSettings.addEventListener('click', function(){ dlg.style.display='flex'; setTimeout(function(){ apiKeyEl.focus(); },0); });\n  btnClear.addEventListener('click', function(){ state.history=[]; send('history.set',{history:[]}); content.innerHTML=''; });\n  temp.addEventListener('input', function(){ tempV.textContent=temp.value; });\n  tokens.addEventListener('input', function(){ tokensV.textContent=tokens.value; });\n\n  // Handshake\n  send('ping'); send('req:init');\n})();\n`;\n}\n",
    "tags": [
      "tool"
    ]
  },
  {
    "command": "cmd.cjkmnz5vse",
    "text": "$(vm) System Monitor",
    "tooltip": "Displays current CPU and RAM usage",
    "hidden": true,
    "enableOnInit": false,
    "script": "// SBH — System Monitor: Status Bar + Sidebar (Persistent mode/frequency, English labels, compact layout)\n// - Status bar: CPU shows only $(pulse); RAM shows $(server)\n// - Display mode: percent | detail (RAM used/total + percent), persisted via storage.global\n// - Refresh interval: 0.5s / 1s / 2s / 5s, persisted via storage.global\n// - Sidebar: sections \"System Overview\" (English labels), per-core bars, memory details; tighter spacing\n\nconst vscode = require(\"vscode\");\nconst os = require(\"os\");\nconst { monitorEventLoopDelay } = require(\"perf_hooks\");\nconst { setInterval, clearInterval, setTimeout, clearTimeout } = require(\"timers\");\nconst { vm, sidebar, storage } = statusBarHelper.v1;\n\n(function main() {\n  const K_MODE = \"sbh.sys.monitor.mode\";\n  const K_INTERVAL = \"sbh.sys.monitor.intervalMs\";\n\n  const item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1000);\n  item.name = \"System Monitor\";\n  item.command = \"sbh.sys.monitor.menu\";\n  item.tooltip = \"System Monitor: click to toggle mode / adjust refresh rate / pause / open sidebar\";\n  item.show();\n\n  let mode = \"percent\";          \n  let intervalMs = 1000;         \n  let paused = false;\n  let timer = null, warmupT = null;\n\n  const eld = monitorEventLoopDelay({ resolution: 10 });\n  eld.enable();\n\n  (async () => {\n    try {\n      const savedMode = await storage.global.get(K_MODE);\n      if (savedMode === \"percent\" || savedMode === \"detail\") mode = savedMode;\n    } catch {}\n    try {\n      const savedInterval = await storage.global.get(K_INTERVAL);\n      if ([500, 1000, 2000, 5000].includes(savedInterval)) intervalMs = savedInterval;\n    } catch {}\n    startLoop();\n  })();\n\n  const disposables = [];\n  disposables.push(\n    vscode.commands.registerCommand(\"sbh.sys.monitor.menu\", async () => {\n      const pick = await vscode.window.showQuickPick(\n        [\n          { label: mode === \"percent\" ? \"Switch to: Detail Mode\" : \"Switch to: Percent Mode\", value: \"toggleMode\" },\n          { label: \"Open Sidebar (Details)\", value: \"openSidebar\" },\n          { label: intervalMs === 500 ? \"✓ Every 0.5s\" : \"Every 0.5s\", value: 500 },\n          { label: intervalMs === 1000 ? \"✓ Every 1s\" : \"Every 1s\", value: 1000 },\n          { label: intervalMs === 2000 ? \"✓ Every 2s\" : \"Every 2s\", value: 2000 },\n          { label: intervalMs === 5000 ? \"✓ Every 5s\" : \"Every 5s\", value: 5000 },\n          { label: paused ? \"▶ Resume\" : \"⏸ Pause\", value: \"toggle\" },\n          { label: \"✖ Close (Stop Script)\", value: \"stop\" },\n        ],\n        { placeHolder: \"System Monitor: display mode / refresh rate / sidebar\" }\n      );\n      if (!pick) return;\n\n      if (pick.value === \"toggleMode\") {\n        mode = mode === \"percent\" ? \"detail\" : \"percent\";\n        try { await storage.global.set(K_MODE, mode); } catch {}\n        tick();\n        return;\n      }\n      if (pick.value === \"openSidebar\") { openSidebar(); return; }\n      if (pick.value === \"toggle\") {\n        paused = !paused;\n        if (paused) { stopLoop(); tick({ paused: true }); item.tooltip = \"Paused (click to resume or adjust)\"; }\n        else { item.tooltip = \"System Monitor: click to toggle mode / adjust refresh rate / pause / open sidebar\"; startLoop(); }\n        return;\n      }\n      if (pick.value === \"stop\") { try { vm.stop(); } catch {} return; }\n\n      if (typeof pick.value === \"number\") {\n        intervalMs = pick.value;\n        try { await storage.global.set(K_INTERVAL, intervalMs); } catch {}\n        if (!paused) startLoop();\n      }\n    })\n  );\n\n  let prevTotal = snapshotCpuTotal();\n  let prevCores = snapshotCpuCores();\n\n  function snapshotCpuTotal() {\n    const list = os.cpus();\n    let idle = 0, total = 0;\n    for (const c of list) {\n      const t = c.times;\n      idle += t.idle;\n      total += t.user + t.nice + t.sys + t.irq + t.idle;\n    }\n    return { idle, total };\n  }\n  function snapshotCpuCores() {\n    return os.cpus().map(c => {\n      const t = c.times;\n      return { idle: t.idle, total: t.user + t.nice + t.sys + t.irq + t.idle };\n    });\n  }\n  function cpuPercentTotal() {\n    const cur = snapshotCpuTotal();\n    const idleDelta = cur.idle - prevTotal.idle;\n    const totalDelta = cur.total - prevTotal.total;\n    prevTotal = cur;\n    return totalDelta > 0 ? clamp01(1 - idleDelta / totalDelta) : 0;\n  }\n  function cpuPercentPerCore() {\n    const cur = snapshotCpuCores();\n    const out = cur.map((c, i) => {\n      const idleDelta = c.idle - prevCores[i].idle;\n      const totalDelta = c.total - prevCores[i].total;\n      return totalDelta > 0 ? clamp01(1 - idleDelta / totalDelta) : 0;\n    });\n    prevCores = cur;\n    return out;\n  }\n\n  function memStats() {\n    const total = os.totalmem();\n    const free  = os.freemem();\n    const used  = Math.max(0, total - free);\n    const pct   = total > 0 ? used / total : 0;\n    return { total, free, used, pct: clamp01(pct) };\n  }\n\n  function clamp01(x){ return x < 0 ? 0 : x > 1 ? 1 : x; }\n  function pct0(p){ return (p * 100).toFixed(0) + \"%\"; }\n  function pct1(p){ return (p * 100).toFixed(1) + \"%\"; }\n  function bytesToGB(n){ return (n / (1024 ** 3)).toFixed(1) + \" GB\"; }\n  function formatUptime(sec){\n    const d = Math.floor(sec / 86400);\n    const h = Math.floor((sec % 86400) / 3600);\n    const m = Math.floor((sec % 3600) / 60);\n    return `${d}d ${h}h ${m}m`;\n  }\n\n  function renderText(cpuPct, mem, opt = {}) {\n    const pausedMark = opt.paused ? \" ⏸\" : \"\";\n    if (mode === \"detail\") {\n      return `$(pulse) ${pct0(cpuPct)} · $(server) ${bytesToGB(mem.used)}/${bytesToGB(mem.total)} (${pct0(mem.pct)})${pausedMark}`;\n    }\n    return `$(pulse) ${pct0(cpuPct)} · $(server) ${pct0(mem.pct)}${pausedMark}`;\n  }\n\n  function renderTooltip(cpuPct, mem) {\n    const la = os.loadavg?.() || [];\n    const pm = process.memoryUsage?.() || {};\n    const pmStr = pm.rss ? `Process RSS: ${bytesToGB(pm.rss)}` : \"\";\n    return [\n      `CPU: ${pct1(cpuPct)}`,\n      mode === \"detail\"\n        ? `Memory: ${bytesToGB(mem.used)} / ${bytesToGB(mem.total)} (${pct1(mem.pct)})`\n        : `Memory: ${pct1(mem.pct)} (Used ${bytesToGB(mem.used)} / Total ${bytesToGB(mem.total)})`,\n      `Load Avg: ${la.map(n => n.toFixed(2)).join(\" / \")}`,\n      pmStr,\n      `Uptime: ${formatUptime(os.uptime?.() || 0)}`,\n      \"Click to switch mode / adjust refresh rate / pause / open sidebar\",\n    ].filter(Boolean).join(\"\\n\");\n  }\n\n  let lastCpuPct = 0, lastMem = memStats(), lastCoresPct = [];\n  function tick(opt={}) {\n    const cpu = cpuPercentTotal();\n    const cores = cpuPercentPerCore();\n    const mem = memStats();\n    lastCpuPct = cpu; lastMem = mem; lastCoresPct = cores;\n\n    item.text = renderText(cpu, mem, opt);\n    item.tooltip = renderTooltip(cpu, mem);\n\n    if (_sidebarOpen) {\n      const ldMean = Math.max(0, eld.mean / 1e6 || 0);\n      const ldP95  = Math.max(0, eld.percentiles?.[95] / 1e6 || 0);\n      sidebar.postMessage({\n        type: \"metrics\",\n        payload: {\n          ts: Date.now(),\n          cpuPct: cpu,\n          coresPct: cores,\n          mem,\n          loadavg: os.loadavg?.() || [],\n          uptime: os.uptime?.() || 0,\n          arch: os.arch?.() || \"\",\n          platform: os.platform?.() || \"\",\n          release: os.release?.() || \"\",\n          cpumodel: (os.cpus?.()[0]?.model) || \"\",\n          elDelay: { meanMs: +ldMean.toFixed(2), p95Ms: +ldP95.toFixed(2) },\n        },\n      });\n    }\n  }\n  function startLoop() {\n    stopLoop();\n    warmupT = setTimeout(() => { tick(); timer = setInterval(tick, intervalMs); }, 400);\n  }\n  function stopLoop() {\n    if (timer) { clearInterval(timer); timer = null; }\n    if (warmupT) { clearTimeout(warmupT); warmupT = null; }\n  }\n\n  let _sidebarOpen = false;\n  async function openSidebar() {\n    const html = buildSidebarHTML();\n    await sidebar.open({\n      html,\n      focus: true,\n      onClose: () => { _sidebarOpen = false; },\n    });\n    _sidebarOpen = true;\n  }\n\n  function buildSidebarHTML() {\n    const nonce = Math.random().toString(36).slice(2);\n    return `\n<meta http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n<style>\n  :root {\n    --fg: var(--vscode-foreground, #ddd);\n    --muted: #9aa0a6;\n    --card: rgba(255,255,255,0.04);\n    --barBg: rgba(255,255,255,0.10);\n  }\n  body { font: 13px/1.6 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial; color: var(--fg);}\n  h2 { margin: 0 0 8px; font-size: 16px; }\n  .section { background: var(--card); border-radius: 12px; padding: 12px; margin-bottom: 12px; }\n  .kv { display: grid; grid-template-columns: 90px 1fr; gap: 4px 8px; }\n  .kv div:nth-child(odd){ color: var(--muted); white-space: nowrap; }\n  .cores { display: grid; grid-template-columns: 1fr; gap: 6px; }\n  .bar-row { position: relative; background: var(--barBg); border-radius: 8px; overflow: hidden; height: 16px; }\n  .bar { height: 100%; transition: width 120ms linear; }\n  .label { position: absolute; right: 6px; top: 0; bottom: 0; display:flex; align-items:center; font-size: 12px; text-shadow: 0 1px 2px rgba(0,0,0,.5); }\n  .small { color: var(--muted); font-size: 12px; margin-top: 4px; }\n</style>\n\n<div class=\"section\">\n  <h2>System Overview</h2>\n  <div class=\"kv\" id=\"sys\"></div>\n</div>\n\n<div class=\"section\">\n  <h2>Per-Core Usage</h2>\n  <div class=\"cores\" id=\"cores\"></div>\n  <div class=\"small\" id=\"cores-foot\"></div>\n</div>\n\n<div class=\"section\">\n  <h2>Memory</h2>\n  <div class=\"kv\" id=\"mem\"></div>\n</div>\n\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const el = (id) => document.getElementById(id);\n\n  function pct1(p){ return (p*100).toFixed(1) + '%'; }\n  function bytesToGB(n){ return (n / (1024 ** 3)).toFixed(1) + \" GB\"; }\n  function fmtUptime(sec){\n    const d = Math.floor(sec / 86400);\n    const h = Math.floor((sec % 86400) / 3600);\n    const m = Math.floor((sec % 3600) / 60);\n    return \\`\\${d}d \\${h}h \\${m}m\\`;\n  }\n\n  function renderMetrics(m) {\n    const { cpuPct, coresPct, mem, loadavg, uptime, arch, platform, release, cpumodel, elDelay } = m;\n\n    el('sys').innerHTML = \\`\n      <div>CPU</div><div>\\${(cpuPct*100).toFixed(1)}% — \\${cpumodel || ''}</div>\n      <div>OS</div><div>\\${platform} \\${release} (\\${arch})</div>\n      <div>Load Avg</div><div>\\${(loadavg||[]).map(n=>n.toFixed(2)).join(' / ')}</div>\n      <div>Event Loop</div><div>mean \\${(elDelay.meanMs||0).toFixed(2)} ms · p95 \\${(elDelay.p95Ms||0).toFixed(2)} ms</div>\n      <div>Uptime</div><div>\\${fmtUptime(uptime || 0)}</div>\n      <div>Now</div><div>\\${new Date(m.ts).toLocaleTimeString()}</div>\n    \\`;\n\n    const cores = Array.isArray(coresPct) ? coresPct : [];\n    el('cores').innerHTML = cores.map(p => {\n      const pct = Math.max(0, Math.min(100, p*100));\n      const hue = 120 - Math.round(pct * 1.2);\n      return \\`\n        <div class=\"bar-row\">\n          <div class=\"bar\" style=\"width:\\${pct}%; background: hsl(\\${hue},70%,50%);\"></div>\n          <div class=\"label\">\\${pct.toFixed(0)}%</div>\n        </div>\\`;\n    }).join('');\n    el('cores-foot').textContent = \\`\\${cores.length} cores\\`;\n\n    el('mem').innerHTML = \\`\n      <div>Usage</div><div>\\${pct1(mem.pct)}</div>\n      <div>Used</div><div>\\${bytesToGB(mem.used)}</div>\n      <div>Free</div><div>\\${bytesToGB(mem.free)}</div>\n      <div>Total</div><div>\\${bytesToGB(mem.total)}</div>\n    \\`;\n  }\n\n  window.addEventListener('message', (ev) => {\n    const msg = ev.data || {};\n    if (msg.type === 'metrics') renderMetrics(msg.payload || {});\n  });\n</script>\n`;\n  }\n\n  vm.onStop(() => {\n    try { stopLoop(); } catch {}\n    try { item.dispose(); } catch {}\n    try { eld.disable(); } catch {}\n    for (const d of disposables) { try { d.dispose(); } catch {} }\n    try { sidebar.close?.(); } catch {}\n  });\n})();\n",
    "tags": [
      "default",
      "tool"
    ]
  },
  {
    "text": "$(window) Background",
    "tooltip": "You can set the background image of vscode",
    "command": "cmd.25y2l43ufl",
    "script": "// SBH — JS version: inject editor background (supports large images via blob:URL) + sync workbench JS checksum\n//\n// ✅ Goal: keep the editor’s original theme color outside the image; opacity only affects the image layer\n// ✅ Features: apply background image / adjust opacity (0–1, higher → lighter) / restore original\n// ✅ Behavior: on first apply, create .orig backups (never overwritten); each change updates product.json checksum\n// ✅ Formats: PNG / JPG / GIF / WebP; long data:URL automatically switches to blob:URL to avoid Chromium limits\n//\n// Note: menu removed “fix checksums / show path”; your other flow remains unchanged.\n\nconst vscode = require(\"vscode\");\nconst { vm } = statusBarHelper.v1;\nconst fs = require(\"fs\");\nconst fsp = fs.promises;\nconst path = require(\"path\");\nconst crypto = require(\"crypto\");\n\n// Target paths (relative to appRoot)\nconst JS_REL_KEY  = \"vs/workbench/workbench.desktop.main.js\";\nconst JS_REL_PATH = \"out/vs/workbench/workbench.desktop.main.js\";\n\n// Original backups\nconst JS_BAK_ORIG_EXT  = \".sbhbak.orig\";\nconst PRODUCT_BAK_ORIG = \".sbhbak.product.orig\";\n\n// data:URL safety threshold (use blob if exceeded)\nconst DATAURL_SAFE_LIMIT = 1_800_000; // ~1.8 MB\n\nconst MARK_JS_BEGIN = \"/* sbh-background:js-begin */\";\nconst MARK_JS_END   = \"/* sbh-background:js-end */\";\n\n/* ========================= CSS Generator ========================= */\n/** Generate CSS that removes background-image but preserves theme background color;\n *  overlay and image share the same background-size so overlay only covers the image.\n */\nconst makeCssBlock = (\n  dataUrl,\n  {\n    scale = 0.95,                  // visually shrink to 95%\n    basis = \"height\",              // 'height' | 'width'\n    align = \"center center\",\n    // Opacity (0–1): higher → lighter (image less prominent; only affects the image)\n    overlayOpacity = 0.8,          // legacy compatibility\n    overlayOpacityDark  = 0.8,     // default for dark theme\n    overlayOpacityLight = 0.8,     // default for light theme\n    overlayRGB = \"0,0,0\"           // legacy fallback only (coloring no longer used)\n  } = {}\n) => {\n  const sizeForImg =\n    basis === \"height\"\n      ? \"auto calc(100% * var(--sbh-bg-scale))\"\n      : \"calc(100% * var(--sbh-bg-scale)) auto\";\n\n  return `\n:root{\n  /* sbh-background:vars-begin */\n  --sbh-bg-scale: ${scale};\n\n  /* legacy params */\n  --sbh-bg-overlay-opacity: ${overlayOpacity};\n  --sbh-bg-overlay-rgb: ${overlayRGB};\n\n  /* theme-specific source (we use this as the “fade amount”) */\n  --sbh-bg-overlay-opacity-dark: ${overlayOpacityDark};\n  --sbh-bg-overlay-opacity-light: ${overlayOpacityLight};\n\n  /* actual background color comes from the theme; overridden by .monaco-workbench */\n  --sbh-bg-theme: #1e1e1e;\n\n  /* effective fade alpha (0–1; higher → lighter) */\n  --sbh-bg-overlay-alpha: var(--sbh-bg-overlay-opacity);\n\n  /* convert fade alpha to image opacity (1 - alpha) */\n  --sbh-bg-image-opacity: calc(1 - var(--sbh-bg-overlay-alpha));\n  /* sbh-background:vars-end */\n}\n\n/* theme awareness (override within workbench scope) */\n.monaco-workbench.vs-dark{\n  --sbh-bg-overlay-alpha: var(--sbh-bg-overlay-opacity-dark);\n  --sbh-bg-theme: var(--vscode-editor-background, #1e1e1e);\n}\n.monaco-workbench.vs{\n  --sbh-bg-overlay-alpha: var(--sbh-bg-overlay-opacity-light);\n  --sbh-bg-theme: var(--vscode-editor-background, #ffffff);\n}\n.hc-black{\n  --sbh-bg-overlay-alpha: 0.7;\n  --sbh-bg-theme: var(--vscode-editor-background, #000000);\n}\n.hc-light{\n  --sbh-bg-overlay-alpha: 0.5;\n  --sbh-bg-theme: var(--vscode-editor-background, #ffffff);\n}\n\n/* remove background images but keep theme background color */\n.monaco-workbench,\n.monaco-editor,\n.monaco-editor-background,\n.editor-instance,\n.monaco-editor .view-lines,\n.monaco-editor .lines-content,\n.monaco-editor .margin,\n.editor .lines-content,\n.monaco-editor .overflow-guard,\n.monaco-editor .monaco-scrollable-element.editor-scrollable{\n  background-image: none !important;\n}\n\n/* outer containers always use theme color (avoid transparency) */\n.monaco-workbench .part.editor .editor-group-container,\n.monaco-workbench .part.editor .editor-group-container .monaco-editor,\n.monaco-editor,\n.monaco-editor .overflow-guard,\n.monaco-editor .monaco-scrollable-element.editor-scrollable,\n.monaco-workbench .part.editor .editor-group-container.empty,\n.monaco-workbench .part.editor .editor-group-container .welcomePage,\n.monaco-workbench .part.editor .editor-group-container .gettingStarted,\n.monaco-workbench .part.editor .editor-group-container .gettingStartedContainer{\n  background-color: var(--sbh-bg-theme) !important;\n  position: relative !important; /* anchor ::before */\n}\n\n/* === image layer on ::before; control via opacity (higher → lighter) === */\n.monaco-workbench .part.editor\n  .editor-group-container.active\n  .monaco-editor .monaco-scrollable-element.editor-scrollable::before,\n.monaco-workbench .part.editor .editor-group-container.empty::before,\n.monaco-workbench .part.editor .editor-group-container.active .welcomePage::before,\n.monaco-workbench .part.editor .editor-group-container.active .gettingStarted::before,\n.monaco-workbench .part.editor .editor-group-container.active .gettingStartedContainer::before{\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  pointer-events: none;\n  background-image: url('${dataUrl}');\n  background-repeat: no-repeat;\n  background-position: ${align};\n  background-size: ${sizeForImg};\n  opacity: var(--sbh-bg-image-opacity);  /* ★ key: image-only opacity */\n}\n\n/* exclude non-target containers (avoid duplicates) */\n.monaco-workbench .peekview-widget .monaco-editor .monaco-scrollable-element.editor-scrollable::before,\n.monaco-workbench .search-editor .monaco-scrollable-element.editor-scrollable::before,\n.monaco-workbench .diff-editor .editor.original .monaco-scrollable-element.editor-scrollable::before,\n.monaco-workbench .part.editor\n  .editor-group-container:not(.active)\n  .monaco-editor .monaco-scrollable-element.editor-scrollable::before{\n  content: none;\n}\n\n/* allow content layers to be transparent so the image shows through */\n.monaco-editor .view-lines,\n.monaco-editor .lines-content,\n.monaco-editor .margin,\n.monaco-editor-background{\n  background-color: transparent !important;\n  background-image: none !important;\n}\n`;\n};\n\n\n/* ========================= Utilities ========================= */\nconst sha256b64 = (data) =>\n  crypto.createHash(\"sha256\").update(data).digest(\"base64\").replace(/=+$/g, \"\");\n\nconst fileSha256b64 = async (abs, isText = true) =>\n  sha256b64(await fsp.readFile(abs, isText ? \"utf8\" : undefined));\n\nconst escapeRegExp = (s) => s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\nfunction findInjectedBlock(text) {\n  const re = new RegExp(\n    `${escapeRegExp(MARK_JS_BEGIN)}[\\\\s\\\\S]*?${escapeRegExp(MARK_JS_END)}`,\n    \"m\"\n  );\n  const m = text.match(re);\n  if (m && m[0]) return { block: m[0] };\n\n  const b = text.indexOf(MARK_JS_BEGIN);\n  if (b === -1) return null;\n  const e = text.indexOf(MARK_JS_END, b);\n  if (e === -1) return null;\n  return { block: text.slice(b, e + MARK_JS_END.length) };\n}\n\nconst guessAppRoots = () => {\n  const roots = new Set();\n  if (vscode?.env?.appRoot) roots.add(vscode.env.appRoot);\n  const exe = process.execPath || \"\";\n\n  if (process.platform === \"darwin\") {\n    roots.add(path.resolve(exe, \"../../Resources/app\"));\n    roots.add(\"/Applications/Visual Studio Code.app/Contents/Resources/app\");\n    roots.add(\"/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app\");\n    roots.add(path.resolve(exe, \"../Resources/app\"));\n    roots.add(path.resolve(exe, \"../../../Resources/app\"));\n  } else if (process.platform === \"win32\") {\n    roots.add(path.join(path.dirname(exe), \"resources\", \"app\"));\n    if (process.env.LOCALAPPDATA) {\n      roots.add(path.join(process.env.LOCALAPPDATA, \"Programs\", \"Microsoft VS Code\", \"resources\", \"app\"));\n      roots.add(path.join(process.env.LOCALAPPDATA, \"Programs\", \"Microsoft VS Code - Insiders\", \"resources\", \"app\"));\n    }\n  } else {\n    roots.add(path.resolve(path.dirname(exe), \"..\", \"resources\", \"app\"));\n    roots.add(\"/usr/share/code/resources/app\");\n    roots.add(\"/usr/lib/code/resources/app\");\n    roots.add(\"/snap/code/current/usr/share/code/current/usr/share/code/resources/app\"); // snap variants\n    roots.add(\"/snap/code/current/usr/share/code/resources/app\");\n  }\n  return Array.from(roots);\n};\n\nconst findEnv = () => {\n  for (const r of guessAppRoots()) {\n    const product = path.join(r, \"product.json\");\n    const jsPath = path.join(r, JS_REL_PATH);\n    if (fs.existsSync(product) && fs.existsSync(jsPath)) {\n      return { appRoot: r, productJson: product, jsPath };\n    }\n  }\n  return null;\n};\n\nconst findEnvSmart = () => {\n  const candidates = [];\n  for (const r of guessAppRoots()) {\n    const product = path.join(r, \"product.json\");\n    const jsPath = path.join(r, JS_REL_PATH);\n    if (fs.existsSync(product) && fs.existsSync(jsPath)) {\n      candidates.push({ appRoot: r, productJson: product, jsPath });\n    }\n  }\n  if (candidates.length <= 1) return candidates[0] || null;\n\n  // prefer the instance that already has our injection\n  for (const c of candidates) {\n    try {\n      const txt = fs.readFileSync(c.jsPath, \"utf8\");\n      if (txt.includes(MARK_JS_BEGIN) && txt.includes(MARK_JS_END)) return c;\n    } catch {}\n  }\n  return candidates[0] || null;\n};\n\nconst hasInjectionMarks = (text) =>\n  text.includes(MARK_JS_BEGIN) && text.includes(MARK_JS_END);\n\nconst makeInjectedIIFE = (dataUrl, opts = {}) => {\n  const css = makeCssBlock(dataUrl, opts)\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/`/g, \"\\\\`\");\n  return `\n${MARK_JS_BEGIN}\n(function(){\n  function inject(){\n    try{\n      var id = 'sbh-background-style';\n      var old = document.getElementById(id);\n      if(old && old.parentNode) old.parentNode.removeChild(old);\n      var s = document.createElement('style');\n      s.id = id;\n      s.type = 'text/css';\n      s.appendChild(document.createTextNode(\\`${css}\\`));\n      document.head.appendChild(s);\n    }catch(e){ console && console.warn && console.warn('[sbh] inject failed', e); }\n  }\n  if(typeof document !== 'undefined'){\n    if(document.readyState === 'complete' || document.readyState === 'interactive'){\n      setTimeout(inject, 0);\n    }else{\n      document.addEventListener('DOMContentLoaded', inject, { once:true });\n    }\n  }\n})();\n${MARK_JS_END}\n`;\n};\n\n// Big files → use blob:URL (avoid data:URL length issues)\nconst makeInjectedIIFE_UsingBlob = (mime, b64, opts = {}) => {\n  const cssTpl = makeCssBlock(\"__SBH_BG__\", opts)\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/`/g, \"\\\\`\");\n  return `\n${MARK_JS_BEGIN}\n(function(){\n  var _url;\n  function toBlobUrl(b64, mime){\n    try{\n      var bin = atob(b64);\n      var len = bin.length;\n      var arr = new Uint8Array(len);\n      for (var i=0;i<len;i++) arr[i] = bin.charCodeAt(i);\n      return URL.createObjectURL(new Blob([arr], { type: mime || 'application/octet-stream' }));\n    }catch(e){ console && console.warn && console.warn('[sbh] blob fail', e); return ''; }\n  }\n  function inject(){\n    try{\n      if(!_url) _url = toBlobUrl('${b64}', '${mime}');\n      var id = 'sbh-background-style';\n      var old = document.getElementById(id);\n      if(old && old.parentNode) old.parentNode.removeChild(old);\n      var s = document.createElement('style');\n      s.id = id; s.type = 'text/css';\n      var css = \\`${cssTpl}\\`.replace(/__SBH_BG__/g, _url);\n      s.appendChild(document.createTextNode(css));\n      document.head.appendChild(s);\n    }catch(e){ console && console.warn && console.warn('[sbh] inject failed', e); }\n  }\n  if(typeof document !== 'undefined'){\n    if(document.readyState === 'complete' || document.readyState === 'interactive'){\n      setTimeout(inject, 0);\n    }else{\n      document.addEventListener('DOMContentLoaded', inject, { once:true });\n    }\n  }\n})();\n${MARK_JS_END}\n`;\n};\n\nconst stripOldJsInjection = (text) => {\n  const re = new RegExp(\n    `${escapeRegExp(MARK_JS_BEGIN)}[\\\\s\\\\S]*?${escapeRegExp(MARK_JS_END)}\\\\s*`,\n    \"m\"\n  );\n  return text.replace(re, \"\");\n};\n\nconst appendBeforeSourceMap = (text, snippet) => {\n  const i = text.lastIndexOf(\"//# sourceMappingURL=\");\n  if (i > -1) return text.slice(0, i) + \"\\n\" + snippet + \"\\n\" + text.slice(i);\n  return text + \"\\n\" + snippet + \"\\n\";\n};\n\n/* ========================= Backups & checksum ========================= */\nasync function ensureCleanOriginalBackups(productJson, jsPath) {\n  const jsOrig = jsPath + JS_BAK_ORIG_EXT;\n  const productOrig = productJson + PRODUCT_BAK_ORIG;\n  if (fs.existsSync(jsOrig) && fs.existsSync(productOrig)) return;\n\n  const [productTxt, jsTxt] = await Promise.all([\n    fsp.readFile(productJson, \"utf8\"),\n    fsp.readFile(jsPath, \"utf8\"),\n  ]);\n\n  let productObj;\n  try { productObj = JSON.parse(productTxt); }\n  catch { return; }\n\n  const expected = productObj?.checksums?.[JS_REL_KEY] || null;\n  if (!expected) return;\n\n  const currentHash = sha256b64(jsTxt);\n  const isClean = currentHash === expected && !hasInjectionMarks(jsTxt);\n  if (!isClean) return;\n\n  try {\n    if (!fs.existsSync(jsOrig))      await fsp.writeFile(jsOrig, jsTxt, \"utf8\");\n    if (!fs.existsSync(productOrig)) await fsp.writeFile(productOrig, productTxt, \"utf8\");\n  } catch {}\n}\n\nconst updateProductChecksumKey = async (productJson, key, fileAbs) => {\n  const src = await fsp.readFile(productJson, \"utf8\");\n  let obj;\n  try { obj = JSON.parse(src); }\n  catch { throw new Error(\"product.json is not valid JSON\"); }\n  if (!obj.checksums || typeof obj.checksums !== \"object\")\n    throw new Error(\"product.json is missing the 'checksums' field\");\n\n  const calc = await fileSha256b64(fileAbs, true);\n  if (obj.checksums[key] === calc) return false;\n\n  await fsp.writeFile(productJson + PRODUCT_BAK_ORIG, src, { flag: \"wx\" }).catch(() => {});\n  obj.checksums[key] = calc;\n  await fsp.writeFile(productJson, JSON.stringify(obj, null, 2), \"utf8\");\n  return true;\n};\n\n/* ========================= Opacity-only update (no image change) ========================= */\nfunction readCurrentOpacityFromJsText(injectedJsBlock){\n  const pick = (re) => {\n    const m = injectedJsBlock.match(re);\n    return m ? parseFloat(m[1]) : null;\n  };\n  return (\n    pick(/--sbh-bg-overlay-opacity-dark:\\s*([0-9]*\\.?[0-9]+)\\s*;/) ??\n    pick(/--sbh-bg-overlay-opacity:\\s*([0-9]*\\.?[0-9]+)\\s*;/) ??\n    pick(/--sbh-bg-overlay-opacity-light:\\s*([0-9]*\\.?[0-9]+)\\s*;/) ??\n    null\n  );\n}\nfunction extractDataUrl(injectedJsBlock){\n  const m = injectedJsBlock.match(/url\\(['\"](data:[^'\"]+)['\"]\\)/);\n  return m ? m[1] : null;\n}\nasync function updateOpacityOnly(productJson, jsPath, newOpacity){\n  const src = await fsp.readFile(jsPath, \"utf8\");\n  if (!hasInjectionMarks(src)) throw new Error(\"No injected style found. Please 'Apply Background Image' first.\");\n\n  const found = findInjectedBlock(src);\n  if (!found || !found.block) throw new Error(\"Unable to locate the injected block.\");\n  const block = found.block;\n\n  // update three variables (dark / light / base)\n  const rxs = [\n    /(--sbh-bg-overlay-opacity-dark:\\s*)([0-9]*\\.?[0-9]+)(\\s*;)/,\n    /(--sbh-bg-overlay-opacity-light:\\s*)([0-9]*\\.?[0-9]+)(\\s*;)/,\n    /(--sbh-bg-overlay-opacity:\\s*)([0-9]*\\.?[0-9]+)(\\s*;)/\n  ];\n  let replaced = block, hit = 0;\n  for (const rx of rxs) {\n    const before = replaced;\n    replaced = replaced.replace(rx, (_, p1, _old, p3) => `${p1}${newOpacity}${p3}`);\n    if (replaced !== before) hit++;\n  }\n\n  let nextSrc;\n  if (hit > 0) {\n    nextSrc = src.replace(block, replaced);\n  } else {\n    const dataUrl = extractDataUrl(block);\n    if (!dataUrl) throw new Error(\"Failed to parse existing data:URL. Please re-apply the background image.\");\n    const rebuilt = makeInjectedIIFE(dataUrl, {\n      overlayOpacity: newOpacity,\n      overlayOpacityDark: newOpacity,\n      overlayOpacityLight: newOpacity\n    });\n    nextSrc = src.replace(block, rebuilt);\n  }\n\n  await fsp.writeFile(jsPath, nextSrc, \"utf8\");\n  await updateProductChecksumKey(productJson, JS_REL_KEY, jsPath);\n}\n\n/* ========================= Close VS Code ========================= */\nconst quitVSCode = async () => {\n  try { await vscode.commands.executeCommand(\"workbench.action.files.saveAll\"); } catch {}\n  try { await vscode.commands.executeCommand(\"workbench.action.quit\"); }\n  catch { try { await vscode.commands.executeCommand(\"workbench.action.closeWindow\"); } catch {} }\n};\nasync function askToQuit(message) {\n  const btn = await vscode.window.showInformationMessage(\n    message,\n    { modal: true },\n    \"Close VS Code now\", \"Later\"\n  );\n  if (btn === \"Close VS Code now\") { await quitVSCode(); return true; }\n  return false;\n}\n\n/* ========================= Main ========================= */\n(async () => {\n  try {\n    const env = findEnvSmart() || findEnv();\n    if (!env) { await vscode.window.showErrorMessage(\"Cannot find VS Code installation files (product.json / workbench JS).\"); return; }\n    const { productJson, jsPath } = env;\n\n    const choice = await vscode.window.showQuickPick(\n      [\n        { label: \"📂 Apply Background Image (pick a file)\", description: \"PNG/JPG/GIF/WebP; set opacity at the same time; large files use blob\" },\n        { label: \"🎚 Adjust Opacity (0–1; higher → lighter)\", description: \"Change fade only; image not replaced\" },\n        { label: \"🧹 Restore Background (revert to original)\", description: \"Restore from .orig if present; otherwise remove injection and resync checksum\" }\n      ],\n      { title: \"Editor Background (apply / opacity / restore)\" }\n    );\n    if (!choice) return;\n\n    const action =\n      choice.label.includes(\"Apply\")   ? \"apply\"   :\n      choice.label.includes(\"Opacity\") ? \"opacity\" :\n      \"restore\";\n\n    if (action === \"restore\") {\n      const jsOrig = jsPath + JS_BAK_ORIG_EXT;\n      const productOrig = productJson + PRODUCT_BAK_ORIG;\n\n      if (fs.existsSync(jsOrig)) {\n        await fsp.copyFile(jsOrig, jsPath);\n        if (fs.existsSync(productOrig)) {\n          await fsp.copyFile(productOrig, productJson);\n        } else {\n          await updateProductChecksumKey(productJson, JS_REL_KEY, jsPath);\n        }\n        const closed = await askToQuit(\"✅ Restored original file and synced checksum. Close VS Code to take effect.\");\n        if (closed) return;\n      } else {\n        const txt = await fsp.readFile(jsPath, \"utf8\");\n        const stripped = stripOldJsInjection(txt);\n        if (stripped !== txt) {\n          await fsp.writeFile(jsPath, stripped, \"utf8\");\n          await updateProductChecksumKey(productJson, JS_REL_KEY, jsPath);\n          const closed2 = await askToQuit(\"ℹ️ No .orig found. Removed injection and synced checksum. Close VS Code to take effect.\");\n          if (closed2) return;\n        } else {\n          await vscode.window.showWarningMessage(\"⚠️ No .orig backup and no injection marks found.\");\n        }\n      }\n      return;\n    }\n\n    if (action === \"opacity\") {\n      const jsText = await fsp.readFile(jsPath, \"utf8\");\n      const found = findInjectedBlock(jsText);\n      const block = found?.block || null;\n      const current = block ? (readCurrentOpacityFromJsText(block) ?? 0.8) : 0.8;\n\n      const input = await vscode.window.showInputBox({\n        title: \"Set background opacity (0–1; higher → lighter)\",\n        value: String(current),\n        prompt: \"e.g., 0.6 = lighter; 0 = no fade (image most visible).\",\n        validateInput: (v) => {\n          const n = Number(v);\n          return isFinite(n) && n >= 0 && n <= 1 ? null : \"Please enter a number between 0 and 1.\";\n        }\n      });\n      if (!input) return;\n\n      const val = Math.max(0, Math.min(1, Number(input)));\n      await updateOpacityOnly(productJson, jsPath, Number(val.toFixed(3)));\n\n      const closed = await askToQuit(\"✅ Updated opacity and synced checksum. Close VS Code to take effect.\");\n      if (closed) return;\n      return;\n    }\n\n    // === Apply Background Image ===\n    await ensureCleanOriginalBackups(productJson, jsPath);\n\n    const picked = await vscode.window.showOpenDialog({\n      canSelectFiles: true, canSelectMany: false, openLabel: \"Pick background image\",\n      filters: { Images: [\"png\", \"jpg\", \"jpeg\", \"gif\", \"webp\"] }\n    });\n    if (!picked || !picked.length) return;\n\n    const buf = await fsp.readFile(picked[0].fsPath);\n    const ext = path.extname(picked[0].fsPath).toLowerCase();\n    const mime =\n      ext === \".png\"  ? \"image/png\"  :\n      ext === \".jpg\" || ext === \".jpeg\" ? \"image/jpeg\" :\n      ext === \".gif\"  ? \"image/gif\"   :\n      ext === \".webp\" ? \"image/webp\"  :\n      \"application/octet-stream\";\n\n    const b64     = buf.toString(\"base64\");\n    const dataUrl = `data:${mime};base64,${b64}`;\n    const USE_BLOB = dataUrl.length > DATAURL_SAFE_LIMIT;\n\n    // read existing opacity as default (or 0.8 if none)\n    const jsTextForDefault = await fsp.readFile(jsPath, \"utf8\").catch(() => \"\");\n    const existedBlock = findInjectedBlock(jsTextForDefault)?.block || null;\n    const defaultOpacity = existedBlock\n      ? (readCurrentOpacityFromJsText(existedBlock) ?? 0.8)\n      : 0.8;\n\n    // ask for new opacity\n    const inputOpacity = await vscode.window.showInputBox({\n      title: \"Set background opacity (0–1; higher → lighter)\",\n      value: String(defaultOpacity),\n      prompt: \"e.g., 0.6 = lighter; 0 = no fade (image most visible).\",\n      validateInput: (v) => {\n        const n = Number(v);\n        return isFinite(n) && n >= 0 && n <= 1 ? null : \"Please enter a number between 0 and 1.\";\n      }\n    });\n    if (!inputOpacity) return;\n\n    const opacity = Math.max(0, Math.min(1, Number(inputOpacity)));\n    const cssOpts = {\n      overlayOpacity: opacity,\n      overlayOpacityDark: opacity,\n      overlayOpacityLight: opacity\n    };\n\n    const orig = await fsp.readFile(jsPath, \"utf8\");\n    const injected = appendBeforeSourceMap(\n      stripOldJsInjection(orig),\n      USE_BLOB\n        ? makeInjectedIIFE_UsingBlob(mime, b64, cssOpts)\n        : makeInjectedIIFE(dataUrl, cssOpts)\n    );\n    await fsp.writeFile(jsPath, injected, \"utf8\");\n\n    const changed = await updateProductChecksumKey(productJson, JS_REL_KEY, jsPath);\n\n    const closed = await askToQuit(\n      `✅ Applied background (${USE_BLOB ? \"blob:URL\" : \"data:URL\"}, opacity=${opacity})${changed ? \" and synced checksum\" : \"\"}. Close VS Code to take effect.`\n    );\n    if (closed) return;\n\n  } catch (err) {\n    await vscode.window.showErrorMessage(\"❌ Error: \" + (err?.message || err));\n  } finally {\n    vm.stop();\n  }\n})();\n",
    "enableOnInit": false,
    "hidden": true,
    "tags": [
      "default",
      "ui"
    ]
  },
  {
    "text": "Explorer Action",
    "tooltip": "Minimal example with 4 actions (multi-select supported)",
    "command": "cmd.micsm08hee",
    "script": "// Explorer Menu: Minimal example with 4 actions (multi-select supported)\n// - $(file) Show selected file(s)/folder(s)\n// - $(clippy) Copy path(s) to clipboard\n// - $(terminal) Open containing folder in Terminal\n// - $(info) Show count & total size (non-recursive)\n//\n// How to use: Right-click a file/folder in Explorer → “Status Bar Helper: Trigger Action Menu”\n\nconst vscode = require(\"vscode\");\n// Global object injected by Status Bar Helper\nconst { explorerAction } = sbh.v1;\n\n(async function main() {\n  // 1) Show selected file(s)/folder(s)\n  await explorerAction.register({\n    description: '$(file) Show selected item(s)',\n    handler: async ({ uri, uris }) => {\n      const targets = uris?.length ? uris : (uri ? [uri] : []);\n      if (!targets.length) return vscode.window.showWarningMessage('No item selected.');\n      if (targets.length === 1) {\n        return vscode.window.showInformationMessage(`Selected: ${targets[0].fsPath}`);\n      }\n      const paths = targets.map(u => u.fsPath).join('\\n');\n      vscode.window.showInformationMessage(`Selected ${targets.length} items:\\n${paths}`);\n    }\n  });\n\n  // 2) Copy path(s) to clipboard (supports multi-select)\n  await explorerAction.register({\n    description: '$(clippy) Copy path(s)',\n    handler: async ({ uri, uris }) => {\n      const targets = uris?.length ? uris : (uri ? [uri] : []);\n      if (!targets.length) return vscode.window.showWarningMessage('No item selected.');\n      const text = targets.map(u => u.fsPath).join('\\n');\n      await vscode.env.clipboard.writeText(text);\n      vscode.window.showInformationMessage(`Copied ${targets.length} path(s) to the clipboard.`);\n    }\n  });\n\n  // 3) Open containing folder in Terminal\n  await explorerAction.register({\n    description: '$(terminal) Open in Terminal',\n    handler: async ({ uri }) => {\n      if (!uri) return vscode.window.showWarningMessage('Please select a file or folder.');\n      const fs = require('fs');\n      const path = require('path');\n      let cwd = uri.fsPath;\n      try {\n        const stat = fs.statSync(uri.fsPath);\n        if (!stat.isDirectory()) cwd = path.dirname(uri.fsPath);\n      } catch {}\n      const term = vscode.window.createTerminal('Explorer');\n      term.show();\n      term.sendText(`cd \"${cwd}\"`);\n      vscode.window.showInformationMessage(`Opened in terminal: ${cwd}`);\n    }\n  });\n\n  // 4) Show file info (count & total size, non-recursive)\n  await explorerAction.register({\n    description: '$(info) Show file info',\n    handler: async ({ uri, uris }) => {\n      const targets = uris?.length ? uris : (uri ? [uri] : []);\n      if (!targets.length) return vscode.window.showWarningMessage('No item selected.');\n\n      const fs = require('fs');\n      let fileCount = 0, dirCount = 0, totalSize = 0;\n\n      for (const u of targets) {\n        try {\n          const s = fs.statSync(u.fsPath);\n          if (s.isDirectory()) dirCount++;\n          else { fileCount++; totalSize += s.size; }\n        } catch {}\n      }\n\n      const kb = (totalSize / 1024).toFixed(2);\n      const mb = (totalSize / 1024 / 1024).toFixed(2);\n      vscode.window.showInformationMessage(\n        `📊 Summary\\n` +\n        `Files: ${fileCount}\\n` +\n        `Folders: ${dirCount}\\n` +\n        `Total size: ${kb} KB (${mb} MB)`\n      );\n    }\n  });\n\n  // Startup hint: tell users where to click\n  vscode.window.showInformationMessage(\n    [\n      '✅ Explorer context menu is now available (4 actions)',\n      '',\n      'How to use:',\n      '1) Open the Explorer → select file/folder(s)',\n      '2) Right-click → “Status Bar Helper: Trigger Action Menu”',\n      '3) Pick an action'\n    ].join('\\n')\n  );\n})();\n",
    "enableOnInit": false,
    "hidden": false,
    "tags": [
      "default",
      "example",
      "explorer"
    ]
  }
]