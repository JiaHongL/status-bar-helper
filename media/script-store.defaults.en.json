[
  {
    "command": "sbh.demo.logMinimalPlus",
    "text": "$(output) Log",
    "tooltip": "VS Code + Node. Output + bottom log",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "core"
    ],
    "script": "// Minimal Log: VS Code + Node (read-only, one-click, dual output)\n// Example: Demonstrates how to log messages in a VS Code extension\n// 1. Create a custom Output Channel in VS Code\n// 2. Define a helper function to log to both Output Channel and console\n// 3. Show environment info (Node version, platform, architecture)\n// 4. List a few files/directories from the current workspace\n// 5. Show the currently active file and its language\n// 6. Display a completion message in VS Code's UI\n\n// Import VS Code API\nconst vscode = require('vscode');\n// Import Node.js file system and path modules\nconst fs = require('fs');\nconst path = require('path');\n// Inject VM API\nconst { vm } = statusBarHelper.v1; \n\n(function main(){\n  // Create a new Output Channel named \"SBH Minimal Log\"\n  const ch = vscode.window.createOutputChannel('SBH Minimal Log');\n\n  // Helper function: log to both Output Channel and console\n  const emit = (...a) => {\n    const line = a.join(' ');\n    ch.appendLine(line);\n    console.log(line);\n  };\n\n  // Show the Output Channel immediately\n  ch.show(true);\n\n  // Start logging\n  emit('▶ Start');\n\n  // Show Node.js version, platform, and architecture\n  emit('Node: ' + process.version + '  Platform: ' + process.platform + '/' + process.arch);\n\n  // Get current workspace root (or fallback to process.cwd())\n  const ws = vscode.workspace.workspaceFolders;\n  const root = ws && ws.length ? ws[0].uri.fsPath : process.cwd();\n  emit('Workdir: ' + root);\n\n  // Try listing the first 8 entries in the workspace folder\n  try {\n    const entries = fs.readdirSync(root, { withFileTypes: true }).slice(0, 8);\n    entries.forEach(e => emit((e.isDirectory() ? '[D] ' : '[F] ') + e.name));\n  } catch (e) {\n    emit('readdir failed: ' + e.message);\n  }\n\n  // Show the active file name and language if available\n  const ed = vscode.window.activeTextEditor;\n  if (ed && ed.document.uri.scheme === 'file') {\n    emit('Active file: ' + path.basename(ed.document.uri.fsPath) + ' (' + ed.document.languageId + ')');\n  }\n\n  // Final message\n  emit('✔ Done');\n\n  // Show a success message in VS Code\n  vscode.window.showInformationMessage('Log demo finished. Check \"SBH Minimal Log\" and the bottom run log.');\n\n  // Stop VM explicitly after completion\n  vm.stop();\n})();"
  },
  {
    "command": "sbh.demo.gitAdd",
    "text": "$(diff-added) Git Add",
    "tooltip": "Stage all changes in the first workspace folder",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "git"
    ],
    "script": "// Git Add: stage all\nconst vscode=require('vscode'); const { exec }=require('child_process'); const { vm }=statusBarHelper.v1; (function main(){ const ws=vscode.workspace.workspaceFolders; if(!ws||!ws.length){ vscode.window.showWarningMessage('沒有 workspace，無法 git add'); vm.stop(); return; } const cwd=ws[0].uri.fsPath; exec('git add .',{ cwd },(err)=>{ if(err){ vscode.window.showErrorMessage('Git add 失敗: '+(err.message||err)); vm.stop(); return; } vscode.window.showInformationMessage('✅ git add . 完成'); vm.stop(); }); })();"
  },
  {
    "command": "sbh.demo.storage",
    "text": "$(database) Storage",
    "tooltip": "How to use the custom statusBarHelper API",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "storage"
    ],
    "script": "// Status Bar Helper v1: Demonstrates how to use the custom statusBarHelper API\n// Purpose:\n//  1. Show how to use custom storage (global & workspace) for key-value data\n//  2. Show how to use custom file APIs to read/write text, JSON, and binary data\n//  3. Show how to check existence, calculate file sizes, and log results\n//  4. Intended for demo/testing inside a VS Code extension with SBH enabled\n\n// Import Node.js Buffer (for binary and base64 handling)\nconst { Buffer } = require('buffer');\n\n// Destructure storage and files API from statusBarHelper v1\nconst { storage, files, vm } = statusBarHelper.v1;\n\nfunction main() {\n\n  // Helper: current timestamp in readable format\n  const now = () => new Date().toISOString().replace('T', ' ').replace('Z', '');\n\n  // Helper: pretty-print any value for logging\n  const dump = (x) => {\n    if (x instanceof Uint8Array)\n      return `Uint8Array(${x.length}) [${Array.from(x).slice(0, 16).join(',')}${x.length > 16 ? ',…' : ''}]`;\n    try { return JSON.stringify(x, null, 2); } catch { return String(x); }\n  };\n\n  // Helper: prefixed log output\n  const log = (...a) => console.log('[SBH]', ...a.map(dump));\n\n  (async () => {\n    log('▶ start', now());\n\n    // ─────────────── storage / global ───────────────\n    log('— storage / global —');\n    const gPrev = await storage.global.get('demo.keep', { runs: 0 });\n    await storage.global.set('demo.keep', { ...gPrev, runs: (gPrev.runs || 0) + 1, ts: now(), from: 'global' });\n    log('get keep =', await storage.global.get('demo.keep', null));\n    log('keys =', await storage.global.keys());\n\n    // ─────────────── storage / workspace ───────────────\n    log('— storage / workspace —');\n    try {\n      const wPrev = await storage.workspace.get('demo.keep', { runs: 0 });\n      await storage.workspace.set('demo.keep', { ...wPrev, runs: (wPrev.runs || 0) + 1, ts: now(), from: 'workspace' });\n      log('get keep =', await storage.workspace.get('demo.keep', null));\n      log('keys =', await storage.workspace.keys());\n    } catch (e) {\n      log('workspace storage not available:', e?.message || e);\n    }\n\n    // ─────────────── files API ───────────────\n    const dirs = await files.dirs();\n    log('dirs =', dirs);\n\n    // Text file (global scope)\n    const txtRel = 'demo/notes/hello.txt';\n    const txtOld = (await files.exists('global', txtRel)) ? await files.readText('global', txtRel) : '';\n    await files.writeText('global', txtRel, txtOld + `hello @ ${now()}\\n`);\n    log('readText:', await files.readText('global', txtRel));\n\n    // JSON file (workspace if available, otherwise global)\n    /** @type {'global'|'workspace'} */\n    const jsonScope = dirs.workspace ? 'workspace' : 'global';\n    const jsonRel = 'demo/data/sample.json';\n    const cur = (await files.exists(jsonScope, jsonRel))\n      ? await files.readJSON(jsonScope, jsonRel)\n      : { a: 1, createdAt: now() };\n    cur.updatedAt = now();\n    cur.count = (cur.count || 0) + 1;\n    await files.writeJSON(jsonScope, jsonRel, cur);\n    log('readJSON:', await files.readJSON(jsonScope, jsonRel));\n\n    // Binary file (Uint8Array)\n    const binRel = 'demo/bin/demo.bin';\n    await files.writeBytes('global', binRel, new Uint8Array([1, 2, 3, 4, 5, 254, 255]));\n    log('readBytes demo.bin:', await files.readBytes('global', binRel));\n\n    // Binary file (base64 string)\n    const b64Rel = 'demo/bin/base64.bin';\n    await files.writeBytes('global', b64Rel, Buffer.from([9, 8, 7, 6]).toString('base64'));\n    log('exists base64.bin:', await files.exists('global', b64Rel));\n\n    // Simulated list of known demo files + calculate size\n    /** @type {Array<{scope:'global'|'workspace', rel:string, type:'text'|'json'|'bytes'}>} */\n    const candidates = [\n      { scope: 'global', rel: 'demo/notes/hello.txt', type: 'text' },\n      { scope: jsonScope, rel: 'demo/data/sample.json', type: 'json' },\n      { scope: 'global', rel: 'demo/bin/demo.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/bin/base64.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/tmp/kept.txt', type: 'text' },\n    ];\n\n    /** @type {Array<{scope:string, path:string, type:string, size:number}>} */\n    const rows = [];\n    for (const c of candidates) {\n      if (await files.exists(c.scope, c.rel)) {\n        let size = 0;\n        if (c.type === 'text') {\n          const s = await files.readText(c.scope, c.rel);\n          size = Buffer.byteLength(s, 'utf8');\n        } else if (c.type === 'json') {\n          const obj = await files.readJSON(c.scope, c.rel);\n          size = Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        } else {\n          const b = await files.readBytes(c.scope, c.rel);\n          size = b?.length || 0;\n        }\n        rows.push({ scope: c.scope, path: c.rel, type: c.type, size });\n      }\n    }\n    log('files (simulated list):', rows);\n\n    // // Optional cleanup — user can delete via UI or uncomment below:\n    // await storage.global.remove('demo.keep');\n    // await storage.workspace.remove('demo.keep').catch(()=>{});\n    // await files.remove('global', b64Rel);\n\n    log('✔ done', now());\n    vm.stop();\n  })().catch(e => {\n    console.error('❌', e);\n    vm.stop();\n  });\n}\n\nmain();"
  },
  {
    "command": "sbh.demo.toggleTheme",
    "text": "$(color-mode)",
    "tooltip": "Toggle between light and dark theme",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Toggle between Light and Dark themes in VS Code (one-click)\n// Purpose: Demonstrates how to trigger a built-in VS Code command from a script\n// Note: This uses 'workbench.action.toggleLightDarkThemes' which toggles the current color theme\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(async () => {\n  try {\n    // Execute the built-in toggle theme command\n    await vscode.commands.executeCommand('workbench.action.toggleLightDarkThemes');\n  } catch (e) {\n    // Show an error message in VS Code if the command fails\n    vscode.window.showErrorMessage('Toggle theme failed: ' + (e?.message || e));\n  } finally {\n    vm.stop();\n  }\n})();"
  },
  {
    "command": "sbh.demo.whiteboard",
    "text": "$(paintcan) Board",
    "tooltip": "Board",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Whiteboard (no save): draw-only Webview + Export PNG + correct Undo/Redo scaling\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhWhiteboard',\n    'Whiteboard — Draw Only',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n\n  vm.onStop(reason => {\n    try { panel.dispose(); } catch {}\n  });\n\n  panel.onDidDispose(() => {\n    vm.stop();\n  });\n\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n\n  // 接收 webview 的匯出請求 → 存檔\n  panel.webview.onDidReceiveMessage(async (msg) => {\n    if (msg?.type !== 'exportPNG' || typeof msg.dataURL !== 'string') return;\n    try {\n      const now = new Date();\n      const y = now.getFullYear();\n      const m = String(now.getMonth()+1).padStart(2,'0');\n      const d = String(now.getDate()).padStart(2,'0');\n      const hh = String(now.getHours()).padStart(2,'0');\n      const mm = String(now.getMinutes()).padStart(2,'0');\n      const ss = String(now.getSeconds()).padStart(2,'0');\n      const defaultName = `whiteboard-${y}${m}${d}-${hh}${mm}${ss}.png`;\n\n      const uri = await vscode.window.showSaveDialog({\n        saveLabel: 'Export PNG',\n        defaultUri: vscode.Uri.file(path.join(process.cwd(), defaultName)),\n        filters: { 'PNG Image': ['png'] }\n      });\n      if (!uri) return;\n\n      const base64 = msg.dataURL.split(',')[1] || '';\n      fs.writeFileSync(uri.fsPath, Buffer.from(base64, 'base64'));\n\n      vscode.window.showInformationMessage(`✅ Exported: ${path.basename(uri.fsPath)}`);\n      panel.webview.postMessage({ type: 'exported', file: uri.fsPath });\n    } catch (e) {\n      vscode.window.showErrorMessage('Export failed: ' + (e?.message || e));\n    }\n  });\n\n  function getHtml(nonce){\n    return `<!doctype html>\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n<title>Whiteboard (Draw Only)</title>\n<style>\n  :root{ --h:32px }\n  body{font-family:var(--vscode-font-family);color:var(--vscode-foreground);background:var(--vscode-editor-background);margin:0}\n  .bar{display:flex;align-items:center;gap:8px;border-bottom:1px solid var(--vscode-editorGroup-border);padding:6px 8px;height:var(--h);user-select:none;background:var(--vscode-sideBar-background)}\n  .bar input[type=\"color\"]{width:28px;height:20px;border:1px solid var(--vscode-input-border);background:var(--vscode-input-background)}\n  .bar input[type=\"range\"]{width:120px}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer}\n  button:hover{background:var(--vscode-button-hoverBackground)}\n  #wrap{position:relative;height:calc(100vh - var(--h) - 2px)}\n  canvas{width:100%;height:100%}\n  #grid{position:absolute;inset:0;background:\n        linear-gradient(to right, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px,\n        linear-gradient(to bottom, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px;pointer-events:none;opacity:.2}\n  #msg{margin-left:auto;opacity:.85;font-size:.9em}\n</style>\n<div class=\"bar\">\n  <span>Color</span><input id=\"color\" type=\"color\" value=\"#00d3a7\">\n  <span>Size</span><input id=\"size\" type=\"range\" min=\"1\" max=\"32\" value=\"4\">\n  <button id=\"undo\">Undo</button>\n  <button id=\"redo\">Redo</button>\n  <button id=\"clear\">Clear</button>\n  <span style=\"flex:1\"></span>\n  <button id=\"export\">Export PNG</button>\n  <span id=\"msg\"></span>\n</div>\n<div id=\"wrap\">\n  <canvas id=\"c\"></canvas>\n  <div id=\"grid\"></div>\n</div>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const c = document.getElementById('c');\n  const ctx = c.getContext('2d');\n  let drawing=false, last=null;\n  let color=document.getElementById('color').value;\n  let size=+document.getElementById('size').value;\n  const undoStack=[], redoStack=[];\n  const msgEl = document.getElementById('msg');\n\n  function flash(t){ msgEl.textContent=t; setTimeout(()=>msgEl.textContent='', 2000); }\n  function dpr(){ return window.devicePixelRatio || 1; }\n  function applyScale(){ ctx.setTransform(1,0,0,1,0,0); ctx.scale(dpr(), dpr()); }\n\n  function resize(){\n    const r=c.getBoundingClientRect();\n    const tmp=document.createElement('canvas');\n    tmp.width=c.width; tmp.height=c.height;\n    tmp.getContext('2d').drawImage(c,0,0);\n\n    c.width = Math.max(1, Math.round(r.width  * dpr()));\n    c.height= Math.max(1, Math.round(r.height * dpr()));\n    applyScale();\n    try { ctx.drawImage(tmp, 0,0, tmp.width, tmp.height, 0,0, c.width, c.height); } catch {}\n  }\n  new ResizeObserver(resize).observe(document.getElementById('wrap'));\n  setTimeout(resize,0);\n\n  function line(p1,p2){\n    ctx.strokeStyle=color; ctx.lineWidth=size; ctx.lineCap='round'; ctx.lineJoin='round';\n    ctx.beginPath(); ctx.moveTo(p1.x,p1.y); ctx.lineTo(p2.x,p2.y); ctx.stroke();\n  }\n  function pos(e){ const r=c.getBoundingClientRect(); return { x:e.clientX-r.left, y:e.clientY-r.top }; }\n\n  function makeSnap(){ return { w: c.width, h: c.height, url: c.toDataURL('image/png') }; }\n  function snapshot(){ try{ undoStack.push(makeSnap()); if(undoStack.length>30) undoStack.shift(); }catch{} redoStack.length=0; }\n  function restore(snap){\n    return new Promise(res=>{\n      const img=new Image();\n      img.onload=()=>{\n        ctx.setTransform(1,0,0,1,0,0);\n        ctx.clearRect(0,0,c.width,c.height);\n        ctx.drawImage(img, 0,0, snap.w, snap.h, 0,0, c.width, c.height);\n        applyScale();\n        res();\n      };\n      img.src=snap.url;\n    });\n  }\n\n  c.addEventListener('pointerdown', e=>{ e.preventDefault(); snapshot(); drawing=true; last=pos(e); });\n  c.addEventListener('pointermove', e=>{ if(!drawing) return; const p=pos(e); line(last,p); last=p; });\n  c.addEventListener('pointerup',   ()=>{ drawing=false; last=null; });\n  c.addEventListener('pointerleave',()=>{ drawing=false; last=null; });\n\n  document.getElementById('color').oninput=e=>color=e.target.value;\n  document.getElementById('size').oninput =e=>size=+e.target.value;\n\n  document.getElementById('undo').onclick = async ()=>{\n    if(!undoStack.length) return;\n    const snap = undoStack.pop();\n    redoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('redo').onclick = async ()=>{\n    if(!redoStack.length) return;\n    const snap = redoStack.pop();\n    undoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('clear').onclick = ()=>{\n    snapshot();\n    ctx.setTransform(1,0,0,1,0,0);\n    ctx.clearRect(0,0,c.width,c.height);\n    applyScale();\n  };\n\n  document.getElementById('export').onclick= ()=>{\n    try{\n      const url=c.toDataURL('image/png');\n      vscode.postMessage({ type:'exportPNG', dataURL: url });\n      flash('Exporting…');\n    }catch(e){ flash('Export failed'); }\n  };\n  window.addEventListener('message', e=>{\n    const m=e.data||{};\n    if(m.type==='exported'){\n      const name=(m.file||'').split(/[\\\\/]/).pop()||m.file;\n      flash('Saved: '+name);\n    }\n  });\n<\\/script>`;\n  }\n})();"
  },
  {
    "command": "sbh.demo.pomodoro",
    "text": "🍅 Pomodoro",
    "tooltip": "Open Pomodoro Timer",
    "hidden": true,
    "enableOnInit": true,
    "tags": [
      "default",
      "productivity"
    ],
    "script": "// @ts-check\n// 🍅 Pomodoro in Status Bar — Quick Pick (Start / Stop, auto-clean on abort)\nconst vscode = require('vscode');\nconst { setInterval, clearInterval } = require('timers');\nconst { randomUUID } = require('crypto');\nconst { vm } = statusBarHelper.v1;\n\n(function () {\n  const DEFAULT_MIN = 25;\n  const PRIORITY = 1000;\n  const KEY = '__SBH_POMODORO_SINGLETON__';\n  /** @type {{\n   *  item?: vscode.StatusBarItem,\n   *  timer?: NodeJS.Timeout|null,\n   *  endAt?: number,\n   *  mode?: 'idle'|'running',\n   *  minutes?: number,\n   *  cmdId?: string,\n   *  disposable?: vscode.Disposable|null\n   * }} */\n  const S = (globalThis[KEY] ||= {\n    timer: null, endAt: 0, mode: 'idle', minutes: DEFAULT_MIN, disposable: null\n  });\n\n  const fmt = (secs) => {\n    const m = Math.floor(secs / 60);\n    const s = secs % 60;\n    return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;\n  };\n\n  const createItem = () => {\n    if (!S.item) {\n      S.item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, PRIORITY);\n      S.item.command = getCommandId();\n      S.item.tooltip = 'Pomodoro — click to open menu';\n      S.item.show();\n    }\n  };\n\n  const getCommandId = () => {\n    if (!S.cmdId) S.cmdId = `sbh.pomodoro.menu.${randomUUID()}`;\n    if (!S.disposable) {\n      try {\n        S.disposable = vscode.commands.registerCommand(S.cmdId, openMenu);\n      } catch {}\n    }\n    return S.cmdId;\n  };\n\n  const update = () => {\n    if (!S.item) return;\n    if (S.mode !== 'running') {\n      S.item.text = `🍅 ${String(S.minutes).padStart(2,'0')}:00`;\n      S.item.tooltip = 'Pomodoro — click to open menu';\n      return;\n    }\n    const remain = Math.max(0, Math.ceil((S.endAt - Date.now()) / 1000));\n    S.item.text = `🍅 ${fmt(remain)}`;\n    S.item.tooltip = 'Counting down — click to open menu';\n    if (remain <= 0) finish();\n  };\n\n  const start = (minutes = S.minutes) => {\n    createItem();\n    clearTimer();\n    S.minutes = minutes;\n    S.endAt = Date.now() + minutes * 60 * 1000;\n    S.mode = 'running';\n    update();\n    S.timer = setInterval(update, 1000);\n    vscode.window.showInformationMessage(`🍅 Started ${minutes} minutes`);\n  };\n\n  const finish = () => {\n    clearTimer();\n    S.mode = 'idle';\n    update();\n    vscode.window.showInformationMessage('⏰ Time’s up! Take a break.');\n    vscode.window.showWarningMessage('⏰ Pomodoro is over! Start another round?', 'Restart', 'Cancel')\n      .then(choice => { if (choice === 'Restart') start(S.minutes); });\n  };\n\n  const closeAll = () => {\n    clearTimer();\n    S.mode = 'idle';\n    if (S.item) { S.item.dispose(); S.item = undefined; }\n    if (S.disposable) { S.disposable.dispose(); S.disposable = null; }\n    S.cmdId = undefined;\n  };\n\n  const clearTimer = () => {\n    if (S.timer) { clearInterval(S.timer); S.timer = null; }\n  };\n\n  async function openMenu() {\n    const remain = S.mode === 'running' ? Math.max(0, Math.ceil((S.endAt - Date.now())/1000)) : null;\n    /** @type {Array<{label:string, detail?:string, action:'start'|'close'|'custom'|'stop'}>} */\n    const picks = [];\n\n    if (S.mode === 'running') {\n      picks.push({ label: 'Stop', detail: `Stop current timer (remaining ${fmt(remain)})`, action: 'stop' });\n      picks.push({ label: 'Start', detail: `Restart ${S.minutes} minutes`, action: 'start' });\n    } else {\n      picks.push({ label: 'Start', detail: `Start ${S.minutes} minute timer`, action: 'start' });\n    }\n    picks.push({ label: 'Custom minutes…', detail: 'Enter 1–120 minutes to start', action: 'custom' });\n    picks.push({ label: 'Close', detail: 'Remove status bar item', action: 'close' });\n\n    const picked = await vscode.window.showQuickPick(picks, {\n      placeHolder: 'Pomodoro — choose an action',\n      ignoreFocusOut: true\n    });\n    if (!picked) return;\n\n    if (picked.action === 'start') start(S.minutes);\n    else if (picked.action === 'stop') { clearTimer(); S.mode = 'idle'; update(); }\n    else if (picked.action === 'close') closeAll();\n    else if (picked.action === 'custom') {\n      const v = await vscode.window.showInputBox({\n        prompt: 'Enter minutes (1–120)',\n        value: String(S.minutes),\n        validateInput: (s) => {\n          const n = Number(s);\n          if (!Number.isFinite(n) || n < 1 || n > 120) return 'Enter an integer between 1 and 120';\n          return null;\n        }\n      });\n      if (v) start(Number(v));\n    }\n  }\n\n  // Automatically clean up when externally stopped (e.g., rerun, delete, hide, script change, or disable).\n  vm.onStop(reason => {\n    try { closeAll(); } catch {}\n  });\n\n  createItem();\n  update();\n})();"
  },
  {
    "command": "sbh.demo.vmChatA",
    "text": "$(comment) Chat A",
    "tooltip": "VM messaging demo (A) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "vm"
    ],
    "script": "// VM Chat B — demonstrates vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop\n// Commands assumed:\n//   A: sbh.demo.vmChatA\n//   B: sbh.demo.vmChatB\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main () {\n  const SELF = 'sbh.demo.vmChatB';\n  const PEER = 'sbh.demo.vmChatA';\n  let panel;\n\n  vm.onStop(() => { try { panel?.dispose(); } catch {} });\n\n  function ensurePanel () {\n    if (panel) return panel;\n    panel = vscode.window.createWebviewPanel(\n      'sbhVmChatB',\n      'VM Chat B',\n      vscode.ViewColumn.Active,\n      { enableScripts: true, retainContextWhenHidden: true }\n    );\n    panel.onDidDispose(() => { try { vm.stop(); } catch {} });\n\n    const nonce = Math.random().toString(36).slice(2);\n    panel.webview.html = getHtml(nonce, 'B', SELF, PEER);\n    panel.webview.onDidReceiveMessage(onWebviewMessage);\n    return panel;\n  }\n\n  function log (line) { try { panel?.webview.postMessage({ type: 'append', line }); } catch {} }\n\n  function onWebviewMessage (msg) {\n    if (!msg || typeof msg !== 'object') return;\n\n    if (msg.type === 'send') {\n      const text = String(msg.text || '').trim();\n      if (!text) return;\n      vm.sendMessage(PEER, { from: SELF, text, at: Date.now() });\n      log('[me -> A] ' + text);\n    } else if (msg.type === 'openPeer') {\n      vm.open(PEER, { from: SELF, text: '👋 Hello (started from B)', at: Date.now() })\n        .catch(e => log('[open error] ' + (e?.message || e)));\n      log('[system] Requested to open A');\n    } else if (msg.type === 'stopPeer') {\n      try { vm.stopByCommand(PEER, { type: 'peerStop', from: SELF, at: Date.now() }); }\n      catch (e) { log('[stopPeer error] ' + (e?.message || e)); }\n      log('[system] Requested to stop A');\n    } else if (msg.type === 'stopSelf') {\n      try { vm.stop({ type: 'selfStop', from: SELF, at: Date.now() }); } catch {}\n    }\n  }\n\n  // Receive messages from peer\n  vm.onMessage((from, payload) => {\n    try {\n      if (from !== PEER) return; // Only show peer messages\n      const text = (payload && payload.text != null) ? String(payload.text) : JSON.stringify(payload);\n      const ts = new Date(payload?.at || Date.now()).toLocaleTimeString();\n      log('[A -> me @ ' + ts + '] ' + text);\n    } catch (e) {\n      log('[recv error] ' + (e?.message || e));\n    }\n  });\n\n  ensurePanel();\n  log('[system] Chat B ready. Use the buttons to interact with Chat A.');\n})();\n\nfunction getHtml (nonce, label, selfCmd, peerCmd) {\n  return `<!doctype html>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'\">\n<title>VM Chat ${label}</title>\n<style>\n  body{font-family:var(--vscode-font-family);margin:0;background:var(--vscode-editor-background);color:var(--vscode-foreground);}\n  header{padding:8px;border-bottom:1px solid var(--vscode-editorGroup-border);display:flex;gap:8px;align-items:center;flex-wrap:wrap;}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer;font-size:.9em;}\n  button:hover{background:var(--vscode-button-hoverBackground);}\n  input{flex:1;min-width:160px;padding:4px 6px;background:var(--vscode-input-background);color:var(--vscode-input-foreground);border:1px solid var(--vscode-input-border);border-radius:3px;}\n  #log{padding:8px;font:12px var(--vscode-editor-font-family,monospace);white-space:pre-wrap;overflow:auto;max-height:60vh;}\n  footer{padding:6px 8px;border-top:1px solid var(--vscode-editorGroup-border);font-size:11px;opacity:.7;}\n  .cmd{opacity:.7;font-size:.8em}\n</style>\n<header>\n  <strong>Chat ${label}</strong>\n  <button id=\"openPeer\" title=\"Start peer script if not running\">Open Peer</button>\n  <button id=\"stopPeer\" title=\"Stop peer script\">Stop Peer</button>\n  <button id=\"stopSelf\" title=\"Stop this script\">Stop Self</button>\n  <input id=\"msg\" placeholder=\"Type message…\" />\n  <button id=\"send\">Send</button>\n</header>\n<div id=\"log\" tabindex=\"0\"></div>\n<footer>self: <code>${selfCmd}</code> &nbsp; peer: <code>${peerCmd}</code> — Demonstrating vm.open / vm.sendMessage / vm.onMessage / vm.stopByCommand / vm.stop</footer>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const logEl = document.getElementById('log');\n\n  function append(line){\n    const at = new Date().toLocaleTimeString();\n    logEl.textContent += \\`[\\${at}] \\${line}\\\\n\\`;\n    logEl.scrollTop = logEl.scrollHeight;\n  }\n\n  append('script injected');\n\n  window.addEventListener('message', e => {\n    const m = e.data || {};\n    if (m.type === 'append') append(m.line);\n  });\n\n  document.getElementById('send').onclick = () => {\n    const el = document.getElementById('msg');\n    vscode.postMessage({ type: 'send', text: el.value });\n    el.value = '';\n  };\n\n  document.getElementById('openPeer').onclick = () => vscode.postMessage({ type: 'openPeer' });\n  document.getElementById('stopPeer').onclick = () => vscode.postMessage({ type: 'stopPeer' });\n  document.getElementById('stopSelf').onclick = () => vscode.postMessage({ type: 'stopSelf' });\n\n  document.getElementById('msg').addEventListener('keydown', e => {\n    if (e.key === 'Enter') document.getElementById('send').click();\n  });\n\n  append('UI loaded.');\n</script>`;\n}\n"
  },
  {
    "command": "sbh.demo.vmChatB",
    "text": "$(comment-discussion) Chat B",
    "tooltip": "VM messaging demo (B) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "vm"
    ],
    "script": "// chat B minimal\nconst { vm }=statusBarHelper.v1; (function(){ vm.stop(); })();"
  }
]