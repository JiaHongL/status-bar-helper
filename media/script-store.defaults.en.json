[
  {
    "command": "sbh.demo.logMinimalPlus",
    "text": "$(output) Log",
    "tooltip": "VS Code + Node. Output + bottom log",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "core"
    ],
"script": "// Minimal Log: VS Code + Node (read-only, one-click, dual output)\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n(function main(){ const ch = vscode.window.createOutputChannel('SBH Minimal Log'); const emit=(...a)=>{ const line=a.join(' '); ch.appendLine(line); console.log(line); }; ch.show(true); emit('▶ Start'); emit('Node: ' + process.version + '  Platform: ' + process.platform + '/' + process.arch); const ws=vscode.workspace.workspaceFolders; const root=ws&&ws.length?ws[0].uri.fsPath:process.cwd(); emit('Workdir: '+root); try { fs.readdirSync(root,{withFileTypes:true}).slice(0,8).forEach(e=>emit((e.isDirectory()?'[D] ':'[F] ')+e.name)); } catch(e){ emit('readdir failed: '+e.message); } const ed=vscode.window.activeTextEditor; if(ed&&ed.document.uri.scheme==='file'){ emit('Active file: '+path.basename(ed.document.uri.fsPath)+' ('+ed.document.languageId+')'); } emit('✔ Done'); vscode.window.showInformationMessage('Log demo finished.'); vm.stop(); })();"
  },
  {
    "command": "sbh.demo.gitAdd",
    "text": "$(diff-added) Git Add",
    "tooltip": "Stage all changes in the first workspace folder",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "git"
    ],
    "script": "// Git Add: stage all in first workspace (one-click)\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst { vm } = statusBarHelper.v1;\n(function main(){\n  const ws = vscode.workspace.workspaceFolders;\n  if (!ws || !ws.length) { console.log('[GitAdd] No workspace folder.'); vscode.window.showWarningMessage('No workspace folder — cannot run git add.'); vm.stop(); return; }\n  const cwd = ws[0].uri.fsPath;\n  console.log('[GitAdd] cwd:', cwd);\n  exec('git add .', { cwd }, (err, stdout, stderr) => {\n    if (err) { console.error('[GitAdd] error:', stderr || err.message); vscode.window.showErrorMessage('Git add failed: ' + (stderr || err.message)); vm.stop(); return; }\n    if (stdout && stdout.trim()) console.log(stdout.trim());\n    console.log('[GitAdd] done.');\n    vscode.window.showInformationMessage('✅ git add . done');\n    vm.stop();\n  });\n})();"
  },
  {
    "command": "sbh.demo.storage",
    "text": "$(database) Storage",
    "tooltip": "How to use the custom statusBarHelper API",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "storage"
    ],
    "script": "// Status Bar Helper v1: storage & files API demo\nconst { Buffer } = require('buffer');\nconst { storage, files, vm } = statusBarHelper.v1;\nfunction main() {\n  const now = () => new Date().toISOString().replace('T',' ').replace('Z','');\n  const dump = (x) => { if (x instanceof Uint8Array) return `Uint8Array(${x.length}) [${Array.from(x).slice(0,16).join(',')}${x.length>16?',…':''}]`; try { return JSON.stringify(x,null,2);} catch { return String(x);} };\n  const log = (...a)=>console.log('[SBH]', ...a.map(dump));\n  (async () => {\n    log('▶ start', now());\n    log('— storage / global —');\n    const gPrev = await storage.global.get('demo.keep', { runs: 0 });\n    await storage.global.set('demo.keep', { ...gPrev, runs:(gPrev.runs||0)+1, ts: now(), from:'global' });\n    log('get keep =', await storage.global.get('demo.keep', null));\n    log('keys =', await storage.global.keys());\n    log('— storage / workspace —');\n    try {\n      const wPrev = await storage.workspace.get('demo.keep', { runs: 0 });\n      await storage.workspace.set('demo.keep', { ...wPrev, runs:(wPrev.runs||0)+1, ts: now(), from:'workspace' });\n      log('get keep =', await storage.workspace.get('demo.keep', null));\n      log('keys =', await storage.workspace.keys());\n    } catch (e) { log('workspace storage not available:', e?.message || e); }\n    const dirs = await files.dirs(); log('dirs =', dirs);\n    const txtRel='demo/notes/hello.txt';\n    const txtOld=(await files.exists('global', txtRel))?await files.readText('global', txtRel):'';\n    await files.writeText('global', txtRel, txtOld + `hello @ ${now()}\n`);\n    log('readText:', await files.readText('global', txtRel));\n    const jsonScope = dirs.workspace ? 'workspace':'global';\n    const jsonRel='demo/data/sample.json';\n    const cur=(await files.exists(jsonScope, jsonRel))?await files.readJSON(jsonScope, jsonRel):{ a:1, createdAt: now() };\n    cur.updatedAt=now(); cur.count=(cur.count||0)+1; await files.writeJSON(jsonScope, jsonRel, cur);\n    log('readJSON:', await files.readJSON(jsonScope, jsonRel));\n    const binRel='demo/bin/demo.bin'; await files.writeBytes('global', binRel, new Uint8Array([1,2,3,4,5,254,255]));\n    log('readBytes demo.bin:', await files.readBytes('global', binRel));\n    const b64Rel='demo/bin/base64.bin'; await files.writeBytes('global', b64Rel, Buffer.from([9,8,7,6]).toString('base64'));\n    log('exists base64.bin:', await files.exists('global', b64Rel));\n    const candidates=[{scope:'global',rel:'demo/notes/hello.txt',type:'text'},{scope:jsonScope,rel:'demo/data/sample.json',type:'json'},{scope:'global',rel:'demo/bin/demo.bin',type:'bytes'},{scope:'global',rel:'demo/bin/base64.bin',type:'bytes'},{scope:'global',rel:'demo/tmp/kept.txt',type:'text'}];\n    const rows=[]; for (const c of candidates){ if (await files.exists(c.scope,c.rel)){ let size=0; if(c.type==='text'){ const s=await files.readText(c.scope,c.rel); size=Buffer.byteLength(s,'utf8'); } else if(c.type==='json'){ const o=await files.readJSON(c.scope,c.rel); size=Buffer.byteLength(JSON.stringify(o),'utf8'); } else { const b=await files.readBytes(c.scope,c.rel); size=b?.length||0; } rows.push({ scope:c.scope, path:c.rel, type:c.type, size }); }}\n    log('files (simulated list):', rows);\n    log('✔ done', now()); vm.stop();\n  })().catch(e=>{ console.error('❌', e); vm.stop(); });\n}\nmain();"
  },
  {
    "command": "sbh.demo.toggleTheme",
    "text": "$(color-mode)",
    "tooltip": "Toggle between light and dark theme",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Toggle between Light and Dark themes\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n(async () => { try { await vscode.commands.executeCommand('workbench.action.toggleLightDarkThemes'); } catch (e) { vscode.window.showErrorMessage('Toggle theme failed: ' + (e?.message || e)); } finally { vm.stop(); } })();"
  },
  {
    "command": "sbh.demo.whiteboard",
    "text": "$(paintcan) Board",
    "tooltip": "Board",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "ui"
    ],
    "script": "// Whiteboard (no save) minimal\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n(function main(){ const panel = vscode.window.createWebviewPanel('sbhWhiteboard','Whiteboard — Draw Only',vscode.ViewColumn.Active,{ enableScripts:true, retainContextWhenHidden:true }); vm.onStop(()=>{ try { panel.dispose(); } catch {} }); panel.onDidDispose(()=>{ vm.stop(); }); const nonce=Math.random().toString(36).slice(2); panel.webview.html=getHtml(nonce); panel.webview.onDidReceiveMessage(async (msg)=>{ if(msg?.type!=='exportPNG'||typeof msg.dataURL!=='string') return; try { const now=new Date(); const y=now.getFullYear(); const m=String(now.getMonth()+1).padStart(2,'0'); const d=String(now.getDate()).padStart(2,'0'); const hh=String(now.getHours()).padStart(2,'0'); const mm=String(now.getMinutes()).padStart(2,'0'); const ss=String(now.getSeconds()).padStart(2,'0'); const defaultName=`whiteboard-${y}${m}${d}-${hh}${mm}${ss}.png`; const uri=await vscode.window.showSaveDialog({ saveLabel:'Export PNG', defaultUri:vscode.Uri.file(path.join(process.cwd(), defaultName)), filters:{ 'PNG Image':['png'] } }); if(!uri) return; const base64=msg.dataURL.split(',')[1]||''; fs.writeFileSync(uri.fsPath, Buffer.from(base64,'base64')); vscode.window.showInformationMessage(`✅ Exported: ${path.basename(uri.fsPath)}`); panel.webview.postMessage({ type:'exported', file: uri.fsPath }); } catch(e){ vscode.window.showErrorMessage('Export failed: ' + (e?.message || e)); } }); function getHtml(nonce){ return `<!doctype html>\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n<title>Whiteboard (Draw Only)</title>\n<style>:root{ --h:32px } body{font-family:var(--vscode-font-family);color:var(--vscode-foreground);background:var(--vscode-editor-background);margin:0}.bar{display:flex;align-items:center;gap:8px;border-bottom:1px solid var(--vscode-editorGroup-border);padding:6px 8px;height:var(--h);user-select:none;background:var(--vscode-sideBar-background)}.bar input[type=color]{width:28px;height:20px;border:1px solid var(--vscode-input-border);background:var(--vscode-input-background)}.bar input[type=range]{width:120px}button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer}button:hover{background:var(--vscode-button-hoverBackground)}#wrap{position:relative;height:calc(100vh - var(--h) - 2px)}canvas{width:100%;height:100%}#grid{position:absolute;inset:0;background:linear-gradient(to right, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px,linear-gradient(to bottom, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px;pointer-events:none;opacity:.2}#msg{margin-left:auto;opacity:.85;font-size:.9em}</style>\n<div class=bar><span>Color</span><input id=color type=color value=#00d3a7><span>Size</span><input id=size type=range min=1 max=32 value=4><button id=undo>Undo</button><button id=redo>Redo</button><button id=clear>Clear</button><span style=flex:1></span><button id=export>Export PNG</button><span id=msg></span></div>\n<div id=wrap><canvas id=c></canvas><div id=grid></div></div>\n<script nonce=${nonce}>const vscode=acquireVsCodeApi();const c=document.getElementById('c');const ctx=c.getContext('2d');let drawing=false,last=null;let color=document.getElementById('color').value;let size=+document.getElementById('size').value;const undoStack=[],redoStack=[];const msgEl=document.getElementById('msg');function flash(t){ msgEl.textContent=t; setTimeout(()=>msgEl.textContent='',2000);}function dpr(){ return window.devicePixelRatio||1;}function applyScale(){ ctx.setTransform(1,0,0,1,0,0); ctx.scale(dpr(),dpr());}function resize(){ const r=c.getBoundingClientRect(); const tmp=document.createElement('canvas'); tmp.width=c.width; tmp.height=c.height; tmp.getContext('2d').drawImage(c,0,0); c.width=Math.max(1,Math.round(r.width*dpr())); c.height=Math.max(1,Math.round(r.height*dpr())); applyScale(); try{ ctx.drawImage(tmp,0,0,tmp.width,tmp.height,0,0,c.width,c.height);}catch{}} new ResizeObserver(resize).observe(document.getElementById('wrap')); setTimeout(resize,0);function line(p1,p2){ ctx.strokeStyle=color; ctx.lineWidth=size; ctx.lineCap='round'; ctx.lineJoin='round'; ctx.beginPath(); ctx.moveTo(p1.x,p1.y); ctx.lineTo(p2.x,p2.y); ctx.stroke();}function pos(e){ const r=c.getBoundingClientRect(); return { x:e.clientX-r.left, y:e.clientY-r.top }; }function makeSnap(){ return { w:c.width, h:c.height, url:c.toDataURL('image/png') }; }function snapshot(){ try{ undoStack.push(makeSnap()); if(undoStack.length>30) undoStack.shift(); }catch{} redoStack.length=0; }function restore(snap){ return new Promise(res=>{ const img=new Image(); img.onload=()=>{ ctx.setTransform(1,0,0,1,0,0); ctx.clearRect(0,0,c.width,c.height); ctx.drawImage(img,0,0,snap.w,snap.h,0,0,c.width,c.height); applyScale(); res(); }; img.src=snap.url; }); } c.addEventListener('pointerdown', e=>{ e.preventDefault(); snapshot(); drawing=true; last=pos(e); }); c.addEventListener('pointermove', e=>{ if(!drawing) return; const p=pos(e); line(last,p); last=p; }); c.addEventListener('pointerup',()=>{ drawing=false; last=null; }); c.addEventListener('pointerleave',()=>{ drawing=false; last=null; }); document.getElementById('color').oninput=e=>color=e.target.value; document.getElementById('size').oninput=e=>size=+e.target.value; document.getElementById('undo').onclick=async()=>{ if(!undoStack.length) return; const snap=undoStack.pop(); redoStack.push(makeSnap()); await restore(snap); }; document.getElementById('redo').onclick=async()=>{ if(!redoStack.length) return; const snap=redoStack.pop(); undoStack.push(makeSnap()); await restore(snap); }; document.getElementById('clear').onclick=()=>{ snapshot(); ctx.setTransform(1,0,0,1,0,0); ctx.clearRect(0,0,c.width,c.height); applyScale(); }; document.getElementById('export').onclick=()=>{ try{ const url=c.toDataURL('image/png'); vscode.postMessage({ type:'exportPNG', dataURL:url }); flash('Exporting…'); }catch(e){ flash('Export failed'); } }; window.addEventListener('message', e=>{ const m=e.data||{}; if(m.type==='exported'){ const name=(m.file||'').split(/[\\\\/]/).pop()||m.file; flash('Saved: '+name); } });</script>`; } })();"
  },
  {
    "command": "sbh.demo.pomodoro",
    "text": "🍅 Pomodoro",
    "tooltip": "Open Pomodoro Timer",
    "hidden": true,
    "enableOnInit": true,
    "tags": [
      "default",
      "productivity"
    ],
    "script": "// Pomodoro timer\nconst vscode=require('vscode'); const { setInterval, clearInterval } = require('timers'); const { randomUUID } = require('crypto'); const { vm } = statusBarHelper.v1; (function(){ const DEFAULT_MIN=25; const PRIORITY=1000; const KEY='__SBH_POMODORO_SINGLETON__'; const S=(globalThis[KEY] ||= { timer:null,endAt:0,mode:'idle',minutes:DEFAULT_MIN,disposable:null }); const fmt=(secs)=>{ const m=Math.floor(secs/60); const s=secs%60; return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`; }; const createItem=()=>{ if(!S.item){ S.item=vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, PRIORITY); S.item.command=getCommandId(); S.item.tooltip='Pomodoro — click to open menu'; S.item.show(); } }; const getCommandId=()=>{ if(!S.cmdId) S.cmdId=`sbh.pomodoro.menu.${randomUUID()}`; if(!S.disposable){ try{ S.disposable=vscode.commands.registerCommand(S.cmdId, openMenu); }catch{} } return S.cmdId; }; const update=()=>{ if(!S.item) return; if(S.mode!=='running'){ S.item.text=`🍅 ${String(S.minutes).padStart(2,'0')}:00`; S.item.tooltip='Pomodoro — click to open menu'; return; } const remain=Math.max(0, Math.ceil((S.endAt-Date.now())/1000)); S.item.text=`🍅 ${fmt(remain)}`; S.item.tooltip='Counting down — click to open menu'; if(remain<=0) finish(); }; const start=(minutes=S.minutes)=>{ createItem(); clearTimer(); S.minutes=minutes; S.endAt=Date.now()+minutes*60*1000; S.mode='running'; update(); S.timer=setInterval(update,1000); vscode.window.showInformationMessage(`🍅 Started ${minutes} minutes`); }; const finish=()=>{ clearTimer(); S.mode='idle'; update(); vscode.window.showInformationMessage('⏰ Time’s up! Take a break.'); vscode.window.showWarningMessage('⏰ Pomodoro is over! Start another round?', 'Restart', 'Cancel').then(c=>{ if(c==='Restart') start(S.minutes); }); }; const closeAll=()=>{ clearTimer(); S.mode='idle'; if(S.item){ S.item.dispose(); S.item=undefined; } if(S.disposable){ S.disposable.dispose(); S.disposable=null; } S.cmdId=undefined; vm.stop(); }; const clearTimer=()=>{ if(S.timer){ clearInterval(S.timer); S.timer=null; } }; async function openMenu(){ const remain=S.mode==='running'?Math.max(0,Math.ceil((S.endAt-Date.now())/1000)):null; const picks=[]; if(S.mode==='running'){ picks.push({ label:'Stop', detail:`Stop current timer (remaining ${fmt(remain)})`, action:'stop' }); picks.push({ label:'Start', detail:`Restart ${S.minutes} minutes`, action:'start' }); } else { picks.push({ label:'Start', detail:`Start ${S.minutes} minute timer`, action:'start' }); } picks.push({ label:'Custom minutes…', detail:'Enter 1–120 minutes to start', action:'custom' }); picks.push({ label:'Close', detail:'Remove status bar item', action:'close' }); const picked=await vscode.window.showQuickPick(picks,{ placeHolder:'Pomodoro — choose an action', ignoreFocusOut:true }); if(!picked) return; if(picked.action==='start') start(S.minutes); else if(picked.action==='stop'){ clearTimer(); S.mode='idle'; update(); } else if(picked.action==='close') closeAll(); else if(picked.action==='custom'){ const v=await vscode.window.showInputBox({ prompt:'Enter minutes (1–120)', value:String(S.minutes), validateInput:(s)=>{ const n=Number(s); if(!Number.isFinite(n)||n<1||n>120) return 'Enter an integer between 1 and 120'; return null; } }); if(v) start(Number(v)); } } vm.onStop(()=>{ try{ closeAll(); }catch{} }); createItem(); update(); })();"
  },
  {
    "command": "sbh.demo.vmChatA",
    "text": "$(comment) Chat A",
    "tooltip": "VM messaging demo (A) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "vm"
    ],
    "script": "// VM Chat A demo\nconst vscode=require('vscode'); const { vm }=statusBarHelper.v1; (function main(){ const SELF='sbh.demo.vmChatA'; const PEER='sbh.demo.vmChatB'; let panel; vm.onStop(()=>{ try{ panel?.dispose(); }catch{} }); function ensurePanel(){ if(panel) return panel; panel=vscode.window.createWebviewPanel('sbhVmChatA','VM Chat A',vscode.ViewColumn.Active,{ enableScripts:true, retainContextWhenHidden:true }); panel.onDidDispose(()=>{ try{ vm.stop(); }catch{} }); const nonce=Math.random().toString(36).slice(2); panel.webview.html=getHtml(nonce,'A',SELF,PEER); panel.webview.onDidReceiveMessage(onWebviewMessage); return panel; } function log(line){ try{ panel?.webview.postMessage({ type:'append', line }); }catch{} } function onWebviewMessage(msg){ if(!msg||typeof msg!=='object') return; if(msg.type==='send'){ const text=String(msg.text||'').trim(); if(!text) return; vm.sendMessage(PEER,{ from:SELF, text, at:Date.now() }); log('[me -> B] '+text); } else if(msg.type==='openPeer'){ vm.open(PEER,{ from:SELF, text:'👋 Hello (started from A)', at:Date.now() }).catch(e=>log('[open error] '+(e?.message||e))); log('[system] Requested to open B'); } else if(msg.type==='stopPeer'){ try{ vm.stopByCommand(PEER,{ type:'peerStop', from:SELF, at:Date.now() }); }catch(e){ log('[stopPeer error] '+(e?.message||e)); } log('[system] Requested to stop B'); } else if(msg.type==='stopSelf'){ try{ vm.stop({ type:'selfStop', from:SELF, at:Date.now() }); }catch{} } } vm.onMessage((from,payload)=>{ try{ if(from!==PEER) return; const text=(payload && payload.text!=null)?String(payload.text):JSON.stringify(payload); const ts=new Date(payload?.at||Date.now()).toLocaleTimeString(); log('[B -> me @ '+ts+'] '+text); }catch(e){ log('[recv error] '+(e?.message||e)); } }); ensurePanel(); log('[system] Chat A ready. Use the buttons to interact with Chat B.'); })(); function getHtml(nonce,label,selfCmd,peerCmd){ return `<!doctype html>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'\">\n<title>VM Chat ${label}</title>\n<style>body{font-family:var(--vscode-font-family);margin:0;background:var(--vscode-editor-background);color:var(--vscode-foreground);}header{padding:8px;border-bottom:1px solid var(--vscode-editorGroup-border);display:flex;gap:8px;align-items:center;flex-wrap:wrap;}button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer;font-size:.9em;}button:hover{background:var(--vscode-button-hoverBackground);}input{flex:1;min-width:160px;padding:4px 6px;background:var(--vscode-input-background);color:var(--vscode-input-foreground);border:1px solid var(--vscode-input-border);border-radius:3px;}#log{padding:8px;font:12px var(--vscode-editor-font-family,monospace);white-space:pre-wrap;overflow:auto;max-height:60vh;}footer{padding:6px 8px;border-top:1px solid var(--vscode-editorGroup-border);font-size:11px;opacity:.7;}.cmd{opacity:.7;font-size:.8em}</style>\n<header><strong>Chat ${label}</strong><button id=openPeer title=\"Start peer script if not running\">Open Peer</button><button id=stopPeer title=\"Stop peer script\">Stop Peer</button><button id=stopSelf title=\"Stop this script\">Stop Self</button><input id=msg placeholder=\"Type message…\" /><button id=send>Send</button></header>\n<div id=log tabindex=0></div>\n<footer>self: <code>${selfCmd}</code> &nbsp; peer: <code>${peerCmd}</code></footer>\n<script nonce=${nonce}>const vscode=acquireVsCodeApi();const logEl=document.getElementById('log');function append(line){ const at=new Date().toLocaleTimeString(); logEl.textContent+=`[${at}] ${line}\n`; logEl.scrollTop=logEl.scrollHeight;}append('script injected');window.addEventListener('message', e=>{ const m=e.data||{}; if(m.type==='append') append(m.line); });document.getElementById('send').onclick=()=>{ const el=document.getElementById('msg'); vscode.postMessage({ type:'send', text:el.value }); el.value=''; };document.getElementById('openPeer').onclick=()=>vscode.postMessage({ type:'openPeer' });document.getElementById('stopPeer').onclick=()=>vscode.postMessage({ type:'stopPeer' });document.getElementById('stopSelf').onclick=()=>vscode.postMessage({ type:'stopSelf' });document.getElementById('msg').addEventListener('keydown', e=>{ if(e.key==='Enter') document.getElementById('send').click(); });append('UI loaded.');</script>`; }"
  },
  {
    "command": "sbh.demo.vmChatB",
    "text": "$(comment-discussion) Chat B",
    "tooltip": "VM messaging demo (B) — uses vm.open/sendMessage/onMessage",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "vm"
    ],
    "script": "// VM Chat B demo (mirrors A)\nconst vscode=require('vscode'); const { vm }=statusBarHelper.v1; (function main(){ const SELF='sbh.demo.vmChatB'; const PEER='sbh.demo.vmChatA'; let panel; vm.onStop(()=>{ try{ panel?.dispose(); }catch{} }); function ensurePanel(){ if(panel) return panel; panel=vscode.window.createWebviewPanel('sbhVmChatB','VM Chat B',vscode.ViewColumn.Active,{ enableScripts:true, retainContextWhenHidden:true }); panel.onDidDispose(()=>{ try{ vm.stop(); }catch{} }); const nonce=Math.random().toString(36).slice(2); panel.webview.html=getHtml(nonce,'B',SELF,PEER); panel.webview.onDidReceiveMessage(onWebviewMessage); return panel; } function log(line){ try{ panel?.webview.postMessage({ type:'append', line }); }catch{} } function onWebviewMessage(msg){ if(!msg||typeof msg!=='object') return; if(msg.type==='send'){ const text=String(msg.text||'').trim(); if(!text) return; vm.sendMessage(PEER,{ from:SELF, text, at:Date.now() }); log('[me -> A] '+text); } else if(msg.type==='openPeer'){ vm.open(PEER,{ from:SELF, text:'👋 Hello (started from B)', at:Date.now() }).catch(e=>log('[open error] '+(e?.message||e))); log('[system] Requested to open A'); } else if(msg.type==='stopPeer'){ try{ vm.stopByCommand(PEER,{ type:'peerStop', from:SELF, at:Date.now() }); }catch(e){ log('[stopPeer error] '+(e?.message||e)); } log('[system] Requested to stop A'); } else if(msg.type==='stopSelf'){ try{ vm.stop({ type:'selfStop', from:SELF, at:Date.now() }); }catch{} } } vm.onMessage((from,payload)=>{ try{ if(from!==PEER) return; const text=(payload && payload.text!=null)?String(payload.text):JSON.stringify(payload); const ts=new Date(payload?.at||Date.now()).toLocaleTimeString(); log('[A -> me @ '+ts+'] '+text); }catch(e){ log('[recv error] '+(e?.message||e)); } }); ensurePanel(); log('[system] Chat B ready. Use the buttons to interact with Chat A.'); })(); function getHtml(nonce,label,selfCmd,peerCmd){ return `<!doctype html>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'\">\n<title>VM Chat ${label}</title>\n<style>body{font-family:var(--vscode-font-family);margin:0;background:var(--vscode-editor-background);color:var(--vscode-foreground);}header{padding:8px;border-bottom:1px solid var(--vscode-editorGroup-border);display:flex;gap:8px;align-items:center;flex-wrap:wrap;}button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer;font-size:.9em;}button:hover{background:var(--vscode-button-hoverBackground);}input{flex:1;min-width:160px;padding:4px 6px;background:var(--vscode-input-background);color:var(--vscode-input-foreground);border:1px solid var(--vscode-input-border);border-radius:3px;}#log{padding:8px;font:12px var(--vscode-editor-font-family,monospace);white-space:pre-wrap;overflow:auto;max-height:60vh;}footer{padding:6px 8px;border-top:1px solid var(--vscode-editorGroup-border);font-size:11px;opacity:.7;}.cmd{opacity:.7;font-size:.8em}</style>\n<header><strong>Chat ${label}</strong><button id=openPeer title=\"Start peer script if not running\">Open Peer</button><button id=stopPeer title=\"Stop peer script\">Stop Peer</button><button id=stopSelf title=\"Stop this script\">Stop Self</button><input id=msg placeholder=\"Type message…\" /><button id=send>Send</button></header>\n<div id=log tabindex=0></div>\n<footer>self: <code>${selfCmd}</code> &nbsp; peer: <code>${peerCmd}</code></footer>\n<script nonce=${nonce}>const vscode=acquireVsCodeApi();const logEl=document.getElementById('log');function append(line){ const at=new Date().toLocaleTimeString(); logEl.textContent+=`[${at}] ${line}\n`; logEl.scrollTop=logEl.scrollHeight;}append('script injected');window.addEventListener('message', e=>{ const m=e.data||{}; if(m.type==='append') append(m.line); });document.getElementById('send').onclick=()=>{ const el=document.getElementById('msg'); vscode.postMessage({ type:'send', text:el.value }); el.value=''; };document.getElementById('openPeer').onclick=()=>vscode.postMessage({ type:'openPeer' });document.getElementById('stopPeer').onclick=()=>vscode.postMessage({ type:'stopPeer' });document.getElementById('stopSelf').onclick=()=>vscode.postMessage({ type:'stopSelf' });document.getElementById('msg').addEventListener('keydown', e=>{ if(e.key==='Enter') document.getElementById('send').click(); });append('UI loaded.');</script>`; }"
  }
]