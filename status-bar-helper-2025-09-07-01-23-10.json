[
  {
    "command": "sbh.demo.toggleTheme",
    "text": "$(color-mode)",
    "tooltip": "切換亮/暗色主題",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "example",
      "ui"
    ],
    "script": "// Toggle between Light and Dark themes in VS Code (one-click)\n// Purpose: Demonstrates how to trigger a built-in VS Code command from a script\n// Note: This uses 'workbench.action.toggleLightDarkThemes' which toggles the current color theme\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(async () => {\n  try {\n    // Execute the built-in toggle theme command\n    await vscode.commands.executeCommand('workbench.action.toggleLightDarkThemes');\n  } catch (e) {\n    // Show an error message in VS Code if the command fails\n    vscode.window.showErrorMessage('Toggle theme failed: ' + (e?.message || e));\n  } finally {\n    vm.stop();\n  }\n})();"
  },
  {
    "command": "my.new.command.1754486157410",
    "text": "$(repo-create) Git add",
    "tooltip": "執行 git add .",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process'); \nconst { vm } = statusBarHelper.v1;\n\n// Your script here\nconst workspaceFolders = vscode.workspace.workspaceFolders;\nif (!workspaceFolders) return;\nif (workspaceFolders && workspaceFolders.length > 0) {\n  const cwd = workspaceFolders[0].uri.fsPath;\n  exec('git add .', { cwd }, (err, stdout, stderr) => {\n    if (err) {\n      vscode.window.showErrorMessage(`Git Add 失敗：\\\\n${stderr}`);\n    } else {\n      vscode.window.showInformationMessage('✅ git add . 執行成功');\n    }\n    vm.stop();\n  });\n} else {\n  vscode.window.showWarningMessage('找不到工作區，無法執行 git add');\n  vm.stop();\n}\n"
  },
  {
    "command": "my.new.command.1754493090175",
    "text": "$(repo-pull) SubUpd",
    "tooltip": "執行 git submodule update --init --recursive",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst { vm } = statusBarHelper.v1;\n\n// Your script here\nconst workspaceFolders = vscode.workspace.workspaceFolders;\nif (!workspaceFolders) return;\nconst cwd = workspaceFolders[0].uri.fsPath;\n\nexec('git submodule update --init --recursive', { cwd }, (err, stdout, stderr) => {\n    if (err) vscode.window.showErrorMessage(`Submodule update 失敗：\\n${stderr}`);\n    else vscode.window.showInformationMessage('✅ Submodule update 成功');\n    vm.stop();\n});"
  },
  {
    "command": "my.new.1754507300651",
    "text": "$(repo-clone) TMS",
    "tooltip": "將選取的 OTP-多語系總表.xlsx 轉成 i18n 檔案，並覆蓋 src/assets/static/i18n",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst fsp = require('fs').promises;\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\nconst workspaceFolders = vscode.workspace.workspaceFolders;\nif (!workspaceFolders) return;\nconst cwd = workspaceFolders[0].uri.fsPath;\n\nconst uri = (vscode.window.tabGroups.activeTabGroup?.activeTab?.input)?.uri;\nif (!uri || uri.scheme !== 'file' || !uri.fsPath.endsWith('.xlsx')) {\n  vscode.window.showWarningMessage('請選取一個 .xlsx 檔案再執行 TMS Transform');\n  vm.stop();\n  return;\n}\n\nconst excelPath = uri.fsPath;\nconst tmsPath = path.join(cwd, 'tms');\nconst targetPath = path.join(cwd, 'src/assets/static/i18n');\n\nexec(`otp transform-tms-i18n \"${excelPath}\"`, { cwd }, async (err, stdout, stderr) => {\n  if (err) {\n    vscode.window.showErrorMessage(`OTP Transform 失敗：\\n${stderr}`);\n    vm.stop();\n    return;\n  }\n\n  if (!fs.existsSync(tmsPath)) {\n    vscode.window.showWarningMessage('轉換成功但找不到 tms 資料夾');\n    vm.stop();\n    return;\n  }\n\n  try {\n    await copyFilesRecursive(tmsPath, targetPath);\n    await fsp.rm(tmsPath, { recursive: true, force: true });\n    await fsp.rm(excelPath, { recursive: true, force: true });\n    vscode.window.showInformationMessage('✅ 已完成轉換、覆蓋 i18n 並刪除原始檔');\n    vm.stop();\n  } catch (copyErr) {\n    vscode.window.showErrorMessage(`處理過程中發生錯誤：${copyErr}`);\n    vm.stop();\n  }\n});\n\nasync function copyFilesRecursive(src, dest) {\n  await fsp.mkdir(dest, { recursive: true });\n  const entries = await fsp.readdir(src, { withFileTypes: true });\n\n  for (const entry of entries) {\n    const srcPath = path.join(src, entry.name);\n    const destPath = path.join(dest, entry.name);\n\n    if (entry.isDirectory()) {\n      await copyFilesRecursive(srcPath, destPath);\n    } else {\n      await fsp.copyFile(srcPath, destPath);\n    }\n  }\n}"
  },
  {
    "command": "my.new.1754546900100",
    "text": "$(unlock) Log",
    "tooltip": "選取 log.txt 檔案後執行 otp decrypt，輸出 dec.log",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst fsp = require('fs').promises;\nconst path = require('path');\nconst process = require('process');\nconst util = require('util');\nconst { vm } = statusBarHelper.v1;\n\n\n// Your script here \nconst uri = (vscode.window.tabGroups.activeTabGroup?.activeTab?.input)?.uri;\nif (!uri || uri.scheme !== 'file') {\n    vscode.window.showWarningMessage('請選取 log.txt 檔案再執行 OTP Decrypt');\n    vm.stop();\n    return;\n}\n\nconst filePath = uri.fsPath;\nconst ext = path.extname(filePath);\nconst rawName = path.basename(filePath, ext);\nconst dirname = path.dirname(filePath);\nconst outputPath = path.join(dirname, `${rawName}.dec.log`);\n\nif (ext !== '.txt' || !rawName.includes('log')) {\n    vscode.window.showWarningMessage('僅支援 .txt 且名稱包含 log 的檔案');\n    vm.stop();\n    return;\n}\n\nconst command = `otp decrypt \"${filePath}\" --type log --output \"${outputPath}\"`;\nexec(command, { cwd: dirname }, (err, stdout, stderr) => {\n    if (err) vscode.window.showErrorMessage(`OTP Decrypt 失敗：\\n${stderr}`);\n    else vscode.window.showInformationMessage(`✅ 解密成功，輸出至 ${outputPath}`);\n    vm.stop();\n});\n"
  },
  {
    "command": "my.new.1754547122342",
    "text": "$(unlock) SL",
    "tooltip": "解密選取的 serverListConfig.txt 為 .json",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\n// Your script here \nconst uri = (vscode.window.tabGroups.activeTabGroup?.activeTab?.input)?.uri;\nif (!uri || uri.scheme !== 'file' || !uri.fsPath.endsWith('Config.txt')) {\n    vscode.window.showWarningMessage('請選取 serverListConfig.txt 再執行解密');\n    vm.stop();\n    return;\n}\n\nconst inputPath = uri.fsPath;\nconst outputPath = inputPath.replace(/\\.txt$/, '.json');\nconst command = `otp decrypt \"${inputPath}\" --output \"${outputPath}\"`;\n\nexec(command, { cwd: path.dirname(inputPath) }, (err, stdout, stderr) => {\n    if (err) vscode.window.showErrorMessage(`解密失敗：${stderr}`);\n    else vscode.window.showInformationMessage(`✅ 解密成功，已輸出 ${outputPath}`);\n    vm.stop();\n});"
  },
  {
    "command": "my.new.1754547137764",
    "text": "$(lock) SL",
    "tooltip": "加密選取的 serverListConfig.json 為 .txt",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\n// Your script here\nconst uri = (vscode.window.tabGroups.activeTabGroup?.activeTab?.input)?.uri;\nif (!uri || uri.scheme !== 'file' || !uri.fsPath.endsWith('serverListConfig.json')) {\n    vscode.window.showWarningMessage('請選取 serverListConfig.json 再執行加密');\n    vm.stop();\n    return;\n}\n\nconst inputPath = uri.fsPath;\nconst outputPath = inputPath.replace(/\\.json$/, '.txt');\nconst command = `otp encrypt \"${inputPath}\" --output \"${outputPath}\"`;\n\nexec(command, { cwd: path.dirname(inputPath) }, (err, stdout, stderr) => {\n    if (err) vscode.window.showErrorMessage(`加密失敗：${stderr}`);\n    else vscode.window.showInformationMessage(`✅ 加密成功，已輸出 ${outputPath}`);\n    vm.stop();\n}); "
  },
  {
    "command": "my.new.1754547203388",
    "text": "$(versions) Bump Ver",
    "tooltip": "依分支自動執行 npm version + tag",
    "hidden": false,
    "enableOnInit": false,
    "script": "// Please require any Node.js modules your script needs here\nconst vscode = require('vscode');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst fsp = require('fs').promises;\nconst path = require('path');\nconst process = require('process');\nconst { promisify }  = require('util');\nconst execAsync = promisify(exec);\nconst { vm } = statusBarHelper.v1;\n\n// Your script here \nasync function main() {\n    // 最前面加一個 modal 確認提示\n    const choice = await vscode.window.showInformationMessage(\n      '是否要執行「打版號」動作？（會嘗試 npm version + push git tag）',\n      { modal: true },\n      '是',\n      '否'\n    );\n    if (choice !== '是') {\n      // 使用者取消\n      vm.stop();\n      return;\n    }\n\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) return;\n    const cwd = workspaceFolders[0].uri.fsPath;\n    const pkgPath = path.join(cwd, 'package.json');\n\n    let pkg;\n    try {\n        pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));\n    } catch {\n        vscode.window.showErrorMessage('無法讀取 package.json');\n        vm.stop();\n        return;\n    }\n\n    let currentVersion = pkg.version; // 例如 6.39.0-sp91001\n    const baseVersion = currentVersion.split('-')[0]; // 例如 6.39.0\n    const tags = (await execAsync('git tag', { cwd })).stdout.split('\\n').filter(Boolean);\n    let newTag = '';\n\n    const match = currentVersion.match(/-(sp\\d+|uat|hotfix\\d{8})(\\d{3})$/);\n    if (!match) {\n        vscode.window.showErrorMessage(`❌ 無法解析版本號尾碼，只處理 sp / uat / hotfix 類型`);\n        vm.stop();\n        return;\n    }\n\n    // 🔒 分支合法性檢查\n    const branch = (await execAsync('git rev-parse --abbrev-ref HEAD', { cwd })).stdout.trim();\n    const prefix = match[1];\n\n\n    if (prefix.startsWith('sp')) {\n        const sprintNum = prefix.slice(2); // sp91 → 91\n        if (!branch.startsWith(`sprint/${sprintNum}`)) {\n            vscode.window.showErrorMessage(`❌ 僅能在 sprint/${sprintNum} 分支上打 ${prefix} tag，當前為 ${branch}`);\n            vm.stop();\n            return;\n        }\n    } else if (prefix === 'uat') {\n        if (branch !== 'develop') {\n            vscode.window.showErrorMessage(`❌ 僅能在 develop 分支上打 uat tag，當前為 ${branch}`);\n            vm.stop();\n            return;\n        }\n    } else if (prefix.startsWith('hotfix')) {\n        const dateStr = prefix.slice(6);\n        if (!branch.startsWith(`hotfix/${dateStr}`)) {\n            vscode.window.showErrorMessage(`❌ 僅能在 hotfix/${dateStr} 分支上打 hotfix tag，當前為 ${branch}`);\n            vm.stop();\n            return;\n        }\n    }\n\n    const currentNum = parseInt(match[2]); // 001 → 1\n    const nextNum = currentNum + 1;\n\n    newTag = `${baseVersion}-${prefix}${String(nextNum).padStart(3, '0')}`;\n\n    const fullTag = `v${newTag}`;\n    if (tags.includes(fullTag)) {\n        vscode.window.showErrorMessage(`❌ tag ${fullTag} 已存在`);\n        vm.stop();\n        return;\n    }\n\n    try {\n        vscode.window.showInformationMessage(`✅ bumping version: ${currentVersion} → ${newTag}`);\n        await execAsync(`npm version ${newTag}`, { cwd });\n        await execAsync(`git push`, { cwd });\n        await execAsync(`git push origin ${fullTag}`, { cwd });\n        vscode.window.showInformationMessage(`✅ 已建立並推送版本 tag：${fullTag}`);\n        vm.stop();\n    } catch (err) {\n        vscode.window.showErrorMessage(`❌ bump version 失敗：${err.stderr || err.message}`);\n        vm.stop();\n    }\n}\nmain();"
  },
  {
    "command": "cmd.k4a7ng46uk",
    "text": "$(device-desktop) Env",
    "tooltip": "",
    "hidden": false,
    "enableOnInit": false,
    "script": "// sbh - Angular environment 切換（改進：只有在需要時才執行 git checkout）\n// 路徑：projects/trading-lib/src/multiple-network-connections/assets/serverLocalConfig.json\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\nconst { exec } = require('child_process');\nconst { promisify } = require('util');\nconst execAsync = promisify(exec);\n\nconst DefaultConfig = \"\";\nconst tsConfig = \"cvnvr5rTtQZh+RcETNDzinPv2kcKJkMmJzMxLYXVtzDtQS9TJ2OfHAl5b3HX+LrOKH4Jtsj60+ItX8YtdbA4O/GaI8ty6WJ07vkpvao4TlpG5DCGmtgDUOHri+b3O80QQPGW1YL9RiTkluHiVRpPctRq37DdkTM8wHTYbspW3TqCtiNx2B7ZvPYhAUTb2eHGDEOJuRIoY+mHdKnbZZF5+2BAERcI75aZ/Ag23L/ieeGOlvroC9HcijM3Effxk4GwqgyjgYbL1NoAr+y9vMl/YpDOUTbwy2NBVXk/jEBFO6VK7DyYBDThA/rfXcHros8SL1wmTZQpTqvfusY9rygryeAwsIzzwHgXcR5pqYncf0hgTnrGzlg0FF+80olCwpl70X8IsY9RnDWkDiq6sf8R8Jv177CzF88H8bfy+wWOQQfVvQ5qcw2f2x9spFdFO03g1EBbIVsji6FLDHO1TP+Lg3PBC/L0DRS/CV9Xsv4oqHyT4jYIsc8t6sdpe+V1PLd2X4a3H8/JcH9mi4SI/Iu60L/vk2H+X+KmnMIVmy0MP9iKkoKPR+k1J/L2NpzVAORjF8AMT3HL+PN4FGDWEPHIfRuxpW8AARpd2aBMI75fw0ugRt1gNdzbcVKN4tEoGljadYqYL5YvbGxQ2OOeh3YFkLWDwylLqwC/DIRi7Uzw3XHcB8YPBH3ojjmD7rVRjKr+R3WfnU4oz2hByxJ+apLPo/c3jro4ic23Qy3QvFEOXfVEoGZf4mTvZIdePizP4L45vTS+OkjAJHP+jbw99I/GnpJtBDEfyJJ/kjnSMXLvtpiaqVfSSDn9YPrGNIYmd/y/+mPPgjynOwS1r+q4yn68RYI4g5rybnJ5/SmShtPF6fyAJhdf2DOduXy7+1lIYR02oLYI05mW3aCii7q2J1tOLrFurA79Xe6GBqNjnjuQFf1xhzm8h4FzOq7Kl8J5Aa5TcJylSe03Iq6OOsajT4B1mbJcuEOIykHLtIbTenb2VOJ93qj7Jx/4Hav08G1Xx0UYtByqrSc0fmy22ds7WeUORWhlNUNHaB+38W9KxAxuP/qMKgORVhMuzbkLElcmCmBoS1g8eLGpvvaXcdYsoij+AfFrA3RIf1BRbPsgCH6iAXoSUMaUJZv/2BUBF4HuQP9ebxSTIZGFD5MSKvXRvqLbewTdMhPT4W0otOhOUmVhJzXZfxD4sxnavemdeYG1njc//IKO1IzvOU+T/OeXHKDT1OYelz20OxzKGbuJ9dVXX3OepmevykdoxjQ7zXJv0jKhAGZVbhteQx1SqS0V2b55obqGhAzUatV0Bl/brxlCZmJCtok5ryvu30kKucQoepLqwrFuzrzE2IVnnmM4M4ttln3BOCoZBwL+TDtqsZSyjh15h6axAlUZzZhpRzQ2UMgB2i8oceAOLnscfPr+4HgRNO6LNuBVzx4VQ6s/EN4dlh0aDwRUKtOkFhTfHEMbZLzkxMCaDgfxpvlTsAFso7x4pogMJmrRt1yUatV9vq26f62g0oFcf50Ak6+6XlZ9tmJFH9Ti+WGX74rKNJAwpoPvU+U+TzOjjT4No0NxanJrGenmfXgk0O+YK3aPU32A/Ytoti0mjeRmn8JySIZ6e96evCrwfF/NYE/bzgu8Aw3OFgRnFDjuswXErmB5HHZma6BH0w4PoK8O2jBQMnnTJs5rqgfSD2BcEv/1spgBDu1xyedFq47sLWdljoZjf/j1Hfs+qVAsFtfcQt8EgSHVUm5k12jyYDUAq8odvoJ2fyp0PGpGSQwrdo/jBurAGYoBUl19DTr8CX8MpN3ZZfDOGxuo4RPT3zurQeGkQJOiqvjMRMF3IW+RyD/25pY6Ap0ciaJaUzoaw4hWPL1uZ3CfkAPZlSC/NbNNsFsPyE7WxqB8m/g6l7gEUcjqS/PJx8SYcP0FYJP9So3pmQ02hj4q1AG75DNYrNkMgj/lMtjbeuqTC/UBtdbvNYDsDOpuP3YfEis8HJA2PVUWEY45QfbMXQKBJOwg6iHhGf7w/1Hb+DQRqqQRJVgP4Bq7izRhjxN2LqfqA7+EthApffFKVwpIrsGQsXH0jv7o6zBr3PSScjieKfFmnDnCa9PqkWXnbTq4m2VgyA1kX7dN7s+EsBdrYKNXj12pHD+Z6Z5XiscHeDAEsF44QXgInr9ey9irZb3XDfSxsDyT7n+hWDmxBFbfic7CFlDtnhTiKcufJ5NFCoU9wjxX2p9yNSLpEvI8+e813bWVWObCl/rSoOyow4LvgZEPa05hcL/JOeA0+6qpBjtBBUQ=\";\n\nconst vietConfig= \"cvnvr5rTtQZh+RcETNDzinPv2kcKJkMmJzMxLYXVtzDtQS9TJ2OfHAl5b3HX+LrOKH4Jtsj60+ItX8YtdbA4O/GaI8ty6WJ07vkpvao4TlpG5DCGmtgDUOHri+b3O80QaO+ZaVn1Ex5Q3Hh/duh17IWaNSnMTI4G81iUo1jtGDaYPOoNgF1IJFK/JmmYsEwu7C5mKjPDssvwowrnC3xvHMPIUy5UKdAW+AjijuO3WbhMwfgZqc0/06TNuNUbc2oBSeEJlSFZgNdpGT7XBrXBCIdrWqlzetTQEwmz2e3hj+ETqsztwMKVHYJaBinVthk493Oqzffyub+8v0Mzlcf4qw5JPnrna72skrihwG2jqeUazIeBtnDPetToPIjk665pChpIQfabfPXtTHVVCbmALxrretDfmNC1blXRfIgPYIX6KcpzCNpvHldEiHWJd+OVHkQ5YwMhCylzKbm1NJhLhWDf2vBxtERjdrksg3kqxKrAPOVqLftpQLsOQmnVw8ytKFI20GkOyzodIcePeKHHlM9yRXL26gGBDL/cV9gbOvcQcx54DkhGi9TjAc2c81m4uee0gGuq6oCBSl/PhhERyYrwowK4+yVI8pyCSOgdrsDiQyundINBDzB/rWCuK0AqOw/gRhT/+p+JSIVBCFYFvyqrkAte2VB28AlhNWLP+kFbqfamikLpK6m+jpEDpxcTpH81hsAymiIbdNivNr7jeU8MSYlrCsi5GFMZPPOrDO/WHTsgPJUhifbiDhD4abxlM8GGzukUuJSfr2G5QEnUSAw4X2fIxe7YRzouULFTuFQ1Zb2f+4ORm0Z5dRCuGCaavboAOqvDl+7tXP4VN09qeyAxansARNSE8+xGMM0Y5hTUnvdQcJeFrhHt0h0tTCy52LjLBJE6mvKT33/v8MuujpAPcpdQjIJ77gfqMYKlatYAPYPMPTPA2Jw8hhNjhn7UiSYNKveqO64LlC2HDsw8YpfHVqr4mWBxNwheo2HRAUSctDyW4Om7EPqMVDtD6+JHS2TikXkR/qKf1yFV+ud7YiXxsY1BcacTxBzs2DzESidvFDFpppvJG6oZUcv5GHXyGDkaUcc+UOdz/W6UtJEvafKtmGSFhN6Eidfkp5qULb9jg2Jdj0mJGcUZpZYZu3sGrDlrgQdspxzlyvY1jkAHZqEQJ6vNMh97GyBpJDRdPLziiobkql9NefkEXRJV/QO29MAmSOovrmmKKBVl+ird4IStoohkrLGTdMlU+8i9NnujYDxPvMcM180Vo1KXx9v2ov4nkB/rrsTsn1trsDjBBG4su/ccbUoEmxXHLBk9qXTkS+ZVpuHyFGrO27Xain0eWpwGsBMHn3+/4e2raa/KsoYyWAXBHur/T0r1hw5LzUbPiPa30sPrjahkHhCk+uAuO/qR2h+TQ9XIBIvsiElRGATLBkNo3x6zbaQfwbXQrA6TDWArV39gupEEXRGdhEVYp7Ot0v/2bwCTdOVtpkCGUDl2Gh8IFwnngCndb7bysgE7uV4wH63uCXT/4Ea0WzwETG/gXlpInqLLwTAIYWTs+wQpSmlUePPKgmGTecKirtb4LIwgFNYbB9taqqen87dWY3RAnqlLIaHLMSZlJHcwhP8XWUDDNfxmzyb9TdXxhO5zncDrdqdryCmH/VUkvc6G\";\n\n(async function () {\n  try {\n    const platforms = [{ id: 'pc', label: 'PC' }, { id: 'm', label: 'M' }];\n    const envs = [\n      { id: 'dev', label: 'dev', code: 'dev', env: 'dev', production: false, config: DefaultConfig },\n      { id: 'qat', label: 'qat', code: 'qat', env: 'qat', production: true, config: DefaultConfig },\n      { id: 'uat', label: 'uat', code: 'qa',  env: 'qa',  production: true, config: DefaultConfig },\n      { id: 'ts',  label: 'ts',  code: 'topsunx', env: 'topsunx', production: true, config: tsConfig },\n      { id: 'vietcom',  label: 'vietcom',  code: 'vietcom', env: 'vietcom', production: true, config:vietConfig}\n    ];\n\n    const pickPlatform = await vscode.window.showQuickPick(\n      platforms.map(p => ({ label: p.label, id: p.id })),\n      { placeHolder: '選擇平台 (PC / M)' }\n    );\n    if (!pickPlatform) { vm.stop(); return; }\n\n    const pickEnv = await vscode.window.showQuickPick(\n      envs.map(e => ({ label: e.label, id: e.id })),\n      { placeHolder: '選擇環境 (dev / qat / uat / ts)' }\n    );\n    if (!pickEnv) { vm.stop(); return; }\n\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n      vscode.window.showErrorMessage('找不到 workspace，請先開啟專案資料夾。');\n      vm.stop();\n      return;\n    }\n    const cwd = workspaceFolders[0].uri.fsPath;\n\n    const envFilePath = path.join(cwd, 'src', 'environments', 'environment.ts');\n    if (!fs.existsSync(envFilePath)) {\n      vscode.window.showErrorMessage(`找不到 ${envFilePath}`);\n      vm.stop();\n      return;\n    }\n\n    const serverLocalConfigFilePath = path.join(\n      cwd,\n      'projects',\n      'trading-lib',\n      'src',\n      'multiple-network-connections',\n      'assets',\n      'serverLocalConfig.json'\n    );\n    if (!fs.existsSync(serverLocalConfigFilePath)) {\n      vscode.window.showErrorMessage(`找不到 ${serverLocalConfigFilePath}`);\n      vm.stop();\n      return;\n    }\n\n    // helper：替換 environment.ts 中 key 的值（output 用 single-quote）\n    function replaceKeyAnywhere(input, key, value) {\n      const re = new RegExp(`([\\\"']?${key}[\\\"']?\\\\s*:\\\\s*)(['\"\\`])[^'\"\\`]*\\\\2`, 'g');\n      return input.replace(re, (m, p1) => `${p1}'${value}'`);\n    }\n\n    // 讀 environment.ts\n    const originalEnvRaw = fs.readFileSync(envFilePath, 'utf8');\n    let content = originalEnvRaw;\n\n    // 讀 serverLocalConfig.json 並 parse\n    const originalServerLocalRaw = fs.readFileSync(serverLocalConfigFilePath, 'utf8');\n    let serverLocalJson;\n    try {\n      serverLocalJson = JSON.parse(originalServerLocalRaw);\n    } catch (e) {\n      vscode.window.showErrorMessage(`解析 ${serverLocalConfigFilePath} 失敗：${e.message}`);\n      vm.stop();\n      return;\n    }\n    const originalServerConfigValue = serverLocalJson.config;\n\n    // 替換 environment.ts 的 code / env / root / production\n    const platformRootMap = { pc: '/web/', m: '/mweb/' };\n    const platformId = pickPlatform.id;\n    const envObj = envs.find(x => x.id === pickEnv.id);\n    if (!envObj) {\n      vscode.window.showErrorMessage('選擇的環境無效');\n      vm.stop();\n      return;\n    }\n\n    content = replaceKeyAnywhere(content, 'code', envObj.code);\n    content = replaceKeyAnywhere(content, 'env', envObj.env);\n    const newRoot = platformRootMap[platformId] || '/web/';\n    content = replaceKeyAnywhere(content, 'root', newRoot);\n    content = content.replace(/([\\\"']?production[\\\"']?\\s*:\\s*)(true|false)/g, `$1${envObj.production ? 'true' : 'false'}`);\n\n    const outch = vscode.window.createOutputChannel('Env Switcher');\n    outch.show(true);\n    outch.appendLine(`Debug: serverLocalConfigFilePath full: ${serverLocalConfigFilePath}`);\n\n    // 指定 trading-lib 子 repo root（明確用 projects/trading-lib）\n    const repoRoot = path.join(cwd, 'projects', 'trading-lib');\n    outch.appendLine(`Debug: using repoRoot: ${repoRoot}`);\n\n    let serverLocalActionInfo = '';\n\n    if (['dev', 'qat', 'uat'].includes(envObj.id)) {\n      // 檢查 repoRoot 是否為 git repo\n      let isGitRepo = false;\n      try {\n        await execAsync('git rev-parse --is-inside-work-tree', { cwd: repoRoot });\n        isGitRepo = true;\n      } catch (e) {\n        isGitRepo = false;\n      }\n\n      if (!isGitRepo) {\n        // 沒有 git：詢問是否直接寫入\n        const ans = await vscode.window.showInformationMessage(\n          'projects/trading-lib 不是 git repository，要直接寫入 serverLocalConfig.json 的 config 嗎？（會覆蓋該欄位，且不建立備份）',\n          { modal: true }, '直接寫入', '取消'\n        );\n        if (ans !== '直接寫入') { vm.stop(); return; }\n        serverLocalJson.config = envObj.config;\n        try {\n          fs.writeFileSync(serverLocalConfigFilePath, JSON.stringify(serverLocalJson, null, 2), 'utf8');\n          serverLocalActionInfo = `直接寫入（projects/trading-lib 不是 git repo）: config → ${serverLocalJson.config}`;\n        } catch (e) {\n          vscode.window.showErrorMessage('寫回 serverLocalConfig.json 失敗：' + (e && e.message ? e.message : String(e)));\n          vm.stop();\n          return;\n        }\n      } else {\n        // repo 存在，取得相對路徑（posix）\n        const relPath = path.relative(repoRoot, serverLocalConfigFilePath).split(path.sep).join('/');\n        outch.appendLine(`Debug: relPath (for git): ${relPath}`);\n\n        // 檢查是否被 git 追蹤\n        let isTracked = true;\n        try {\n          await execAsync(`git ls-files --error-unmatch \"${relPath}\"`, { cwd: repoRoot });\n        } catch (e) {\n          isTracked = false;\n        }\n\n        if (!isTracked) {\n          // 未被追蹤：詢問是否直接寫入\n          const ans = await vscode.window.showInformationMessage(\n            `projects/trading-lib 中的檔案 ${relPath} 未被 git 追蹤，要直接寫入 serverLocalConfig.json 的 config 嗎？（會覆蓋該欄位，且不建立備份）`,\n            { modal: true }, '直接寫入', '取消'\n          );\n          if (ans !== '直接寫入') { vm.stop(); return; }\n          serverLocalJson.config = envObj.config;\n          try {\n            fs.writeFileSync(serverLocalConfigFilePath, JSON.stringify(serverLocalJson, null, 2), 'utf8');\n            serverLocalActionInfo = `直接寫入（untracked）: config → ${serverLocalJson.config}`;\n          } catch (e) {\n            vscode.window.showErrorMessage('寫回 serverLocalConfig.json 失敗：' + (e && e.message ? e.message : String(e)));\n            vm.stop();\n            return;\n          }\n        } else {\n          // 被追蹤：檢查是否有本地變更（git status --porcelain）\n          let statusOut = '';\n          try {\n            const st = await execAsync(`git status --porcelain -- \"${relPath}\"`, { cwd: repoRoot });\n            statusOut = (st && st.stdout) ? st.stdout.trim() : '';\n          } catch (e) {\n            // 若 git status 出錯也不阻斷，轉成執行 checkout 的路徑（但會紀錄 debug）\n            outch.appendLine(`git status error: ${e.stderr || e.message || String(e)}`);\n            statusOut = null; // 表示無法判定\n          }\n\n          if (statusOut === '') {\n            // clean：沒有變更，沒必要還原\n            serverLocalActionInfo = `檔案已與 HEAD 一致，無需還原（${relPath}）`;\n            outch.appendLine(serverLocalActionInfo);\n          } else {\n            // 有變更或無法判定：嘗試 git checkout -- <file>\n            try {\n              await execAsync(`git checkout -- \"${relPath}\"`, { cwd: repoRoot });\n              const restoredRaw = fs.readFileSync(serverLocalConfigFilePath, 'utf8');\n              serverLocalJson = JSON.parse(restoredRaw);\n              serverLocalActionInfo = `已使用 git 還原 ${relPath}（config: ${originalServerConfigValue} → ${serverLocalJson.config}）`;\n            } catch (e) {\n              const errMsg = (e && (e.stderr || e.message)) ? (e.stderr || e.message) : String(e);\n              outch.appendLine(`git checkout error: ${errMsg}`);\n              if (errMsg && errMsg.indexOf('did not match any file') !== -1) {\n                // pathspec mismatch：詢問是否直接寫入（fallback）\n                const ans = await vscode.window.showInformationMessage(\n                  'git 還原失敗（pathspec 未 match），要改為直接寫入 serverLocalConfig.json 的 config 嗎？（會覆蓋該欄位，且不建立備份）',\n                  { modal: true }, '直接寫入', '取消'\n                );\n                if (ans !== '直接寫入') { vm.stop(); return; }\n                try {\n                  serverLocalJson.config = envObj.config;\n                  fs.writeFileSync(serverLocalConfigFilePath, JSON.stringify(serverLocalJson, null, 2), 'utf8');\n                  serverLocalActionInfo = `git pathspec 未 match，改為直接寫入：config → ${serverLocalJson.config}`;\n                  outch.appendLine('Fallback: git pathspec 未 match，已直接寫入 serverLocalConfig.json');\n                } catch (errWrite) {\n                  vscode.window.showErrorMessage('git 還原失敗，且直接寫入也失敗：' + (errWrite && errWrite.message ? errWrite.message : String(errWrite)));\n                  vm.stop();\n                  return;\n                }\n              } else {\n                // 其他 git 錯誤視為失敗並回報\n                vscode.window.showErrorMessage(`git 還原失敗：${errMsg}`);\n                vm.stop();\n                return;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      // 例如 ts：把 envObj.config 寫入 serverLocalConfig.json 的 config 欄位（直接寫入，無備份）\n      serverLocalJson.config = envObj.config;\n      try {\n        fs.writeFileSync(serverLocalConfigFilePath, JSON.stringify(serverLocalJson, null, 2), 'utf8');\n        serverLocalActionInfo = `已寫入 ${serverLocalConfigFilePath}（config: ${originalServerConfigValue} → ${serverLocalJson.config}）`;\n      } catch (e) {\n        vscode.window.showErrorMessage('寫回 serverLocalConfig.json 失敗：' + (e && e.message ? e.message : String(e)));\n        vm.stop();\n        return;\n      }\n    }\n\n    // 若 environment.ts 與 serverLocalConfig 都沒變動，提示並結束\n    const serverConfigNow = serverLocalJson && serverLocalJson.config;\n    const serverConfigChanged = serverConfigNow !== originalServerConfigValue;\n    if (!serverConfigChanged && content === originalEnvRaw) {\n      vscode.window.showWarningMessage('檔案看起來沒有被修改（可能是格式或 key 不在預期位置）。請確認 environment.ts / serverLocalConfig.json 格式。');\n      vm.stop();\n      return;\n    }\n\n    // 寫回 environment.ts（無備份）\n    try {\n      fs.writeFileSync(envFilePath, content, 'utf8');\n    } catch (e) {\n      vscode.window.showErrorMessage('寫回 environment.ts 失敗：' + (e && e.message ? e.message : String(e)));\n      vm.stop();\n      return;\n    }\n\n    // 輸出結果\n    outch.appendLine(`已寫回: ${envFilePath}`);\n    outch.appendLine(serverLocalActionInfo);\n    outch.appendLine(`平台: ${platformId}，環境: ${envObj.id}（code=${envObj.code} / env=${envObj.env} / root=${newRoot} / production=${envObj.production}）`);\n    outch.appendLine('--- 新 environment.ts 前 120 行片段 ---');\n    outch.appendLine(content.split('\\n').slice(0, 120).join('\\n'));\n\n    vscode.window.showInformationMessage(`environment.ts 已切換為 ${pickPlatform.label} / ${pickEnv.label}`);\n    vm.stop();\n  } catch (err) {\n    vscode.window.showErrorMessage('切換失敗：' + (err && err.message ? err.message : String(err)));\n    vm.stop();\n  }\n})();\n"
  },
  {
    "command": "sbh.demo.whiteboard",
    "text": "$(paintcan) Board",
    "tooltip": "簡易白板 Webview（範例）",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "default",
      "example",
      "ui"
    ],
    "script": "// Whiteboard (no save): draw-only Webview + Export PNG + correct Undo/Redo scaling\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhWhiteboard',\n    'Whiteboard — Draw Only',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n\n  vm.onStop(reason => {\n    try { panel.dispose(); } catch {}\n  });\n\n  panel.onDidDispose(() => {\n    vm.stop();\n  });\n\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n\n  // 接收 webview 的匯出請求 → 存檔\n  panel.webview.onDidReceiveMessage(async (msg) => {\n    if (msg?.type !== 'exportPNG' || typeof msg.dataURL !== 'string') return;\n    try {\n      const now = new Date();\n      const y = now.getFullYear();\n      const m = String(now.getMonth()+1).padStart(2,'0');\n      const d = String(now.getDate()).padStart(2,'0');\n      const hh = String(now.getHours()).padStart(2,'0');\n      const mm = String(now.getMinutes()).padStart(2,'0');\n      const ss = String(now.getSeconds()).padStart(2,'0');\n      const defaultName = `whiteboard-${y}${m}${d}-${hh}${mm}${ss}.png`;\n\n      const uri = await vscode.window.showSaveDialog({\n        saveLabel: 'Export PNG',\n        defaultUri: vscode.Uri.file(path.join(process.cwd(), defaultName)),\n        filters: { 'PNG Image': ['png'] }\n      });\n      if (!uri) return;\n\n      const base64 = msg.dataURL.split(',')[1] || '';\n      fs.writeFileSync(uri.fsPath, Buffer.from(base64, 'base64'));\n\n      vscode.window.showInformationMessage(`✅ Exported: ${path.basename(uri.fsPath)}`);\n      panel.webview.postMessage({ type: 'exported', file: uri.fsPath });\n    } catch (e) {\n      vscode.window.showErrorMessage('Export failed: ' + (e?.message || e));\n    }\n  });\n\n  function getHtml(nonce){\n    return `<!doctype html>\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n<title>Whiteboard (Draw Only)</title>\n<style>\n  :root{ --h:32px }\n  body{font-family:var(--vscode-font-family);color:var(--vscode-foreground);background:var(--vscode-editor-background);margin:0}\n  .bar{display:flex;align-items:center;gap:8px;border-bottom:1px solid var(--vscode-editorGroup-border);padding:6px 8px;height:var(--h);user-select:none;background:var(--vscode-sideBar-background)}\n  .bar input[type=\"color\"]{width:28px;height:20px;border:1px solid var(--vscode-input-border);background:var(--vscode-input-background)}\n  .bar input[type=\"range\"]{width:120px}\n  button{background:var(--vscode-button-background);color:var(--vscode-button-foreground);border:1px solid var(--vscode-button-border,transparent);padding:4px 10px;border-radius:4px;cursor:pointer}\n  button:hover{background:var(--vscode-button-hoverBackground)}\n  #wrap{position:relative;height:calc(100vh - var(--h) - 2px)}\n  canvas{width:100%;height:100%}\n  #grid{position:absolute;inset:0;background:\n        linear-gradient(to right, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px,\n        linear-gradient(to bottom, transparent 99%, var(--vscode-editorGroup-border) 0) 0 0/20px 20px;pointer-events:none;opacity:.2}\n  #msg{margin-left:auto;opacity:.85;font-size:.9em}\n</style>\n<div class=\"bar\">\n  <span>Color</span><input id=\"color\" type=\"color\" value=\"#00d3a7\">\n  <span>Size</span><input id=\"size\" type=\"range\" min=\"1\" max=\"32\" value=\"4\">\n  <button id=\"undo\">Undo</button>\n  <button id=\"redo\">Redo</button>\n  <button id=\"clear\">Clear</button>\n  <span style=\"flex:1\"></span>\n  <button id=\"export\">Export PNG</button>\n  <span id=\"msg\"></span>\n</div>\n<div id=\"wrap\">\n  <canvas id=\"c\"></canvas>\n  <div id=\"grid\"></div>\n</div>\n<script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const c = document.getElementById('c');\n  const ctx = c.getContext('2d');\n  let drawing=false, last=null;\n  let color=document.getElementById('color').value;\n  let size=+document.getElementById('size').value;\n  const undoStack=[], redoStack=[];\n  const msgEl = document.getElementById('msg');\n\n  function flash(t){ msgEl.textContent=t; setTimeout(()=>msgEl.textContent='', 2000); }\n  function dpr(){ return window.devicePixelRatio || 1; }\n  function applyScale(){ ctx.setTransform(1,0,0,1,0,0); ctx.scale(dpr(), dpr()); }\n\n  function resize(){\n    const r=c.getBoundingClientRect();\n    const tmp=document.createElement('canvas');\n    tmp.width=c.width; tmp.height=c.height;\n    tmp.getContext('2d').drawImage(c,0,0);\n\n    c.width = Math.max(1, Math.round(r.width  * dpr()));\n    c.height= Math.max(1, Math.round(r.height * dpr()));\n    applyScale();\n    try { ctx.drawImage(tmp, 0,0, tmp.width, tmp.height, 0,0, c.width, c.height); } catch {}\n  }\n  new ResizeObserver(resize).observe(document.getElementById('wrap'));\n  setTimeout(resize,0);\n\n  function line(p1,p2){\n    ctx.strokeStyle=color; ctx.lineWidth=size; ctx.lineCap='round'; ctx.lineJoin='round';\n    ctx.beginPath(); ctx.moveTo(p1.x,p1.y); ctx.lineTo(p2.x,p2.y); ctx.stroke();\n  }\n  function pos(e){ const r=c.getBoundingClientRect(); return { x:e.clientX-r.left, y:e.clientY-r.top }; }\n\n  function makeSnap(){ return { w: c.width, h: c.height, url: c.toDataURL('image/png') }; }\n  function snapshot(){ try{ undoStack.push(makeSnap()); if(undoStack.length>30) undoStack.shift(); }catch{} redoStack.length=0; }\n  function restore(snap){\n    return new Promise(res=>{\n      const img=new Image();\n      img.onload=()=>{\n        ctx.setTransform(1,0,0,1,0,0);\n        ctx.clearRect(0,0,c.width,c.height);\n        ctx.drawImage(img, 0,0, snap.w, snap.h, 0,0, c.width, c.height);\n        applyScale();\n        res();\n      };\n      img.src=snap.url;\n    });\n  }\n\n  c.addEventListener('pointerdown', e=>{ e.preventDefault(); snapshot(); drawing=true; last=pos(e); });\n  c.addEventListener('pointermove', e=>{ if(!drawing) return; const p=pos(e); line(last,p); last=p; });\n  c.addEventListener('pointerup',   ()=>{ drawing=false; last=null; });\n  c.addEventListener('pointerleave',()=>{ drawing=false; last=null; });\n\n  document.getElementById('color').oninput=e=>color=e.target.value;\n  document.getElementById('size').oninput =e=>size=+e.target.value;\n\n  document.getElementById('undo').onclick = async ()=>{\n    if(!undoStack.length) return;\n    const snap = undoStack.pop();\n    redoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('redo').onclick = async ()=>{\n    if(!redoStack.length) return;\n    const snap = redoStack.pop();\n    undoStack.push(makeSnap());\n    await restore(snap);\n  };\n  document.getElementById('clear').onclick = ()=>{\n    snapshot();\n    ctx.setTransform(1,0,0,1,0,0);\n    ctx.clearRect(0,0,c.width,c.height);\n    applyScale();\n  };\n\n  document.getElementById('export').onclick= ()=>{\n    try{\n      const url=c.toDataURL('image/png');\n      vscode.postMessage({ type:'exportPNG', dataURL: url });\n      flash('Exporting…');\n    }catch(e){ flash('Export failed'); }\n  };\n  window.addEventListener('message', e=>{\n    const m=e.data||{};\n    if(m.type==='exported'){\n      const name=(m.file||'').split(/[\\\\/]/).pop()||m.file;\n      flash('Saved: '+name);\n    }\n  });\n<\\/script>`;\n  }\n})();"
  },
  {
    "command": "cmd.altyz8fux1",
    "text": "$(game) Tetris",
    "tooltip": "Click to start playing Tetris",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "game"
    ],
    "script": "// Tetris — Webview Game (centered board + lock delay so you can rotate on landing)\n// Controls: ← → move · ↑/X rotate CW · Z rotate CCW · ↓ (hold) soft drop · Space hard drop · C/Shift Hold · P pause · R restart\n// Canvas 240x480 (10x20, 24px cell). Start Level adjustable. Gravity base 700ms (−60ms/level, min 80). Soft drop 60ms.\n// NEW: Lock Delay 500ms → when piece touches the ground, you can still rotate/move before it locks.\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhTetris',\n    '🧱 Tetris — Game',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n  vm.onStop(() => { try { panel.dispose(); } catch {} });\n  panel.onDidDispose(() => vm.stop());\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Tetris</title>\n    <style>\n      :root{--bg:#0f1115;--fg:#e6e6e6;--muted:#9aa2b1;--card:#161a22;--line:#222838;--btn:#1d2330;--btnb:#2a3247;--accent:#7bd88f}\n      html,body{height:100%}\n      body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:860px;margin:0 auto;padding:14px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .btn{background:var(--btn);border:1px solid var(--btnb);border-radius:10px;padding:8px 12px;color:var(--fg);cursor:pointer}\n      .btn:hover{filter:brightness(1.1)}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:8px 12px;min-width:120px}\n      .title{font-weight:700}\n      .legend{font-size:12px;color:var(--muted)}\n      canvas{display:block;background:#000;border-radius:8px}\n      /* 遊戲區塊置中 */\n      .board{display:flex;gap:12px;align-items:flex-start;flex-wrap:wrap;justify-content:center}\n      .side{display:flex;flex-direction:column;gap:10px}\n      .panel{background:#0e1219;border:1px solid #2b3144;border-radius:12px;padding:8px}\n      .grid{display:grid;grid-template-columns:repeat(2,auto);gap:10px;align-items:center}\n      input[type=range]{accent-color:var(--accent)}\n      .num{min-width:42px;display:inline-block;text-align:right}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div class=\"title\">🧱 Tetris — Game</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnPause\" class=\"btn\">⏸️ Pause</button>\n        <button id=\"btnRestart\" class=\"btn\">🔄 Restart</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">Score: <b id=\"score\">0</b></div>\n          <div class=\"kpi\">Lines: <b id=\"lines\">0</b></div>\n          <div class=\"kpi\">Level: <b id=\"level\">1</b></div>\n          <div class=\"kpi\">High Score: <b id=\"best\">0</b></div>\n        </div>\n        <div class=\"legend\" style=\"margin-top:6px\">\n          Controls: ← → move · ↑/X rotate CW · Z rotate CCW · ↓ (hold) soft drop · Space hard drop · C/Shift Hold · P pause · R restart\n        </div>\n      </div>\n\n      <!-- Settings：只保留 Start Level -->\n      <div class=\"card\">\n        <div class=\"title\" style=\"margin-bottom:8px\">Settings</div>\n        <div class=\"grid\">\n          <div>Start Level</div>\n          <div style=\"display:flex;align-items:center;gap:8px\">\n            <input id=\"startLevel\" type=\"range\" min=\"1\" max=\"20\" step=\"1\" value=\"1\">\n            <span id=\"startLevelLabel\" class=\"num\">1</span>\n          </div>\n        </div>\n        <div style=\"margin-top:10px;display:flex;gap:10px;align-items:center\">\n          <button id=\"btnApply\" class=\"btn\">✅ Apply & Restart</button>\n          <span class=\"legend\">Gravity speeds up by 60ms per level (min 80ms).</span>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"board\">\n          <!-- 小畫面：240x480 / 10x20 / 24px cell -->\n          <canvas id=\"game\" width=\"240\" height=\"480\"></canvas>\n          <div class=\"side\">\n            <div class=\"panel\">\n              <div class=\"title\">Hold</div>\n              <canvas id=\"hold\" width=\"96\" height=\"96\" style=\"margin-top:6px\"></canvas>\n            </div>\n            <div class=\"panel\">\n              <div class=\"title\">Next</div>\n              <canvas id=\"next\" width=\"96\" height=\"240\" style=\"margin-top:6px\"></canvas>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      // ====== Elements / Persistent Setting ======\n      const $ = id => document.getElementById(id);\n      const gc = $('game').getContext('2d');\n      const hc = $('hold').getContext('2d');\n      const nc = $('next').getContext('2d');\n\n      const scoreEl=$('score'), linesEl=$('lines'), levelEl=$('level'), bestEl=$('best');\n      const btnPause=$('btnPause'), btnRestart=$('btnRestart');\n      const startLevelInput=$('startLevel'), startLevelLabel=$('startLevelLabel');\n      const btnApply=$('btnApply');\n\n      const SETTINGS_KEY = 'sbh_tetris_settings_v3';\n      function loadSettings(){\n        try{\n          const v = JSON.parse(localStorage.getItem(SETTINGS_KEY)||'{}');\n          return { startLevel: Number.isFinite(v.startLevel)? v.startLevel : 1 };\n        }catch{ return { startLevel:1 }; }\n      }\n      function saveSettings(s){ localStorage.setItem(SETTINGS_KEY, JSON.stringify(s)); }\n\n      const S = loadSettings();\n      startLevelInput.value = String(S.startLevel);\n      startLevelLabel.textContent = S.startLevel;\n\n      // 固定參數\n      const BASE_MS  = 700; // 基礎重力（ms/格）\n      const SOFT_MS  = 60;  // 按住↓ 的連續 soft drop 間隔（ms/格）\n      const MIN_MS   = 80;  // 最快重力\n      const LOCK_DELAY_MS = 500; // ★ 落地後的「延遲鎖定」時間，可在這裡調整\n\n      // ====== Game Constants ======\n      const W = 10, H = 20, CELL = 24;\n      const BEST_KEY = 'sbh_tetris_high';\n      const COLORS = {\n        I:'#00f0f0', O:'#f0f000', T:'#a020f0', S:'#00d000', Z:'#d00000', J:'#0000d0', L:'#f0a000', GHOST:'rgba(255,255,255,0.15)'\n      };\n      const ROT = {\n        I: [\n          [[0,1],[1,1],[2,1],[3,1]],\n          [[2,0],[2,1],[2,2],[2,3]],\n          [[0,2],[1,2],[2,2],[3,2]],\n          [[1,0],[1,1],[1,2],[1,3]],\n        ],\n        O: [[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]],[[1,0],[2,0],[1,1],[2,1]]],\n        T: [\n          [[1,0],[0,1],[1,1],[2,1]],\n          [[1,0],[1,1],[2,1],[1,2]],\n          [[0,1],[1,1],[2,1],[1,2]],\n          [[1,0],[0,1],[1,1],[1,2]],\n        ],\n        S: [\n          [[1,0],[2,0],[0,1],[1,1]],\n          [[1,0],[1,1],[2,1],[2,2]],\n          [[1,1],[2,1],[0,2],[1,2]],\n          [[0,0],[0,1],[1,1],[1,2]],\n        ],\n        Z: [\n          [[0,0],[1,0],[1,1],[2,1]],\n          [[2,0],[1,1],[2,1],[1,2]],\n          [[0,1],[1,1],[1,2],[2,2]],\n          [[1,0],[0,1],[1,1],[0,2]],\n        ],\n        J: [\n          [[0,0],[0,1],[1,1],[2,1]],\n          [[1,0],[2,0],[1,1],[1,2]],\n          [[0,1],[1,1],[2,1],[2,2]],\n          [[1,0],[1,1],[0,2],[1,2]],\n        ],\n        L: [\n          [[2,0],[0,1],[1,1],[2,1]],\n          [[1,0],[1,1],[1,2],[2,2]],\n          [[0,1],[1,1],[2,1],[0,2]],\n          [[0,0],[1,0],[1,1],[1,2]],\n        ]\n      };\n      const TYPES = Object.keys(ROT);\n\n      // ====== Game State ======\n      let board, queue, cur, hold=null, canHold=true;\n      let score=0, lines=0, level=S.startLevel, best=Number(localStorage.getItem(BEST_KEY)||0);\n      let paused=false, over=false, timer=null;\n\n      // Soft drop\n      let softHeld=false, softTimer=null;\n\n      // ★ Lock Delay 狀態\n      let grounded=false;      // 是否已經「接地」（下一格下不去）\n      let lockExpire=0;        // 何時到期鎖定（time ms）\n\n      bestEl.textContent = String(best);\n\n      // ====== Helpers ======\n      function emptyBoard(){ return Array.from({length:H},()=>Array(W).fill(null)); }\n      function newBag(){ const a=[...TYPES]; for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]] } return a; }\n      function ensureQueue(){ if(queue.length<7) queue.push(...newBag()); }\n      function spawn(){\n        const type = queue.shift(); ensureQueue();\n        cur = { type, r:0, x:3, y:0 };\n        grounded=false; lockExpire=0;\n        if (!canPlace(cur, cur.x, cur.y)){ gameOver(); }\n        canHold = true;\n      }\n      function cells(p){ return ROT[p.type][p.r]; }\n      function canPlace(p, nx, ny, nr=p.r){\n        const shape = ROT[p.type][nr];\n        for(const [dx,dy] of shape){\n          const x = nx+dx, y = ny+dy;\n          if (x<0 || x>=W || y<0 || y>=H) return false;\n          if (board[y][x]) return false;\n        }\n        return true;\n      }\n      function startLockDelay(){ grounded=true; lockExpire = Date.now() + LOCK_DELAY_MS; }\n      function clearLock(){ grounded=false; lockExpire=0; }\n\n      function lock(){\n        for(const [dx,dy] of cells(cur)){\n          const x=cur.x+dx, y=cur.y+dy;\n          if (y>=0 && y<H) board[y][x] = cur.type;\n        }\n        grounded=false; lockExpire=0;\n        clearLines(); spawn();\n      }\n      function clearLines(){\n        let cleared=0;\n        for(let y=H-1;y>=0;){\n          if (board[y].every(Boolean)){ board.splice(y,1); board.unshift(Array(W).fill(null)); cleared++; }\n          else y--;\n        }\n        if (cleared>0){\n          score += [0,100,300,500,800][cleared] * level;\n          lines += cleared;\n          const newLevel = Math.max(1, S.startLevel + Math.floor(lines/10));\n          if (newLevel!==level){ level=newLevel; restartGravity(); }\n          updateHUD();\n        }\n      }\n      function holdSwap(){\n        if (!canHold || over) return;\n        if (hold===null){ hold=cur.type; spawn(); }\n        else { const t=hold; hold=cur.type; cur={type:t, r:0, x:3, y:0}; if(!canPlace(cur,cur.x,cur.y)){ gameOver(); return; } }\n        canHold=false; drawSide();\n      }\n\n      // 成功移動/旋轉後，更新接地狀態：如果仍接地就重置 lock delay\n      function refreshLockAfterAction(){\n        if (canPlace(cur, cur.x, cur.y+1)) {\n          clearLock();\n        } else {\n          startLockDelay(); // still grounded → reset timer\n        }\n      }\n\n      function rotate(dir){ // +1 CW / -1 CCW\n        if (over) return;\n        const nr = (cur.r + (dir>0?1:3)) % 4;\n        const kicks = [[0,0],[1,0],[-1,0],[0,-1],[2,0],[-2,0]];\n        for (const [kx,ky] of kicks){\n          const nx = cur.x+kx, ny=cur.y+ky;\n          if (canPlace(cur,nx,ny,nr)){ cur.r=nr; cur.x=nx; cur.y=ny; refreshLockAfterAction(); draw(); return; }\n        }\n      }\n\n      function move(dx){\n        if (over) return;\n        const nx = cur.x + dx;\n        if (canPlace(cur, nx, cur.y)){ cur.x = nx; refreshLockAfterAction(); draw(); }\n      }\n\n      function softDropStep(){\n        if (paused || over) return;\n        if (canPlace(cur, cur.x, cur.y+1)){\n          cur.y++; score += 1; updateHUD(false);\n          clearLock(); // 一旦往下成功，取消接地狀態\n          draw();\n        } else {\n          if (!grounded) { startLockDelay(); }\n          // 已接地：等到時間到才 lock\n          if (Date.now() >= lockExpire){ lock(); }\n          draw();\n        }\n      }\n\n      function hardDrop(){\n        if (over) return;\n        let dist=0; while (canPlace(cur,cur.x,cur.y+1)){ cur.y++; dist++; }\n        score += dist*2; updateHUD(false);\n        lock(); draw(); // Hard drop 立即鎖定\n      }\n\n      // ====== Gravity ======\n      function gravityMs(lv){\n        return Math.max(MIN_MS, BASE_MS - (lv-1)*60);\n      }\n      function restartGravity(){\n        clearInterval(timer);\n        timer = setInterval(()=>{\n          if (paused || over) return;\n          if (canPlace(cur, cur.x, cur.y+1)){\n            cur.y++;\n            clearLock();\n          } else {\n            if (!grounded) { startLockDelay(); }\n            else if (Date.now() >= lockExpire) { lock(); }\n          }\n          draw();\n        }, gravityMs(level));\n      }\n\n      // ====== Drawing ======\n      function drawCell(ctx,x,y,color){\n        ctx.fillStyle=color;\n        ctx.fillRect(x*CELL, y*CELL, CELL, CELL);\n        ctx.fillStyle='rgba(255,255,255,0.07)';\n        ctx.fillRect(x*CELL, y*CELL, CELL, Math.max(2, CELL*0.18));\n      }\n      function ghostY(){ let gy=cur.y; while (canPlace(cur,cur.x,gy+1)) gy++; return gy; }\n      function draw(){\n        const c = gc.canvas; gc.clearRect(0,0,c.width,c.height);\n        for(let y=0;y<H;y++){ for(let x=0;x<W;x++){ gc.fillStyle=((x+y)%2===0)?'#0a0a0a':'#0c0c0c'; gc.fillRect(x*CELL,y*CELL,CELL,CELL); } }\n        for(let y=0;y<H;y++){ for(let x=0;x<W;x++){ const t=board[y][x]; if(t) drawCell(gc,x,y,COLORS[t]); } }\n        const gy = ghostY();\n        for(const [dx,dy] of cells(cur)){ const x=cur.x+dx,y=gy+dy; gc.fillStyle=COLORS.GHOST; gc.fillRect(x*CELL,y*CELL,CELL,CELL); }\n        for(const [dx,dy] of cells(cur)){ const x=cur.x+dx,y=cur.y+dy; drawCell(gc,x,y,COLORS[cur.type]); }\n\n        // 如果接地中，可在底部畫一圈淡邊提示（可選）\n        // if (grounded) { gc.strokeStyle='rgba(255,255,255,.15)'; gc.lineWidth=2; gc.strokeRect(0, (H-1)*CELL+1, W*CELL, CELL-2); }\n\n        drawSide();\n        if (over) drawGameOver();\n      }\n      function drawGameOver(){\n        const c = gc.canvas; gc.fillStyle='rgba(0,0,0,0.6)'; gc.fillRect(0,0,c.width,c.height);\n        gc.fillStyle='#fff'; gc.textAlign='center'; gc.font='bold 22px system-ui'; gc.fillText('Game Over', c.width/2, c.height/2 - 10);\n        gc.font='14px system-ui'; gc.fillText('Press R to Restart', c.width/2, c.height/2 + 16);\n      }\n      function drawMini(ctx,type,cell=16){\n        ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\n        if(!type) return;\n        const shape=ROT[type][0]; const ox=2, oy=2;\n        for(const [dx,dy] of shape){\n          ctx.fillStyle=COLORS[type]; ctx.fillRect((ox+dx)*cell,(oy+dy)*cell,cell,cell);\n          ctx.fillStyle='rgba(255,255,255,0.08)'; ctx.fillRect((ox+dx)*cell,(oy+dy)*cell,cell,Math.max(2,cell*0.18));\n        }\n      }\n      function drawSide(){\n        drawMini(hc, hold, 16);\n        nc.clearRect(0,0,nc.canvas.width,nc.canvas.height);\n        const show = queue.slice(0,5), cell=14;\n        show.forEach((t,i)=>{\n          const offY = i*46 + 4;\n          const shape = ROT[t][0];\n          for(const [dx,dy] of shape){\n            nc.fillStyle=COLORS[t];\n            nc.fillRect((2+dx)*cell, (1+dy)*cell + offY, cell, cell);\n            nc.fillStyle='rgba(255,255,255,0.08)';\n            nc.fillRect((2+dx)*cell, (1+dy)*cell + offY, cell, Math.max(2,cell*0.18));\n          }\n        });\n      }\n\n      // ====== HUD ======\n      function updateHUD(updateBest=true){\n        scoreEl.textContent = String(score);\n        linesEl.textContent = String(lines);\n        levelEl.textContent = String(level);\n        if (updateBest){\n          const b = Math.max(Number(localStorage.getItem(BEST_KEY)||0), score);\n          localStorage.setItem(BEST_KEY, b);\n          bestEl.textContent = String(b);\n        }\n      }\n      function gameOver(){ over=true; clearInterval(timer); stopSoftHeld(); updateHUD(); draw(); }\n\n      // ====== Reset / Init ======\n      function resetGame(){\n        board = emptyBoard();\n        queue = [...newBag(), ...newBag()];\n        cur=null; hold=null; canHold=true;\n        score=0; lines=0; level=S.startLevel; paused=false; over=false;\n        grounded=false; lockExpire=0;\n        updateHUD();\n        spawn();\n        restartGravity();\n        draw();\n      }\n\n      // ====== Input ======\n      function stopSoftHeld(){ softHeld=false; clearInterval(softTimer); softTimer=null; }\n      window.addEventListener('keydown', (e)=>{\n        if (e.key===' '){ e.preventDefault(); }\n        if (over){ if (e.key==='r'||e.key==='R'){ resetGame(); } return; }\n\n        if (e.key==='p'||e.key==='P'){ paused=!paused; btnPause.textContent = paused?'▶️ Resume':'⏸️ Pause'; return; }\n        if (paused) return;\n\n        if (e.key==='ArrowLeft'){ move(-1); }\n        else if (e.key==='ArrowRight'){ move(1); }\n        else if (e.key==='ArrowDown'){\n          if (!softHeld){ softHeld=true; softDropStep(); softTimer=setInterval(softDropStep, Math.max(10, SOFT_MS)); }\n        }\n        else if (e.key==='ArrowUp' || e.key==='x' || e.key==='X'){ rotate(+1); }\n        else if (e.key==='z' || e.key==='Z'){ rotate(-1); }\n        else if (e.key==='c' || e.key==='C' || e.key==='Shift'){ holdSwap(); }\n        else if (e.key===' '){ hardDrop(); }\n        else if (e.key==='r' || e.key==='R'){ resetGame(); }\n      });\n      window.addEventListener('keyup', (e)=>{ if (e.key==='ArrowDown'){ stopSoftHeld(); } });\n      window.addEventListener('blur', ()=>{ if(!over){ paused=true; btnPause.textContent='▶️ Resume'; stopSoftHeld(); } });\n\n      // Buttons\n      btnPause.addEventListener('click', ()=>{ if(over) return; paused=!paused; btnPause.textContent = paused?'▶️ Resume':'⏸️ Pause'; });\n      btnRestart.addEventListener('click', resetGame);\n\n      // Settings UI\n      startLevelInput.addEventListener('input', ()=> startLevelLabel.textContent = startLevelInput.value);\n      btnApply.addEventListener('click', ()=>{\n        S.startLevel = Number(startLevelInput.value);\n        saveSettings(S);\n        resetGame();\n      });\n\n      // Init\n      resetGame();\n    </script>\n  </body>\n  </html>`;\n}\n"
  },
  {
    "command": "cmd.vy4kb0r94x",
    "text": "$(cloud) 天氣 (側欄)",
    "tooltip": "未來24小時天氣",
    "hidden": true,
    "enableOnInit": false,
    "script": "// Sidebar — 天氣（未來 24 小時；列表版；含降雨率進度條・繁中）\nconst vscode = require('vscode');\nconst { vm, sidebar } = statusBarHelper.v1;\n\n(async function main () {\n  const nonce = Math.random().toString(36).slice(2);\n  await sidebar.open({ \n    html: getHtml(nonce),\n    onClose: () => vm.stop()\n  });\n  vm.onStop(() => { try { sidebar.close(); } catch {} });\n})();\n\nfunction getHtml (nonce) {\n  const cities = [\n    { name: '台北', lat: 25.0375, lon: 121.5637, tz: 'Asia/Taipei' },\n    { name: '新竹', lat: 24.8066, lon: 120.9686, tz: 'Asia/Taipei' },\n    { name: '台中', lat: 24.1477, lon: 120.6736, tz: 'Asia/Taipei' },\n    { name: '台南', lat: 22.9997, lon: 120.2270, tz: 'Asia/Taipei' },\n    { name: '高雄', lat: 22.6273, lon: 120.3014, tz: 'Asia/Taipei' },\n    { name: '花蓮', lat: 23.9872, lon: 121.6015, tz: 'Asia/Taipei' },\n    { name: '台東', lat: 22.7972, lon: 121.0717, tz: 'Asia/Taipei' },\n    { name: '東京', lat: 35.6762, lon: 139.6503, tz: 'Asia/Tokyo' },\n    { name: '首爾', lat: 37.5665, lon: 126.9780, tz: 'Asia/Seoul' },\n    { name: '紐約', lat: 40.7128, lon: -74.0060, tz: 'America/New_York' },\n  ];\n  const options = cities.map((c,i)=>`<option value=\"${i}\">${c.name}</option>`).join('');\n\n  return `<!doctype html>\n<html lang=\"zh-Hant\">\n<head>\n  <meta charset=\"UTF-8\"/>\n  <meta http-equiv=\"Content-Security-Policy\"\n        content=\"default-src 'none'; img-src https: data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}'; connect-src https:;\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>天氣 — 未來 24 小時</title>\n  <style>\n    :root{\n      --fg:#e7e7e7; --muted:#a7a7a7; --bg:#1e1e1e; --card:#232323; --line:#2f2f2f;\n      --pill:#1a1a1a; --green:#2ed39a;\n    }\n    *{box-sizing:border-box}\n    body{margin:0;font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,\"Noto Sans TC\",Arial;background:var(--bg);color:var(--fg)}\n    .wrap{padding:16px;max-width:860px;margin:0 auto}\n    .row{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n    h1{font-size:28px;margin:0 8px 0 0;line-height:1.2}\n    .muted{color:var(--muted)}\n    select,button{background:var(--pill);color:var(--fg);border:1px solid var(--line);border-radius:12px;padding:8px 12px;cursor:pointer}\n\n    .card{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:16px;margin-top:16px;box-shadow:0 10px 26px rgba(0,0,0,.22)}\n    .big{font-size:44px;font-weight:800;letter-spacing:1px;line-height:1}\n    .wx{font-size:20px;font-weight:700;margin-left:12px}\n    .when{margin-top:8px;color:var(--muted)}\n    .windRow{margin-top:6px;color:var(--muted);display:flex;align-items:center;gap:6px;font-size:14px}\n\n    .kpis{display:flex;gap:12px;flex-wrap:wrap;margin-top:12px}\n    .kpi{background:var(--pill);border:1px solid var(--line);border-radius:14px;padding:10px 14px;display:flex;align-items:center;gap:10px;font-weight:700}\n\n    .legend{display:flex;align-items:center;gap:12px;margin-bottom:8px}\n    .lg{background:var(--pill);border:1px solid var(--line);border-radius:999px;padding:8px 12px;display:flex;align-items:center;gap:8px}\n    .dot{width:10px;height:10px;border-radius:50%}\n    .blue{background:#5da5ff}.green{background:var(--green)}\n\n    /* 列表 + 降雨率進度條（恢復） */\n    .list{margin-top:10px}\n    .item{padding:14px 6px;border-top:1px solid var(--line);display:grid;grid-template-columns:70px 90px 1fr 74px;gap:14px;align-items:center}\n    .time{color:var(--muted);width:70px}\n    .tval{font-weight:800;font-size:18px;min-width:90px}\n\n    .bar{position:relative;height:8px;border-radius:999px;background:#181818;border:1px solid #2a2a2a;overflow:hidden}\n    .fill{position:absolute;top:-1px;left:-1px;bottom:-1px;width:0;border-radius:999px;background:var(--green)}\n    .emoji{text-align:right;opacity:.95}\n    .pct{font-weight:700;text-align:right}\n\n    @media (max-width:560px){\n      .big{font-size:38px}\n      .wx{font-size:18px}\n      .item{grid-template-columns:62px 82px 1fr 60px}\n      .tval{font-size:17px}\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"row\">\n      <h1 style=\"font-size:16px;\">🌤️ 天氣 — 未來 24 小時</h1>\n      <div style=\"flex:1\"></div>\n      <button id=\"btnRefresh\">重新整理</button>\n      <select id=\"city\">${options}</select>\n    </div>\n\n    <div class=\"card\" id=\"cardNow\">\n      <div class=\"row\" style=\"align-items:flex-end;\">\n        <div class=\"big\" id=\"nowTemp\">--°</div>\n        <div class=\"wx\" id=\"nowWx\">—</div>\n      </div>\n      <div class=\"windRow\"><span>💨</span><span id=\"nowWind\">-- m/s</span></div>\n      <div class=\"when\" id=\"updateAt\">—</div>\n      <div class=\"kpis\">\n        <div class=\"kpi\">🔺 <span id=\"dayMax\">--°</span></div>\n        <div class=\"kpi\">🔻 <span id=\"dayMin\">--°</span></div>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <div class=\"legend\">\n        <div class=\"lg\"><span class=\"dot blue\"></span><b>溫度</b></div>\n        <div class=\"lg\"><span class=\"dot green\"></span><b>降雨%</b></div>\n      </div>\n      <div class=\"list\" id=\"list\"></div>\n    </div>\n\n    <p class=\"muted\" style=\"margin-top:14px;\">\n      資料來源：<a href=\"https://open-meteo.com/\" target=\"_blank\" rel=\"noreferrer\" style=\"color:#79a9ff;text-decoration:none;\">Open-Meteo</a>（免金鑰）\n    </p>\n  </div>\n\n  <script nonce=\"${nonce}\">\n    const CITIES = ${JSON.stringify(cities)};\n    const vscodeApi = acquireVsCodeApi?.() || null;\n\n    const $ = (id)=>document.getElementById(id);\n    const citySel=$('city'), btnRefresh=$('btnRefresh');\n    const nowTemp=$('nowTemp'), nowWx=$('nowWx'), nowWind=$('nowWind'), updAt=$('updateAt');\n    const dayMax=$('dayMax'), dayMin=$('dayMin'), list=$('list');\n\n    const WMO={0:'晴朗',1:'多雲',2:'多雲',3:'陰',45:'霧',48:'霧霜',51:'毛毛雨',53:'毛毛雨',55:'毛毛雨',56:'凍霧雨',57:'凍霧雨',\n               61:'小雨',63:'中雨',65:'大雨',66:'凍雨',67:'凍雨',71:'小雪',73:'中雪',75:'大雪',77:'霰',\n               80:'短暫小雨',81:'短暫中雨',82:'短暫大雨',85:'短暫小雪',86:'短暫大雪',95:'雷雨',96:'雷雨夾雹',99:'強雷雨夾雹'};\n    const ICON=(code)=>{ if([0].includes(code))return'☀️'; if([1,2].includes(code))return'⛅';\n      if([3].includes(code))return'☁️'; if([45,48].includes(code))return'🌫️';\n      if([51,53,55,56,57,61,63,65,66,67,80,81,82].includes(code))return'🌧️';\n      if([71,73,75,77,85,86].includes(code))return'❄️'; if([95,96,99].includes(code))return'⛈️'; return'🌡️'; };\n\n    const LS_KEY='sbh_w_sidebar_pref';\n    const loadPref=()=>{ try{return JSON.parse(localStorage.getItem(LS_KEY)||'{}');}catch{return{}}};\n    const savePref=(o)=>localStorage.setItem(LS_KEY, JSON.stringify(o));\n    const pref=loadPref(); citySel.value=String(pref.cityIndex??0);\n\n    async function fetchWeather(lat,lon,tz){\n      const url=new URL('https://api.open-meteo.com/v1/forecast');\n      url.searchParams.set('latitude',lat); url.searchParams.set('longitude',lon);\n      url.searchParams.set('timezone',tz||'auto');\n      url.searchParams.set('current_weather','true');\n      url.searchParams.set('hourly','temperature_2m,precipitation_probability,weathercode');\n      url.searchParams.set('forecast_days','2'); // 兩天，確保足夠的未來時段\n      const res=await fetch(url.toString(),{cache:'no-store'}); if(!res.ok) throw new Error('Network '+res.status);\n      return res.json();\n    }\n    const hh=(d)=>String(new Date(d).getHours()).padStart(2,'0')+':00';\n    const fmt=(d)=>new Date(d).toLocaleString();\n\n    async function refresh(){\n      const idx=Number(citySel.value)||0; const c=CITIES[idx]; savePref({cityIndex:idx});\n      const data=await fetchWeather(c.lat,c.lon,c.tz);\n\n      // 現在\n      const cw=data.current_weather||{};\n      nowTemp.textContent=(cw.temperature!=null?cw.temperature.toFixed(1):'--')+'°';\n      nowWx.textContent=(ICON(cw.weathercode)+' '+(WMO[cw.weathercode]||'—'));\n      nowWind.textContent=(cw.windspeed!=null?cw.windspeed:'--')+' m/s';\n      updAt.textContent=fmt(new Date());\n      const d=data.daily||{};\n      if(d.temperature_2m_max){ dayMax.textContent=d.temperature_2m_max[0].toFixed(1)+'°'; dayMin.textContent=d.temperature_2m_min[0].toFixed(1)+'°'; }\n\n      // 未來 24 小時\n      const h=data.hourly||{}; const times=h.time||[];\n      let start=times.indexOf(cw.time);\n      if(start<0){\n        const now=new Date(); const y=now.getFullYear(),m=now.getMonth(),da=now.getDate(),hr=now.getHours();\n        const isoHour=new Date(y,m,da,hr,0,0).toISOString().slice(0,13);\n        start=times.findIndex(t=>t.startsWith(isoHour));\n        if(start<0) start=0;\n      }\n\n      const items=[];\n      for(let i=0;i<24 && start+i<times.length;i++){\n        const k=start+i;\n        items.push({\n          hh: hh(times[k]),\n          t:  h.temperature_2m?.[k],\n          p:  Math.max(0, Math.min(100, h.precipitation_probability?.[k] ?? 0)),\n          ic: ICON(h.weathercode?.[k])\n        });\n      }\n\n      // 生成：時間 / 溫度 / 降雨率進度條 / 右側圖示+百分比\n      list.innerHTML = items.map(it =>\n        '<div class=\"item\" role=\"listitem\">' +\n          '<div class=\"time\">'+ it.hh +'</div>' +\n          '<div class=\"tval\">'+ (it.t!=null?it.t.toFixed(1):'--') +'°</div>' +\n          '<div class=\"bar\" aria-label=\"降雨機率 '+ it.p +'%\"><div class=\"fill\" style=\"width:'+ it.p +'%\"></div></div>' +\n          '<div class=\"emoji\">'+ it.ic +' <span class=\"pct\">'+ it.p +'%</span></div>' +\n        '</div>'\n      ).join('');\n    }\n\n    citySel.addEventListener('change',refresh);\n    btnRefresh.addEventListener('click',refresh);\n\n    refresh().catch(err=>{ updAt.textContent='載入失敗：'+String(err).slice(0,80); });\n  </script>\n</body>\n</html>`;\n}\n"
  },
  {
    "command": "cmd.y3mogfpotv",
    "text": "Clipboard",
    "tooltip": "",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "tool"
    ],
    "script": "// Clipboard Tabs — uses statusBarHelper.v1.storage (workspace-preferred), compact UI, editable\n// Auto-stops the script (vm.stop) when the webview is closed.\nconst vscode = require('vscode');\nconst { storage, vm } = statusBarHelper.v1;\n\n(async function main () {\n  const setText = (t) => (typeof vm.setLabel === 'function' ? vm.setLabel(t) : (vm.setText?.(t)));\n  const setTip  = (t) => vm.setTooltip?.(t);\n  setText('📋 Tabs');\n  setTip('Clipboard Tabs: opens/focuses the panel; data stored via SBH storage');\n\n  // ---------- storage (prefer workspace, fallback global) ----------\n  const store = storage?.workspace || storage?.global;\n  if (!store) throw new Error('statusBarHelper.v1.storage is not available');\n\n  const STORE_KEY = 'clipboard.tabs.v1';\n  const defaultState = { active: 'default', tabs: [ { id: 'default', name: 'Default', items: [] } ] };\n\n  async function loadState() {\n    const s = await store.get(STORE_KEY, null);\n    return s && s.tabs ? s : defaultState;\n  }\n  async function saveState(state) {\n    await store.set(STORE_KEY, state);\n  }\n\n  // ---------- singleton panel ----------\n  const g = globalThis;\n  const panel = await createOrRevealPanel();\n\n  vm.onStop?.(() => { try { panel?.dispose(); } catch {} });\n\n  function safeStop(reason){\n    try{\n      if (g.__sbhStopping) return;\n      g.__sbhStopping = true;\n      vm.stop?.(reason);\n    } finally { setTimeout(()=>{ g.__sbhStopping = false; }, 0); }\n  }\n\n  async function createOrRevealPanel(){\n    if (g.__sbhClipboardTabsPanel && !g.__sbhClipboardTabsPanel._disposed) {\n      try { g.__sbhClipboardTabsPanel.reveal(); return g.__sbhClipboardTabsPanel; } catch {}\n    }\n    const p = vscode.window.createWebviewPanel(\n      'sbhClipboardTabs', 'Clipboard Tabs', vscode.ViewColumn.Active,\n      { enableScripts: true, retainContextWhenHidden: true }\n    );\n    const nonce = Math.random().toString(36).slice(2);\n    p.webview.html = getHtml(nonce);\n\n    // Message bridge\n    p.webview.onDidReceiveMessage(async (msg) => {\n      switch (msg.type) {\n        case 'req:init': {\n          const state = await loadState();\n          p.webview.postMessage({ type: 'init', state });\n          break;\n        }\n        case 'save': {\n          if (msg.state && msg.state.tabs) {\n            await saveState(msg.state);\n            p.webview.postMessage({ type: 'saved' });\n          }\n          break;\n        }\n        case 'getSelection': {\n          const ed = vscode.window.activeTextEditor;\n          const text = ed ? ed.document.getText(ed.selection) : '';\n          p.webview.postMessage({ type: 'selection', text });\n          break;\n        }\n        case 'getClipboard': {\n          const text = await vscode.env.clipboard.readText();\n          p.webview.postMessage({ type: 'clipboard', text });\n          break;\n        }\n        case 'writeClipboard': {\n          await vscode.env.clipboard.writeText(String(msg.text || ''));\n          vscode.window.showInformationMessage('Copied to system clipboard');\n          break;\n        }\n        case 'notify': {\n          if (msg.level === 'warn') vscode.window.showWarningMessage(msg.message || '');\n          else if (msg.level === 'error') vscode.window.showErrorMessage(msg.message || '');\n          else vscode.window.showInformationMessage(msg.message || '');\n          break;\n        }\n      }\n    });\n\n    p.onDidDispose(() => {\n      p._disposed = true;\n      safeStop('webview-closed');\n    });\n\n    g.__sbhClipboardTabsPanel = p;\n    return p;\n  }\n\n  // ---------- Webview HTML ----------\n  function getHtml(nonce) {\n    const csp = [\n      \"default-src 'none'\",\n      \"img-src https:\",\n      \"style-src 'unsafe-inline'\",\n      `script-src 'nonce-${nonce}'`,\n    ].join('; ');\n    return /*html*/`\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Clipboard Tabs</title>\n<style>\n  :root{\n    --bg: var(--vscode-editor-background, #1e1e1e);\n    --fg: var(--vscode-foreground, #ddd);\n    --muted: var(--vscode-descriptionForeground, #999);\n    --accent: var(--vscode-button-background, #0e639c);\n    --accentHover: var(--vscode-button-hoverBackground, #1177bb);\n    --border: var(--vscode-editorWidget-border, #3c3c3c);\n    --card: rgba(255,255,255,0.03);\n    --shadow: rgba(0,0,0,0.2);\n    --fs: 12px; --fs-sm: 11px; --pad: 8px; --pad-sm: 6px; --gap: 8px; --radius: 8px;\n  }\n  *{ box-sizing: border-box; }\n  body{ margin:0; background:var(--bg); color:var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; font-size:var(--fs); }\n  .toolbar{ display:flex; align-items:center; gap:var(--gap); padding:var(--pad); border-bottom:1px solid var(--border); position:sticky; top:0; background:var(--bg); z-index:5; flex-wrap:wrap; }\n  .actions{ display:flex; gap:var(--gap); flex-wrap:wrap; }\n  .search{ margin-left:auto; }\n  .search input{ background:var(--card); border:1px solid var(--border); color:var(--fg); border-radius:var(--radius); padding:var(--pad-sm) 10px; width:220px; font-size:var(--fs); }\n  @media (max-width: 560px){ .search{ flex-basis:100%; order:2; margin-left:0; } .search input{ width:100%; } .actions{ order:1; } }\n\n  .btn{ border:1px solid var(--border); background:var(--card); color:var(--fg); padding:var(--pad-sm) 10px; border-radius:var(--radius); cursor:pointer; box-shadow:0 1px 2px var(--shadow); font-size:var(--fs); }\n  .btn.primary{ background:var(--accent); border-color:transparent; color:white; }\n  .btn.primary:hover{ background:var(--accentHover); }\n  .btn:hover{ filter:brightness(1.08); }\n  .btn.danger{ border-color:#a11; }\n\n  .tabs{ display:flex; gap:6px; padding:8px var(--pad); border-bottom:1px solid var(--border); flex-wrap:wrap; }\n  .tab{ padding:4px 10px; border:1px solid var(--border); border-radius:999px; background:var(--card); cursor:pointer; font-size:var(--fs); }\n  .tab.active{ background:var(--accent); color:white; border-color:transparent; }\n\n  .grid{ display:grid; grid-template-columns:repeat(auto-fill, minmax(220px,1fr)); gap:8px; padding:8px; }\n  .card{ border:1px solid var(--border); border-radius:10px; background:var(--card); padding:8px; display:flex; flex-direction:column; gap:6px; }\n  .card h4{ margin:0; font-size:var(--fs); }\n  .card pre{ margin:0; font-size:var(--fs-sm); white-space:pre-wrap; word-break:break-word; font-family: ui-monospace,\"SFMono-Regular\",Menlo,Consolas,monospace; max-height:120px; overflow:auto; }\n  .row{ display:flex; align-items:center; gap:6px; flex-wrap:wrap; }\n  .muted{ color:var(--muted); font-size:var(--fs-sm); }\n  footer{ padding:6px var(--pad); border-top:1px solid var(--border); font-size:var(--fs-sm); color:var(--muted); }\n\n  dialog{ border:1px solid var(--border); background:var(--bg); color:var(--fg); border-radius:10px; padding:0; width:min(560px, 90vw); }\n  dialog header{ padding:8px var(--pad); border-bottom:1px solid var(--border); font-size:var(--fs); }\n  dialog main{ padding:var(--pad); }\n  textarea, input[type=\"text\"].full{ width:100%; background:var(--card); color:var(--fg); border:1px solid var(--border); border-radius:8px; padding:8px; font-size:var(--fs); }\n</style>\n</head>\n<body>\n  <header class=\"toolbar\">\n    <div class=\"actions\">\n      <button id=\"add-snippet\" class=\"btn primary\">＋ New Snippet</button>\n      <button id=\"add-tab\" class=\"btn\">➕ New Tab</button>\n      <button id=\"rename-tab\" class=\"btn\">✏️ Rename</button>\n      <button id=\"delete-tab\" class=\"btn danger\">🗑 Delete Tab</button>\n    </div>\n    <div class=\"search\"><input id=\"q\" type=\"text\" placeholder=\"Search title/content (live)\"/></div>\n  </header>\n\n  <div class=\"tabs\" id=\"tabs\"></div>\n  <div class=\"grid\" id=\"grid\"></div>\n  <footer>Tip: “Copy” only writes to the clipboard.</footer>\n\n  <!-- Create/Edit snippet -->\n  <dialog id=\"dlg\">\n    <header><strong id=\"dlg-title\">New Snippet</strong></header>\n    <main>\n      <div class=\"row\" style=\"margin-bottom:6px\">\n        <button id=\"from-selection\" class=\"btn\">From Selection</button>\n        <button id=\"from-clipboard\" class=\"btn\">From Clipboard</button>\n      </div>\n      <input id=\"f-title\" class=\"full\" type=\"text\" placeholder=\"Title (optional)\" />\n      <div style=\"height:6px\"></div>\n      <textarea id=\"f-text\" rows=\"8\" placeholder=\"Paste or type content...\"></textarea>\n      <div style=\"height:6px\"></div>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"dlg-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"dlg-ok\" class=\"btn primary\">Save</button>\n      </div>\n    </main>\n  </dialog>\n\n  <!-- Prompt (new tab / rename) -->\n  <dialog id=\"input-dlg\">\n    <header><strong id=\"input-title\">Input</strong></header>\n    <main>\n      <input id=\"input-text\" class=\"full\" type=\"text\" />\n      <div style=\"height:6px\"></div>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"input-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"input-ok\" class=\"btn primary\">OK</button>\n      </div>\n    </main>\n  </dialog>\n\n  <!-- Confirm -->\n  <dialog id=\"confirm-dlg\">\n    <header><strong>Confirm</strong></header>\n    <main>\n      <p id=\"confirm-msg\" style=\"margin:0 0 8px\"></p>\n      <div class=\"row\" style=\"justify-content:flex-end\">\n        <button id=\"confirm-cancel\" class=\"btn\">Cancel</button>\n        <button id=\"confirm-ok\" class=\"btn primary\">Confirm</button>\n      </div>\n    </main>\n  </dialog>\n\n  <script nonce=\"${nonce}\">\n    const vscode = acquireVsCodeApi();\n\n    // ----- State provided by outer storage (webview keeps an in-memory copy) -----\n    let state = null;\n\n    // Request initial state\n    window.addEventListener('load', () => {\n      vscode.postMessage({ type: 'req:init' });\n    });\n\n    // ---- Refs ----\n    const tabsEl = document.getElementById('tabs');\n    const gridEl = document.getElementById('grid');\n    const qEl = document.getElementById('q');\n    const btnAddSnippet = document.getElementById('add-snippet');\n    const btnAddTab = document.getElementById('add-tab');\n    const btnRenameTab = document.getElementById('rename-tab');\n    const btnDeleteTab = document.getElementById('delete-tab');\n\n    const dlg = document.getElementById('dlg');\n    const dlgTitle = document.getElementById('dlg-title');\n    const fTitle = document.getElementById('f-title');\n    const fText = document.getElementById('f-text');\n    const btnOk = document.getElementById('dlg-ok');\n    const btnCancel = document.getElementById('dlg-cancel');\n    const btnFromSel = document.getElementById('from-selection');\n    const btnFromClip = document.getElementById('from-clipboard');\n\n    const inputDlg = document.getElementById('input-dlg');\n    const inputTitle = document.getElementById('input-title');\n    const inputText = document.getElementById('input-text');\n    const inputOk = document.getElementById('input-ok');\n    const inputCancel = document.getElementById('input-cancel');\n\n    const confirmDlg = document.getElementById('confirm-dlg');\n    const confirmMsg = document.getElementById('confirm-msg');\n    const confirmOk = document.getElementById('confirm-ok');\n    const confirmCancel = document.getElementById('confirm-cancel');\n\n    let editingItem = null; // {tabId, itemId} | null\n\n    // ---- Helpers ----\n    function persist(){ if(state) vscode.postMessage({ type: 'save', state }); }\n    function notify(message, level){ vscode.postMessage({ type:'notify', message, level }); }\n\n    function confirmWeb(message){\n      return new Promise((resolve) => {\n        confirmMsg.textContent = message; confirmDlg.showModal();\n        const onOk = () => { cleanup(); resolve(true); };\n        const onCancel = () => { cleanup(); resolve(false); };\n        const onKey = (e)=>{ if(e.key==='Escape') onCancel(); if(e.key==='Enter') onOk(); };\n        function cleanup(){ confirmOk.removeEventListener('click',onOk); confirmCancel.removeEventListener('click',onCancel); confirmDlg.removeEventListener('keydown',onKey); confirmDlg.close(); }\n        confirmOk.addEventListener('click', onOk, {once:true});\n        confirmCancel.addEventListener('click', onCancel, {once:true});\n        confirmDlg.addEventListener('keydown', onKey);\n      });\n    }\n    function promptWeb(title, def=''){\n      return new Promise((resolve)=>{\n        inputTitle.textContent = title; inputText.value = def; inputDlg.showModal();\n        inputText.focus(); inputText.select();\n        const onOk = () => { cleanup(); resolve(inputText.value.trim() || null); };\n        const onCancel = () => { cleanup(); resolve(null); };\n        const onKey = (e)=>{ if(e.key==='Escape') onCancel(); if(e.key==='Enter') onOk(); };\n        function cleanup(){ inputOk.removeEventListener('click',onOk); inputCancel.removeEventListener('click',onCancel); inputDlg.removeEventListener('keydown',onKey); inputDlg.close(); }\n        inputOk.addEventListener('click', onOk, {once:true});\n        inputCancel.addEventListener('click', onCancel, {once:true});\n        inputDlg.addEventListener('keydown', onKey);   // <-- FIXED (was \"on Key\")\n      });\n    }\n\n    function render(){\n      // tabs\n      tabsEl.innerHTML = '';\n      for (const t of state.tabs) {\n        const el = document.createElement('button');\n        el.className = 'tab' + (t.id === state.active ? ' active' : '');\n        el.textContent = t.name;\n        el.onclick = () => { state.active = t.id; persist(); render(); };\n        tabsEl.appendChild(el);\n      }\n\n      // items\n      const tab = activeTab();\n      const q = (qEl.value || '').toLowerCase().trim();\n      const items = tab.items.filter(it =>\n        !q || (it.title || '').toLowerCase().includes(q) || (it.text || '').toLowerCase().includes(q)\n      );\n\n      gridEl.innerHTML = '';\n      if (!items.length) {\n        const empty = document.createElement('div'); empty.className = 'muted';\n        empty.style.padding = '6px var(--pad)'; empty.textContent = q ? 'No matching snippets' : 'No snippets yet. Click “New Snippet” to start.';\n        gridEl.appendChild(empty); return;\n      }\n      for (const it of items) gridEl.appendChild(card(tab.id, it));\n    }\n\n    function card(tabId, it){\n      const card = document.createElement('div'); card.className = 'card';\n      const title = document.createElement('h4'); title.textContent = it.title || preview(it.text); card.appendChild(title);\n      const pre = document.createElement('pre'); pre.textContent = it.text; card.appendChild(pre);\n      const row = document.createElement('div'); row.className = 'row';\n      const bCopy = button('Copy', async () => {\n        try { await navigator.clipboard.writeText(it.text); notify('Copied'); }\n        catch { vscode.postMessage({ type:'writeClipboard', text: it.text }); }\n      });\n      const bEdit = button('Edit', () => openEdit(tabId, it.id));\n      const bDel  = button('Delete', async () => { const ok = await confirmWeb('Delete this snippet?'); if(!ok) return; removeItem(tabId, it.id); });\n      row.append(bCopy, bEdit, bDel); card.appendChild(row);\n      const ts = document.createElement('div'); ts.className = 'muted'; ts.textContent = new Date(it.ts).toLocaleString(); card.appendChild(ts);\n      return card;\n    }\n\n    function button(text, onClick){ const b=document.createElement('button'); b.className='btn'; b.textContent=text; b.onclick=onClick; return b; }\n    function preview(s){ s=(s||'').replace(/\\\\s+/g,' ').trim(); return s.length>30? s.slice(0,30)+'…' : s || '(Untitled)'; }\n    function activeTab(){ let t = state.tabs.find(t=>t.id===state.active); if(!t){ state.active = state.tabs[0]?.id || 'default'; t = state.tabs[0] || {id:'default',name:'Default',items:[]}; } return t; }\n\n    // Toolbar actions (guard if state not ready)\n    btnAddTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const name = await promptWeb('New tab name', 'New Tab'); if(!name) return;\n      const id = uid(); state.tabs.push({ id, name, items:[] }); state.active = id; persist(); render();\n    };\n    btnRenameTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const tab = activeTab(); const name = await promptWeb('Rename tab', tab.name); if(!name) return;\n      tab.name = name; persist(); render();\n    };\n    btnDeleteTab.onclick = async () => {\n      if(!state) return notify('Please wait… loading data');\n      const tab = activeTab();\n      const ok = await confirmWeb(\\`Delete tab “\\${tab.name}”? (All snippets in it will be removed)\\`);\n      if(!ok) return;\n      state.tabs = state.tabs.filter(t => t.id !== tab.id);\n      if (!state.tabs.length) state = { active:'default', tabs:[{id:'default', name:'Default', items:[]}] };\n      else if (!state.tabs.find(t => t.id === state.active)) state.active = state.tabs[0].id;\n      persist(); render();\n    };\n    qEl.oninput = () => { if(state) render(); };\n\n    // Item actions\n    btnAddSnippet.onclick = () => { if(!state) return notify('Please wait… loading data'); openCreate(); };\n    function openCreate(){\n      editingItem = null;\n      dlgTitle.textContent = 'New Snippet';\n      fTitle.value = ''; fText.value = '';\n      dlg.showModal(); fTitle.focus();\n    }\n    function openEdit(tabId, itemId){\n      editingItem = { tabId, itemId };\n      const tab = state.tabs.find(t => t.id === tabId);\n      const item = tab.items.find(i => i.id === itemId);\n      dlgTitle.textContent = 'Edit Snippet'; fTitle.value = item.title || ''; fText.value = item.text || '';\n      dlg.showModal(); fTitle.focus(); fTitle.select();\n    }\n\n    btnFromSel.onclick  = () => vscode.postMessage({ type:'getSelection' });\n    btnFromClip.onclick = () => vscode.postMessage({ type:'getClipboard' });\n    btnCancel.onclick   = () => dlg.close();\n\n    btnOk.onclick = () => {\n      if(!state) return;\n      const title = fTitle.value.trim(); const text = fText.value;\n      if(!text){ notify('Content required', 'warn'); return; }\n      if (editingItem) {\n        const tab = state.tabs.find(t => t.id === editingItem.tabId);\n        const item = tab.items.find(i => i.id === editingItem.itemId);\n        item.title = title || undefined; item.text = text; item.ts = Date.now();\n      } else {\n        const tab = activeTab();\n        tab.items.unshift({ id: uid(), title: title || undefined, text, ts: Date.now() });\n      }\n      persist(); render(); dlg.close();\n    };\n\n    function removeItem(tabId, itemId){\n      const tab = state.tabs.find(t => t.id === tabId);\n      tab.items = tab.items.filter(i => i.id !== itemId);\n      persist(); render();\n    }\n\n    // Messages from extension\n    window.addEventListener('message', (e) => {\n      const msg = e.data || {};\n      if (msg.type === 'init') { state = msg.state; render(); }\n      if (msg.type === 'selection' && dlg.open) { if (fText.value) fText.value += '\\\\n'; fText.value += msg.text || ''; }\n      if (msg.type === 'clipboard' && dlg.open) { if (fText.value) fText.value += '\\\\n'; fText.value += msg.text || ''; }\n    });\n\n    function uid(){ return Math.random().toString(36).slice(2) + Date.now().toString(36); }\n  </script>\n</body>\n</html>\n    `;\n  }\n})();\n"
  },
  {
    "command": "cmd.e0eq7ivl1t",
    "text": "$(bookmark) 書籤",
    "tooltip": "常用檔案快捷列",
    "hidden": true,
    "enableOnInit": false,
    "tags": [
      "tool"
    ],
    "script": "// Bookmarks — Sidebar 版（使用 statusBarHelper.v1.sidebar）\n// 功能同原版：加入目前檔 / 檔案挑選 / 開啟 / 重新命名 / 編輯(名稱+備註) / 複製路徑(在 webview 端) / 上下移動 / 搜尋 / 匯入匯出 / 修復路徑\n// 重要：完全不使用 vscode.Uri 來開檔 → 用字串路徑交給 openTextDocument\n// 儲存：workspace 優先，fallback global；關閉 Sidebar（或被取代）即自停\n\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst { storage, vm, sidebar } = statusBarHelper.v1;\n\n(async function () {\n  // 狀態列文案（可選）\n  const setText = (t) => (typeof vm.setLabel === 'function' ? vm.setLabel(t) : vm.setText?.(t));\n  const setTip  = (t) => vm.setTooltip?.(t);\n  setText('Bookmarks'); setTip('常用檔案快捷列');\n\n  // 儲存 (workspace > global)\n  const store = storage?.workspace || storage?.global;\n  if (!store) throw new Error('statusBarHelper.v1.storage 不可用');\n  const KEY = 'favorites.files.v6';\n  const defState = { items: [] }; // {id,name,fsPath,note,ts}\n  async function load(){ const s = await store.get(KEY, null); return (s && Array.isArray(s.items)) ? s : defState; }\n  async function save(st){ await store.set(KEY, st); }\n\n  // 記住最後一個有焦點的編輯器檔案路徑\n  let lastFilePath = null;\n  function rememberEditor(ed){ try{ const p = ed?.document?.uri?.fsPath; if(p) lastFilePath = String(p); }catch{} }\n  rememberEditor(vscode.window.activeTextEditor);\n  vscode.window.onDidChangeActiveTextEditor(rememberEditor);\n  vscode.window.onDidChangeTextEditorSelection(e=>rememberEditor(e?.textEditor));\n\n  // 路徑工具\n  function normalizeFsPath(p) {\n    if (!p) return '';\n    p = String(p).trim();\n    if (process.platform === 'win32') {\n      const isUNC = p.startsWith('\\\\\\\\');\n      p = p.replace(/\\//g, '\\\\');\n      if (!isUNC) p = p.replace(/\\\\{2,}/g, '\\\\');\n    } else {\n      p = p.replace(/\\\\/g, '/').replace(/\\/{2,}/g, '/');\n    }\n    return p;\n  }\n  function cleanPath(raw){\n    if (!raw) return '';\n    let p = String(raw)\n      .replace(/^[\\s'\"]+|[\\s'\"]+$/g, '')\n      .replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n    p = normalizeFsPath(p);\n    try { p = path.resolve(p); } catch {}\n    return p;\n  }\n\n  // ───────────────── Sidebar 開啟 ─────────────────\n  await sidebar.open({\n    html: getHtml(),\n    // Sidebar 真正被關閉才停 VM；若是被新 open 取代('replaced')不處理\n    onClose: (reason) => { if (reason === 'closed') vm.stop(); }\n  });\n  // 反向：VM 停止時，把 Sidebar 還原預設頁\n  vm.onStop(() => { try { sidebar.close(); } catch {} });\n\n  // Webview → Host 訊息\n  sidebar.onMessage(async (msg) => {\n    try {\n      switch (msg?.type) {\n        case 'ping': {\n          sidebar.postMessage({ type: 'pong' });\n          vscode.window.showInformationMessage('Bookmarks 已連線');\n          break;\n        }\n\n        case 'req:init': {\n          const st = await load();\n          st.items = (st.items || []).map(x => ({\n            id: String(x.id || ''),\n            name: String(x.name || ''),\n            fsPath: normalizeFsPath(String(x.fsPath || '')),\n            note: String(x.note || ''),\n            ts: Number(x.ts || Date.now())\n          }));\n          sidebar.postMessage({ type: 'init', state: st });\n          break;\n        }\n\n        case 'save': {\n          const st = msg.state;\n          if (st && Array.isArray(st.items)){\n            st.items = st.items.map(x=>({\n              id: String(x.id||''),\n              name: String(x.name||''),\n              fsPath: normalizeFsPath(String(x.fsPath||'')),\n              note: String(x.note||''),\n              ts: Number(x.ts||Date.now())\n            }));\n            await save({ items: st.items });\n            sidebar.postMessage({ type: 'saved' });\n          }\n          break;\n        }\n\n        case 'addCurrent': {\n          const fp = normalizeFsPath(String(lastFilePath||'')) || null;\n          sidebar.postMessage({ type: 'current', fsPath: fp });\n          break;\n        }\n\n        case 'pickFile': {\n          const picked = await vscode.window.showOpenDialog({\n            canSelectFiles:true, canSelectFolders:false, canSelectMany:false, openLabel:'選擇檔案'\n          });\n          const uri = picked?.[0];\n          sidebar.postMessage({ type: 'picked', fsPath: normalizeFsPath(uri?.fsPath || '') || null });\n          break;\n        }\n\n        // 只用字串路徑開檔（不建立 Uri）\n        case 'openFile': {\n          const raw = (msg && msg.fsPath) ? String(msg.fsPath) : '';\n          const fp  = cleanPath(raw);\n          if (!fp || !fs.existsSync(fp)) {\n            vscode.window.showWarningMessage('Cannot open file:\\n' + (fp || raw || '(empty)'));\n            break;\n          }\n          try {\n            const doc = await vscode.workspace.openTextDocument(fp);\n            await vscode.window.showTextDocument(doc, { preview: false });\n          } catch (e) {\n            vscode.window.showWarningMessage('Cannot open file:\\n' + fp);\n            console.log('[Bookmarks/openFile][fail]', String(e));\n          }\n          break;\n        }\n\n        case 'repath': {\n          const id = String(msg.id || '');\n          if (!id) break;\n          const picked = await vscode.window.showOpenDialog({\n            canSelectFiles: true, canSelectFolders: false, canSelectMany: false,\n            openLabel: '選擇檔案（修復路徑）'\n          });\n          const uri = picked?.[0];\n          const newPath = normalizeFsPath(uri?.fsPath || '');\n          if (!newPath) break;\n\n          const st = await load();\n          const idx = st.items.findIndex(x => x.id === id);\n          if (idx >= 0) {\n            st.items[idx].fsPath = newPath;\n            await save(st);\n            sidebar.postMessage({ type: 'init', state: st });\n            vscode.window.showInformationMessage('已修復路徑');\n          }\n          break;\n        }\n\n        case 'copyPath': {\n          const text = String(msg.fsPath || '');\n          sidebar.postMessage({ type: 'doCopy', text });\n          break;\n        }\n\n        case 'notify': {\n          const m = msg.message || '';\n          if (msg.level==='warn') vscode.window.showWarningMessage(m);\n          else if (msg.level==='error') vscode.window.showErrorMessage(m);\n          else vscode.window.showInformationMessage(m);\n          break;\n        }\n      }\n    } catch (e) {\n      vscode.window.showErrorMessage('[Host Error] ' + (e?.message || String(e)));\n    }\n  });\n\n  // ───────────────── HTML（Webview）─────────────────\n  // 不加 CSP meta，最大化相容（純內嵌 JS/CSS；不連外）\n  function getHtml(){\n    return [\n'<!doctype html><html lang=\"zh-TW\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>',\n'<title>Bookmarks</title>',\n'<style>',\n'body{margin:0;background:#1e1e1e;color:#ddd;font:12px system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;}',\n'.bar{display:flex;gap:8px;align-items:center;padding:8px;border-bottom:1px solid #3c3c3c;position:sticky;top:0;background:#1e1e1e;z-index:5;flex-wrap:wrap}',\n'.btn{border:1px solid #3c3c3c;background:rgba(255,255,255,.03);color:#ddd;padding:6px 10px;border-radius:8px;cursor:pointer;font-size:12px}',\n'.btn.primary{background:#0e639c;border-color:transparent;color:#fff}',\n'.list{display:grid;grid-template-columns:1fr;gap:8px;padding:8px}',\n'.card{border:1px solid #3c3c3c;border-radius:10px;background:rgba(255,255,255,.03);padding:8px;display:flex;flex-direction:column;gap:6px}',\n'.row{display:flex;gap:6px;flex-wrap:wrap;align-items:center}',\n'.title{margin:0;font-size:12px}',\n'.path{margin:0;color:#999;font-size:11px;word-break:break-all}',\n'.note{margin:0;color:#ccc;font-size:11px;white-space:pre-wrap;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3}',\n'input[type=text]{background:rgba(255,255,255,.03);border:1px solid #3c3c3c;color:#ddd;border-radius:8px;padding:6px 10px;font-size:12px;width:240px}',\n'dialog{border:1px solid #3c3c3c;background:#1e1e1e;color:#ddd;border-radius:10px;padding:0;width:min(560px,90vw)}',\n'dialog header{padding:8px;border-bottom:1px solid #3c3c3c}',\n'dialog main{padding:8px}',\n'textarea{width:100%;min-height:96px;background:rgba(255,255,255,.03);border:1px solid #3c3c3c;color:#ddd;border-radius:8px;padding:6px 10px;font-size:12px}',\n'.flex-end{display:flex;gap:8px;justify-content:flex-end;margin-top:8px}',\n'</style></head><body>',\n'<div class=\"bar\">',\n'  <button id=\"btnAddCurrent\" class=\"btn primary\" type=\"button\">加入目前檔</button>',\n'  <button id=\"btnPick\" class=\"btn\" type=\"button\">從檔案挑選</button>',\n'  <button id=\"btnExport\" class=\"btn\" type=\"button\">匯出JSON</button>',\n'  <button id=\"btnImport\" class=\"btn\" type=\"button\">匯入JSON</button>',\n'  <input id=\"q\" type=\"text\" placeholder=\"搜尋名稱/路徑/備註 (即時)\"/>',\n'</div>',\n'<div id=\"list\" class=\"list\"></div>',\n'<dialog id=\"editDlg\"><header>書籤</header><main>',\n'  <div style=\"margin:6px 0\">名稱</div><input id=\"fName\" type=\"text\" />',\n'  <div style=\"margin:8px 0 6px\">備註</div><textarea id=\"fNote\" placeholder=\"可留空\"></textarea>',\n'  <div class=\"flex-end\"><button id=\"editCancel\" class=\"btn\" type=\"button\">取消</button><button id=\"editOk\" class=\"btn primary\" type=\"button\">確定</button></div>',\n'</main></dialog>',\n'<dialog id=\"renameDlg\"><header>重新命名</header><main>',\n'  <input id=\"renameText\" type=\"text\" />',\n'  <div class=\"flex-end\"><button id=\"renameCancel\" class=\"btn\" type=\"button\">取消</button><button id=\"renameOk\" class=\"btn primary\" type=\"button\">確定</button></div>',\n'</main></dialog>',\n'<script>',\n'var vscode = acquireVsCodeApi();',\n'var state = {items:[]};',\n'var listEl = document.getElementById(\"list\"); var qEl = document.getElementById(\"q\");',\n'var editDlg=document.getElementById(\"editDlg\"), fName=document.getElementById(\"fName\"), fNote=document.getElementById(\"fNote\"), editOk=document.getElementById(\"editOk\"), editCancel=document.getElementById(\"editCancel\");',\n'var renameDlg=document.getElementById(\"renameDlg\"), renameText=document.getElementById(\"renameText\"), renameOk=document.getElementById(\"renameOk\"), renameCancel=document.getElementById(\"renameCancel\");',\n'var pendingNewPath=null, editingId=null;',\n'function send(t,d){ var o=d||{}; o.type=t; vscode.postMessage(o); }',\n'function uid(){ return Math.random().toString(36).slice(2)+Date.now().toString(36); }',\n'function base(p){ if(!p) return \"\"; var i=Math.max(p.lastIndexOf(\"/\"),p.lastIndexOf(\"\\\\\\\\\")); return i>=0?p.slice(i+1):p; }',\n'function persist(){ send(\"save\",{state:state}); }',\n'function render(){ var q=(qEl.value||\"\").toLowerCase().trim(); var items=state.items.filter(function(it){ return !q || (it.name||\"\").toLowerCase().indexOf(q)>=0 || (it.fsPath||\"\").toLowerCase().indexOf(q)>=0 || (it.note||\"\").toLowerCase().indexOf(q)>=0; }); listEl.innerHTML=\"\"; if(!items.length){ var d=document.createElement(\"div\"); d.className=\"path\"; d.textContent=q?\"沒有符合的項目\":\"尚未加入任何書籤，使用上方按鈕新增。\"; d.style.padding=\"6px\"; listEl.appendChild(d); return; } items.forEach(function(it){ listEl.appendChild(card(it)); }); }',\n'function card(it){ var c=document.createElement(\"div\"); c.className=\"card\"; var h=document.createElement(\"h4\"); h.className=\"title\"; h.textContent=it.name||base(it.fsPath)||\"(未命名)\"; c.appendChild(h); var p=document.createElement(\"p\"); p.className=\"path\"; p.textContent=it.fsPath||\"\"; c.appendChild(p); if(it.note){ var n=document.createElement(\"p\"); n.className=\"note\"; n.textContent=it.note; c.appendChild(n); } var r=document.createElement(\"div\"); r.className=\"row\"; ',\n'  r.appendChild(btn(\"開啟\", function(){ if(!it.fsPath){ alert(\"這個書籤目前沒有路徑，請先點「修復路徑」。\"); return; } send(\"openFile\",{fsPath:it.fsPath}); }));',\n'  r.appendChild(btn(\"上移\", function(){ move(it.id,-1);}));',\n'  r.appendChild(btn(\"下移\", function(){ move(it.id,1);}));',\n'  r.appendChild(btn(\"編輯\", function(){ openEdit(it.id);}));',\n'  r.appendChild(btn(\"重新命名\", function(){ openRename(it.id, it.name||base(it.fsPath)); }));',\n'  r.appendChild(btn(\"複製路徑\", function(){ if(!it.fsPath){ alert(\"沒有可複製的路徑，請先「修復路徑」。\"); return; } send(\"copyPath\",{fsPath:it.fsPath}); }));',\n'  r.appendChild(btn(\"修復路徑\", function(){ send(\"repath\",{id: it.id}); }));',\n'  r.appendChild(btn(\"移除\", function(){ removeItem(it.id);}));',\n'  c.appendChild(r); return c; }',\n'function btn(t,fn){ var b=document.createElement(\"button\"); b.className=\"btn\"; b.type=\"button\"; b.textContent=t; b.onclick=fn; return b; }',\n'function addItem(fsPath,name,note){ if(!fsPath){ send(\"notify\",{level:\"warn\",message:\"沒有可加入的檔案\"}); return; } state.items.unshift({id:uid(),name:(name||\"\").trim()||base(fsPath),fsPath:fsPath,note:(note||\"\"),ts:Date.now()}); persist(); render(); }',\n'function removeItem(id){ state.items = state.items.filter(function(x){return x.id!==id;}); persist(); render(); }',\n'function move(id,d){ var i=state.items.findIndex(function(x){return x.id===id;}); if(i<0) return; var j=i+d; if(j<0||j>=state.items.length) return; var x=state.items.splice(i,1)[0]; state.items.splice(j,0,x); persist(); render(); }',\n'function openRename(id,cur){ editingId=id; renameText.value=cur||\"\"; renameDlg.showModal(); renameText.focus(); renameText.select(); }',\n'renameOk.onclick=function(){ var it=state.items.find(function(x){return x.id===editingId;}); if(it){ var v=(renameText.value||\"\").trim(); it.name=v||base(it.fsPath); persist(); render(); } renameDlg.close(); };',\n'renameCancel.onclick=function(){ renameDlg.close(); };',\n'function openEdit(id){ editingId=id; var it=state.items.find(function(x){return x.id===id;}); if(!it) return; pendingNewPath=it.fsPath; fName.value=it.name||base(it.fsPath); fNote.value=it.note||\"\"; editDlg.showModal(); fName.focus(); fName.select(); }',\n'function openCreate(fp){ editingId=null; pendingNewPath=fp; fName.value=base(fp)||\"\"; fNote.value=\"\"; editDlg.showModal(); fName.focus(); fName.select(); }',\n'editOk.onclick=function(){ var name=(fName.value||\"\").trim(); var note=(fNote.value||\"\"); if(editingId){ var it=state.items.find(function(x){return x.id===editingId;}); if(it){ it.name=name||base(it.fsPath); it.note=note; persist(); render(); } }else{ addItem(pendingNewPath,name,note); } editDlg.close(); };',\n'editCancel.onclick=function(){ editDlg.close(); };',\n'document.getElementById(\"btnAddCurrent\").onclick=function(){ send(\"addCurrent\"); };',\n'document.getElementById(\"btnPick\").onclick=function(){ send(\"pickFile\"); };',\n'document.getElementById(\"btnExport\").onclick=function(){ try{ var blob=new Blob([JSON.stringify(state,null,2)],{type:\"application/json\"}); var url=URL.createObjectURL(blob); var a=document.createElement(\"a\"); a.href=url; a.download=\"favorites.files.json\"; a.click(); setTimeout(function(){URL.revokeObjectURL(url);},0);}catch(e){ alert(\"匯出失敗: \"+e); } };',\n'document.getElementById(\"btnImport\").onclick=function(){ try{ var i=document.createElement(\"input\"); i.type=\"file\"; i.accept=\"application/json\"; i.onchange=function(){ var f=i.files&&i.files[0]; if(!f) return; var rd=new FileReader(); rd.onload=function(){ try{ var j=JSON.parse(String(rd.result||\"{}\")); if(Array.isArray(j.items)){ state={items:j.items.map(function(x){ return {id:x.id||uid(),name:x.name||\"\",fsPath:x.fsPath||\"\",note:x.note||\"\",ts:x.ts||Date.now()}; })}; persist(); render(); } else { alert(\"格式不正確: 缺少 items\"); } }catch(ex){ alert(\"JSON 解析失敗: \"+ex); } }; rd.readAsText(f); }; i.click(); }catch(e){ alert(\"匯入失敗: \"+e); } };',\n'qEl.oninput=function(){ render(); };',\n'window.addEventListener(\"message\",function(e){ var m=e.data||{};',\n'  if(m.type===\"init\"){ state=m.state||{items:[]}; render(); }',\n'  if(m.type===\"picked\"&&m.fsPath){ openCreate(m.fsPath); }',\n'  if(m.type===\"current\"&&m.fsPath){ openCreate(m.fsPath); }',\n'  if(m.type===\"doCopy\"){ var text=m.text||\"\"; if(navigator.clipboard && navigator.clipboard.writeText){ navigator.clipboard.writeText(text).then(function(){ send(\"notify\",{message:\"已複製路徑\"}); }).catch(function(){ fallbackCopy(text); }); } else { fallbackCopy(text); } }',\n'});',\n'function fallbackCopy(text){ try{ var ta=document.createElement(\"textarea\"); ta.value=text; ta.setAttribute(\"readonly\",\"\"); ta.style.position=\"fixed\"; ta.style.opacity=\"0\"; document.body.appendChild(ta); ta.select(); document.execCommand(\"copy\"); document.body.removeChild(ta); send(\"notify\",{message:\"已複製路徑\"}); }catch(e){ send(\"notify\",{level:\"error\",message:\"複製失敗: \"+(e&&e.message||e)}); } }',\n'window.addEventListener(\"load\",function(){ send(\"ping\"); send(\"req:init\"); });',\n'</script></body></html>'\n    ].join('');\n  }\n})();\n"
  },
  {
    "command": "cmd.x5pkqa0li7",
    "text": "$(database) Storage",
    "tooltip": "storage / files API 範例：文字、JSON、位元組、鍵值",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "default",
      "example",
      "storage"
    ],
    "script": "// Status Bar Helper v1: Demonstrates how to use the custom statusBarHelper API\n// Purpose:\n//  1. Show how to use custom storage (global & workspace) for key-value data\n//  2. Show how to use custom file APIs to read/write text, JSON, and binary data\n//  3. Show how to check existence, calculate file sizes, and log results\n//  4. Intended for demo/testing inside a VS Code extension with SBH enabled\n\n// Import Node.js Buffer (for binary and base64 handling)\nconst { Buffer } = require('buffer');\n\n// Destructure storage and files API from statusBarHelper v1\nconst { secret, storage, files, vm } = statusBarHelper.v1;\n\nfunction main() {\n\n  // Helper: current timestamp in readable format\n  const now = () => new Date().toISOString().replace('T', ' ').replace('Z', '');\n\n  // Helper: pretty-print any value for logging\n  const dump = (x) => {\n    if (x instanceof Uint8Array)\n      return `Uint8Array(${x.length}) [${Array.from(x).slice(0, 16).join(',')}${x.length > 16 ? ',…' : ''}]`;\n    try { return JSON.stringify(x, null, 2); } catch { return String(x); }\n  };\n\n  // Helper: prefixed log output\n  const log = (...a) => console.log('[SBH]', ...a.map(dump));\n\n  (async () => {\n    log('▶ start', now());\n\n    // ─────────────── secret ───────────────\n    await secret.set('github.token', 'ghp_xxx...');\n    const t = await secret.get('github.token');   // string | undefined\n    console.log('token', t);\n\n    // ─────────────── storage / global ───────────────\n    log('— storage / global —');\n    const gPrev = await storage.global.get('demo.keep', { runs: 0 });\n    await storage.global.set('demo.keep', { ...gPrev, runs: (gPrev.runs || 0) + 1, ts: now(), from: 'global' });\n    log('get keep =', await storage.global.get('demo.keep', null));\n    log('keys =', await storage.global.keys());\n\n    // ─────────────── storage / workspace ───────────────\n    log('— storage / workspace —');\n    try {\n      const wPrev = await storage.workspace.get('demo.keep', { runs: 0 });\n      await storage.workspace.set('demo.keep', { ...wPrev, runs: (wPrev.runs || 0) + 1, ts: now(), from: 'workspace' });\n      log('get keep =', await storage.workspace.get('demo.keep', null));\n      log('keys =', await storage.workspace.keys());\n    } catch (e) {\n      log('workspace storage not available:', e?.message || e);\n    }\n\n    // ─────────────── files API ───────────────\n    const dirs = await files.dirs();\n    log('dirs =', dirs);\n\n    // Text file (global scope)\n    const txtRel = 'demo/notes/hello.txt';\n    const txtOld = (await files.exists('global', txtRel)) ? await files.readText('global', txtRel) : '';\n    await files.writeText('global', txtRel, txtOld + `hello @ ${now()}\\n`);\n    log('readText:', await files.readText('global', txtRel));\n\n    // JSON file (workspace if available, otherwise global)\n    /** @type {'global'|'workspace'} */\n    const jsonScope = dirs.workspace ? 'workspace' : 'global';\n    const jsonRel = 'demo/data/sample.json';\n    const cur = (await files.exists(jsonScope, jsonRel))\n      ? await files.readJSON(jsonScope, jsonRel)\n      : { a: 1, createdAt: now() };\n    cur.updatedAt = now();\n    cur.count = (cur.count || 0) + 1;\n    await files.writeJSON(jsonScope, jsonRel, cur);\n    log('readJSON:', await files.readJSON(jsonScope, jsonRel));\n\n    // Binary file (Uint8Array)\n    const binRel = 'demo/bin/demo.bin';\n    await files.writeBytes('global', binRel, new Uint8Array([1, 2, 3, 4, 5, 254, 255]));\n    log('readBytes demo.bin:', await files.readBytes('global', binRel));\n\n    // Binary file (base64 string)\n    const b64Rel = 'demo/bin/base64.bin';\n    await files.writeBytes('global', b64Rel, Buffer.from([9, 8, 7, 6]).toString('base64'));\n    log('exists base64.bin:', await files.exists('global', b64Rel));\n\n    // Simulated list of known demo files + calculate size\n    /** @type {Array<{scope:'global'|'workspace', rel:string, type:'text'|'json'|'bytes'}>} */\n    const candidates = [\n      { scope: 'global', rel: 'demo/notes/hello.txt', type: 'text' },\n      { scope: jsonScope, rel: 'demo/data/sample.json', type: 'json' },\n      { scope: 'global', rel: 'demo/bin/demo.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/bin/base64.bin', type: 'bytes' },\n      { scope: 'global', rel: 'demo/tmp/kept.txt', type: 'text' },\n    ];\n\n    /** @type {Array<{scope:string, path:string, type:string, size:number}>} */\n    const rows = [];\n    for (const c of candidates) {\n      if (await files.exists(c.scope, c.rel)) {\n        let size = 0;\n        if (c.type === 'text') {\n          const s = await files.readText(c.scope, c.rel);\n          size = Buffer.byteLength(s, 'utf8');\n        } else if (c.type === 'json') {\n          const obj = await files.readJSON(c.scope, c.rel);\n          size = Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        } else {\n          const b = await files.readBytes(c.scope, c.rel);\n          size = b?.length || 0;\n        }\n        rows.push({ scope: c.scope, path: c.rel, type: c.type, size });\n      }\n    }\n    log('files (simulated list):', rows);\n\n    // // Optional cleanup — user can delete via UI or uncomment below:\n    // await secret.delete('github.token');\n    // await storage.global.remove('demo.keep');\n    // await storage.workspace.remove('demo.keep').catch(()=>{});\n    // await files.remove('global', b64Rel);\n\n    log('✔ done', now());\n    vm.stop();\n  })().catch(e => {\n    console.error('❌', e);\n    vm.stop();\n  });\n}\n\nmain();"
  },
  {
    "command": "cmd.tik4pdi6qo",
    "text": "⚫️⚪️  五子棋",
    "tooltip": "點擊開始五子棋",
    "hidden": false,
    "enableOnInit": false,
    "tags": [
      "game"
    ],
    "script": "// Gomoku (五子棋) — PvE only with AI levels 1..6\n// For: status-bar-helper (VSCode Webview)\n// 操作：滑鼠點格落子；New Game 開新局；Undo 悔棋（會回到你的回合）；可選你下黑/白、AI 難度 1..6\n// 難度：1=超休閒(隨機+威脅)、2=貪婪、3=強貪婪(即時堵/殺)、4=搜尋2層、5=搜尋2層(更多候選)、6=搜尋3層(限時)\n\nconst vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(function main(){\n  const panel = vscode.window.createWebviewPanel(\n    'sbhGomoku',\n    '⚫️⚪️ Gomoku — 五子棋 (PvE)',\n    vscode.ViewColumn.Active,\n    { enableScripts: true, retainContextWhenHidden: true }\n  );\n  vm.onStop(() => { try{ panel.dispose(); } catch{} });\n  panel.onDidDispose(() => vm.stop());\n  const nonce = Math.random().toString(36).slice(2);\n  panel.webview.html = getHtml(nonce);\n})();\n\nfunction getHtml(nonce){\n  return /* html */`\n  <!doctype html>\n  <html lang=\"zh-Hant\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n    <title>Gomoku</title>\n    <style>\n      :root{ --bg:#0f1115; --fg:#e6e6e6; --muted:#9aa2b1; --card:#161a22; --line:#222838; --btn:#1d2330; --btnb:#2a3247; --accent:#7bd88f; }\n      html,body{height:100%}\n      body{margin:0;background:var(--bg);color:var(--fg);font-family:ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,Arial}\n      .wrap{max-width:860px;margin:0 auto;padding:14px}\n      .top{display:flex;align-items:center;gap:10px;flex-wrap:wrap}\n      .sp{flex:1}\n      .btn{background:var(--btn);border:1px solid var(--btnb);border-radius:10px;padding:8px 12px;color:var(--fg);cursor:pointer}\n      .btn:hover{filter:brightness(1.06)}\n      .card{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px;margin-top:12px}\n      .grid{display:grid;grid-template-columns:repeat(6,auto);gap:10px;align-items:center}\n      .legend{font-size:12px;color:var(--muted)}\n      .board{display:flex;justify-content:center}\n      canvas{display:block;background:#0b0f18;border-radius:12px;outline:none}\n      select,input[type=range]{background:#101522;border:1px solid var(--line);color:var(--fg);padding:6px 8px;border-radius:10px}\n      input[type=range]{accent-color:var(--accent)}\n      .num{min-width:24px;display:inline-block;text-align:right}\n      .kpis{display:flex;gap:12px;flex-wrap:wrap}\n      .kpi{background:#121620;border:1px solid var(--line);border-radius:12px;padding:8px 12px;min-width:120px}\n    </style>\n  </head>\n  <body>\n    <div class=\"wrap\">\n      <div class=\"top\">\n        <div class=\"title\" style=\"font-weight:700\">⚫️⚪️ Gomoku — 五子棋（人機對戰）</div>\n        <div class=\"sp\"></div>\n        <button id=\"btnUndo\" class=\"btn\">↩️ Undo</button>\n        <button id=\"btnNew\" class=\"btn\">🔄 New Game</button>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"kpis\">\n          <div class=\"kpi\">回合：<b id=\"turnLabel\">你（黑）</b></div>\n          <div class=\"kpi\">AI 難度：<b id=\"lvlLabel\">3</b>/6</div>\n        </div>\n        <div class=\"grid\" style=\"margin-top:8px\">\n          <div>你要下</div>\n          <select id=\"selSide\">\n            <option value=\"black\">黑子 (先手)</option>\n            <option value=\"white\">白子 (後手)</option>\n          </select>\n\n          <div>AI 難度</div>\n          <div style=\"display:flex;align-items:center;gap:8px\">\n            <input id=\"level\" type=\"range\" min=\"1\" max=\"6\" step=\"1\" value=\"3\">\n            <span id=\"lvl\" class=\"num\">3</span>\n          </div>\n\n          <div class=\"legend\" style=\"grid-column:1/-1\">提示：點棋盤下子；Undo 會回退「你與 AI 的最後兩手」，確保回到你的回合。</div>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"board\">\n          <!-- 420×420，15×15 盤，格距會自算 -->\n          <canvas id=\"board\" width=\"420\" height=\"420\" tabindex=\"0\"></canvas>\n        </div>\n      </div>\n    </div>\n\n    <script nonce=\"${nonce}\">\n      const $ = id => document.getElementById(id);\n      const cvs = $('board'), ctx = cvs.getContext('2d');\n      const selSide=$('selSide'), levelEl=$('level'), lvlText=$('lvl'), lvlLabel=$('lvlLabel'), turnLabel=$('turnLabel');\n      const btnNew=$('btnNew'), btnUndo=$('btnUndo');\n\n      // ----- 盤面設定 -----\n      const N = 15;               // 15×15\n      const PAD = 20;             // 內距\n      const W = cvs.width, H = cvs.height;\n      const GAP = Math.floor((W - PAD*2) / (N-1));  // 格距\n      const R = Math.floor(GAP * 0.42);             // 棋子半徑\n      const EMPTY=0, BLACK=1, WHITE=2;\n\n      // 狀態\n      let board, turn, human=BLACK, ai=WHITE, lastMove=null, over=false;\n      const history=[]; // push {x,y,side}\n\n      // 難度對應（候選數、搜尋深度、時間上限）\n      function cfgFor(level){\n        switch(+level){\n          case 1: return { topK:8, depth:0, limitMs:40 };            // 隨機於前幾名 + 威脅處理\n          case 2: return { topK:8, depth:0, limitMs:80 };            // 貪婪\n          case 3: return { topK:10, depth:1, limitMs:120 };          // 強貪婪（即時堵/殺）\n          case 4: return { topK:10, depth:2, limitMs:180 };          // 2 層\n          case 5: return { topK:14, depth:2, limitMs:220 };          // 2 層更多候選\n          case 6: return { topK:10, depth:3, limitMs:350 };          // 3 層限時\n          default: return { topK:10, depth:1, limitMs:120 };\n        }\n      }\n\n      // ----- 初始化 -----\n      function newBoard(){\n        board = Array.from({length:N}, ()=>Array(N).fill(EMPTY));\n        history.length=0; lastMove=null; over=false;\n      }\n      function setSides(){\n        if (selSide.value==='black'){ human=BLACK; ai=WHITE; }\n        else { human=WHITE; ai=BLACK; }\n        turn = BLACK; // 黑先\n        updateLabels();\n      }\n      function updateLabels(){\n        lvlText.textContent = String(levelEl.value);\n        lvlLabel.textContent = String(levelEl.value);\n        const t = (turn===human)?'你':'AI';\n        const tside = (turn===BLACK)?'黑':'白';\n        turnLabel.textContent = \\`\\${t}（\\${tside}）\\`;\n      }\n\n      // ----- 繪製 -----\n      function drawBoard(){\n        ctx.clearRect(0,0,W,H);\n        // 棋盤底\n        for(let y=0;y<H;y+=20){\n          for(let x=0;x<W;x+=20){\n            ctx.fillStyle = ((x+y)%40===0)?'#0b0f18':'#0c111a';\n            ctx.fillRect(x,y,20,20);\n          }\n        }\n        // 線\n        ctx.strokeStyle='#2b3144'; ctx.lineWidth=1.2;\n        for(let i=0;i<N;i++){\n          const x=PAD+i*GAP, y=PAD+i*GAP;\n          ctx.beginPath(); ctx.moveTo(PAD, PAD+i*GAP); ctx.lineTo(W-PAD, PAD+i*GAP); ctx.stroke();\n          ctx.beginPath(); ctx.moveTo(PAD+i*GAP, PAD); ctx.lineTo(PAD+i*GAP, H-PAD); ctx.stroke();\n        }\n        // 星位 (3,3)(3,11)(7,7)(11,3)(11,11)\n        const stars=[[3,3],[3,11],[7,7],[11,3],[11,11]];\n        ctx.fillStyle='#9aa2b1';\n        for(const [gx,gy] of stars){\n          const {cx,cy}=cellXY(gx,gy);\n          ctx.beginPath(); ctx.arc(cx,cy,3,0,Math.PI*2); ctx.fill();\n        }\n        // 棋子\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            const v=board[y][x];\n            if (v!==EMPTY){\n              const {cx,cy}=cellXY(x,y);\n              const grad=ctx.createRadialGradient(cx,cy,2,cx,cy,R);\n              if (v===BLACK){ grad.addColorStop(0,'#555'); grad.addColorStop(1,'#111'); }\n              else { grad.addColorStop(0,'#fff'); grad.addColorStop(1,'#d9d9d9'); }\n              ctx.fillStyle=grad; ctx.beginPath(); ctx.arc(cx,cy,R,0,Math.PI*2); ctx.fill();\n            }\n          }\n        }\n        // 最後一步高亮\n        if (lastMove){\n          const {cx,cy}=cellXY(lastMove.x,lastMove.y);\n          ctx.strokeStyle='#ffd34d'; ctx.lineWidth=2;\n          ctx.beginPath(); ctx.arc(cx,cy,R+3,0,Math.PI*2); ctx.stroke();\n        }\n        // 勝負提示\n        if (over){\n          ctx.fillStyle='rgba(0,0,0,.55)'; ctx.fillRect(0,0,W,H);\n          ctx.fillStyle='#fff'; ctx.font='bold 22px system-ui'; ctx.textAlign='center';\n          ctx.fillText((winnerSide===human?'你贏了 🎉':'AI 勝出 🤖'), W/2, H/2 - 12);\n          ctx.font='14px system-ui'; ctx.fillText('按 New Game 重新開始', W/2, H/2 + 16);\n        }\n      }\n\n      function cellXY(x,y){ return { cx: PAD + x*GAP, cy: PAD + y*GAP }; }\n      function posToCell(px,py){\n        // 將滑鼠座標 snap 到最近格點\n        function snap(v){ return Math.round((v - PAD) / GAP); }\n        const x=snap(px), y=snap(py);\n        if (x<0||x>=N||y<0||y>=N) return null;\n        const {cx,cy}=cellXY(x,y);\n        const dist=Math.hypot(px-cx, py-cy);\n        if (dist<=GAP*0.5) return {x,y};\n        return null;\n      }\n\n      // ----- 勝負判定 -----\n      function countDir(x,y,dx,dy,side){\n        let c=0, i=1;\n        while(true){\n          const nx=x+dx*i, ny=y+dy*i;\n          if (nx<0||ny<0||nx>=N||ny>=N) break;\n          if (board[ny][nx]!==side) break;\n          c++; i++;\n        }\n        return c;\n      }\n      function isFive(x,y,side){\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n        for (const [dx,dy] of dirs){\n          const c = 1 + countDir(x,y,dx,dy,side) + countDir(x,y,-dx,-dy,side);\n          if (c>=5) return true;\n        }\n        return false;\n      }\n      let winnerSide=null;\n\n      // ----- 評分（啟發式） -----\n      // 以「連子數 + 雙邊是否開放」評分；AI 分數 - 對手分數\n      function evaluate(sideView=ai){\n        let scoreAI=0, scoreHu=0;\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n\n        function lineScore(x,y,dx,dy,side){\n          // 只在「此方向的起點」計分：前一格不是同色\n          const px=x-dx, py=y-dy;\n          if (px>=0&&py>=0&&px<N&&py<N && board[py][px]===side) return 0;\n\n          let i=0, len=0;\n          while(true){\n            const nx=x+dx*i, ny=y+dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N) break;\n            if (board[ny][nx]!==side) break;\n            len++; i++;\n          }\n          const leftOpen = (px>=0&&py>=0&&px<N&&py<N && board[py][px]===EMPTY);\n          const rx=x+dx*len, ry=y+dy*len;\n          const rightOpen = (rx>=0&&ry>=0&&rx<N&&ry<N && board[ry][rx]===EMPTY);\n          const open = (leftOpen?1:0)+(rightOpen?1:0);\n\n          // 基礎權重\n          if (len>=5) return 1000000;\n          if (len===4 && open===2) return 100000;\n          if (len===4 && open===1) return 8000;\n          if (len===3 && open===2) return 1500;\n          if (len===3 && open===1) return 200;\n          if (len===2 && open===2) return 80;\n          if (len===2 && open===1) return 20;\n          if (len===1 && open===2) return 6;\n          return 0;\n        }\n\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            const v=board[y][x];\n            if (v===EMPTY) continue;\n            for(const [dx,dy] of dirs){\n              const s = lineScore(x,y,dx,dy,v);\n              if (v===ai) scoreAI += s; else scoreHu += s;\n            }\n          }\n        }\n        return scoreAI - scoreHu;\n      }\n\n      // 局部評分：把 (x,y) 當作 side 下，回傳此點的威脅值\n      function pointScore(x,y,side){\n        if (board[y][x]!==EMPTY) return -Infinity;\n        let score=0;\n        const dirs=[[1,0],[0,1],[1,1],[1,-1]];\n        for(const [dx,dy] of dirs){\n          // 往兩邊延伸，計算連子與空位情況\n          let a=0,b=0,blockA=false,blockB=false;\n          for(let i=1;i<5;i++){\n            const nx=x+dx*i, ny=y+dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N){ blockA=true; break; }\n            const v=board[ny][nx];\n            if (v===side) a++; else { if (v!==EMPTY) blockA=true; break; }\n          }\n          for(let i=1;i<5;i++){\n            const nx=x-dx*i, ny=y-dy*i;\n            if (nx<0||ny<0||nx>=N||ny>=N){ blockB=true; break; }\n            const v=board[ny][nx];\n            if (v===side) b++; else { if (v!==EMPTY) blockB=true; break; }\n          }\n          const len=a+b+1;\n          const open = (blockA?0:1)+(blockB?0:1);\n          if (len>=5){ score += 1e6; continue; }\n          if (len===4 && open===2) score += 1e5;\n          else if (len===4 && open===1) score += 6e3;\n          else if (len===3 && open===2) score += 1200;\n          else if (len===3 && open===1) score += 150;\n          else if (len===2 && open===2) score += 60;\n          else if (len===2 && open===1) score += 16;\n        }\n        return score;\n      }\n\n      // 候選走法：只取「距離任一棋子 2 格內」的空點\n      function hasNeighbor2(x,y){\n        for(let dy=-2; dy<=2; dy++){\n          for(let dx=-2; dx<=2; dx++){\n            if (dx===0 && dy===0) continue;\n            const nx=x+dx, ny=y+dy;\n            if (nx<0||ny<0||nx>=N||ny>=N) continue;\n            if (board[ny][nx]!==EMPTY) return true;\n          }\n        }\n        return false;\n      }\n      function genCandidates(topK, biasForSide=ai){\n        const list=[];\n        let hasStone=false;\n        for(let y=0;y<N;y++) for(let x=0;x<N;x++) if(board[y][x]!==EMPTY){ hasStone=true; break; }\n        if (!hasStone){\n          // 空盤 → 取中心\n          const c = Math.floor(N/2);\n          return [{x:c,y:c,score:0}];\n        }\n        for(let y=0;y<N;y++){\n          for(let x=0;x<N;x++){\n            if (board[y][x]!==EMPTY) continue;\n            if (!hasNeighbor2(x,y)) continue;\n            const off = pointScore(x,y,biasForSide);\n            const def = pointScore(x,y,biasForSide===ai?human:ai) * 0.96; // 防守稍微弱化\n            const sc = Math.max(off, def);\n            list.push({x,y,score:sc, offensive:off, defensive:def});\n          }\n        }\n        list.sort((a,b)=>b.score-a.score);\n        return list.slice(0, topK);\n      }\n\n      // 即時殺/堵：若有直接五連，或對手可五連，先處理\n      function immediateMove(){\n        const cand = genCandidates(30, ai);\n        // 1) 我方直接取勝\n        for(const c of cand){\n          board[c.y][c.x]=ai;\n          const win=isFive(c.x,c.y,ai);\n          board[c.y][c.x]=EMPTY;\n          if (win) return c;\n        }\n        // 2) 擋對手致勝\n        for(const c of cand){\n          board[c.y][c.x]=human;\n          const oppWin=isFive(c.x,c.y,human);\n          board[c.y][c.x]=EMPTY;\n          if (oppWin) return c; // 放在這裡堵\n        }\n        return null;\n      }\n\n      // Minimax + Alpha-Beta + 限時\n      function search(depth, alpha, beta, curSide, cfg, deadline){\n        if (performance.now() > deadline) return { score:evaluate(), move:null, cutoff:true };\n        if (depth===0) return { score:evaluate(), move:null };\n\n        // 即時勝負快速判\n        if (lastMove && isFive(lastMove.x,lastMove.y,lastMove.side)){\n          const s = (lastMove.side===ai)? 999999 : -999999;\n          return { score:s, move:null };\n        }\n\n        const cand = genCandidates(cfg.topK, curSide);\n        if (cand.length===0) return { score:evaluate(), move:null };\n\n        let bestMove=null;\n\n        if (curSide===ai){\n          let best=-Infinity;\n          for(const c of cand){\n            board[c.y][c.x]=curSide;\n            const prev=lastMove; lastMove={x:c.x,y:c.y,side:curSide};\n            let val;\n            // 快速終止：放下即勝\n            if (isFive(c.x,c.y,curSide)){\n              val=999999 - (cfg.depth-depth); // 偏好更快勝\n            }else{\n              const r = search(depth-1, alpha, beta, human, cfg, deadline);\n              val=r.score;\n              if (r.cutoff) { board[c.y][c.x]=EMPTY; lastMove=prev; return { score:best, move:bestMove, cutoff:true }; }\n            }\n            board[c.y][c.x]=EMPTY; lastMove=prev;\n\n            if (val>best){ best=val; bestMove={x:c.x,y:c.y}; }\n            if (val>alpha) alpha=val;\n            if (beta<=alpha) break; // beta-cut\n          }\n          return { score:best, move:bestMove };\n        }else{\n          let best=Infinity;\n          for(const c of cand){\n            board[c.y][c.x]=curSide;\n            const prev=lastMove; lastMove={x:c.x,y:c.y,side:curSide};\n            let val;\n            if (isFive(c.x,c.y,curSide)){\n              val=-999999 + (cfg.depth-depth);\n            }else{\n              const r = search(depth-1, alpha, beta, ai, cfg, deadline);\n              val=r.score;\n              if (r.cutoff) { board[c.y][c.x]=EMPTY; lastMove=prev; return { score:best, move:bestMove, cutoff:true }; }\n            }\n            board[c.y][c.x]=EMPTY; lastMove=prev;\n\n            if (val<best){ best=val; bestMove={x:c.x,y:c.y}; }\n            if (val<beta) beta=val;\n            if (beta<=alpha) break; // alpha-cut\n          }\n          return { score:best, move:bestMove };\n        }\n      }\n\n      // AI 下子\n      async function aiMove(){\n        if (over || turn!==ai) return;\n\n        const level = +levelEl.value;\n        const cfg = cfgFor(level);\n        const deadline = performance.now() + cfg.limitMs;\n\n        // Lv1/Lv2/Lv3 都先檢查即時殺/堵\n        if (level<=3){\n          const imm = immediateMove();\n          if (imm){ place(imm.x,imm.y,ai); return; }\n        }\n\n        let move=null;\n        if (cfg.depth===0){\n          // 貪婪／隨機於前K\n          const cand = genCandidates(cfg.topK, ai);\n          if (cand.length===0){ // 幾乎不會\n            const c = Math.floor(N/2); move={x:c,y:c};\n          }else{\n            if (level===1){\n              const k = Math.max(1, Math.min(6, cand.length));\n              move = cand[(Math.random()*k)|0];\n            }else{\n              move = cand[0];\n            }\n          }\n        }else{\n          const res = search(cfg.depth, -Infinity, Infinity, ai, cfg, deadline);\n          move = res.move;\n          if (!move){\n            // 超時或沒有更好 → 用即時或貪婪做保底\n            const imm = immediateMove();\n            if (imm) move=imm; else move = genCandidates(1, ai)[0];\n          }\n        }\n\n        if (move) place(move.x, move.y, ai);\n      }\n\n      // 落子（含勝負檢查）\n      function place(x,y,side){\n        if (board[y][x]!==EMPTY || over) return false;\n        board[y][x]=side;\n        history.push({x,y,side});\n        lastMove={x,y,side};\n        // 勝負\n        if (isFive(x,y,side)){\n          over=true; winnerSide=side;\n        }else{\n          // 換手\n          turn = (side===BLACK)? WHITE : BLACK;\n        }\n        updateLabels(); drawBoard();\n        // 若輪到 AI，排一下\n        if (!over && turn===ai){\n          setTimeout(aiMove, 30);\n        }\n        return true;\n      }\n\n      // 悔棋：回到玩家回合（一次吃掉 AI 與玩家各一步，如果 AI 還沒下就只退玩家一步）\n      function undo(){\n        if (history.length===0 || over) return;\n        // 如果最後一步是 AI，就先退 AI；再看玩家\n        let popped = history.pop();\n        board[popped.y][popped.x]=EMPTY;\n\n        if (popped.side===ai && history.length>0){\n          popped = history.pop();\n          board[popped.y][popped.x]=EMPTY;\n        }\n        over=false; winnerSide=null;\n        // 設定回合：若有棋則相反於最後步，否則黑先\n        const last = history[history.length-1];\n        if (last){ turn = (last.side===BLACK)? WHITE : BLACK; lastMove=last; }\n        else { turn = BLACK; lastMove=null; }\n        // 確保是玩家回合，如不是就再退一步\n        if (turn!==human && history.length>0){\n          const p = history.pop(); board[p.y][p.x]=EMPTY;\n          const last2 = history[history.length-1];\n          turn = last2 ? ((last2.side===BLACK)? WHITE : BLACK) : BLACK;\n          lastMove = last2 || null;\n        }\n        updateLabels(); drawBoard();\n      }\n\n      // 事件：下子\n      cvs.addEventListener('mousedown', (e)=>{\n        if (over || turn!==human) return;\n        const rect=cvs.getBoundingClientRect();\n        const pos = posToCell(e.clientX - rect.left, e.clientY - rect.top);\n        if (!pos) return;\n        place(pos.x,pos.y,human);\n      });\n\n      // 控制列\n      btnNew.addEventListener('click', ()=>{\n        newBoard(); setSides(); drawBoard();\n        // 若 AI 先手\n        if (turn===ai) setTimeout(aiMove, 60);\n        cvs.focus();\n      });\n      btnUndo.addEventListener('click', ()=>{ undo(); cvs.focus(); });\n      selSide.addEventListener('change', ()=>{\n        const wasHuman=human;\n        newBoard(); setSides(); drawBoard();\n        if (turn===ai) setTimeout(aiMove, 60);\n      });\n      levelEl.addEventListener('input', ()=>{ lvlText.textContent=String(levelEl.value); lvlLabel.textContent=String(levelEl.value); });\n\n      // 啟動\n      newBoard(); setSides(); drawBoard();\n      if (turn===ai) setTimeout(aiMove, 80);\n      setTimeout(()=>cvs.focus(), 0);\n    </script>\n  </body>\n  </html>`;\n}\n"
  }
]