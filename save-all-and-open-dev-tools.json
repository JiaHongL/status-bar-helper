[
  {
    "command": "cmd.0fx0zj969s",
    "text": "$(save-all) ",
    "tooltip": "",
    "hidden": false,
    "enableOnInit": false,
    "script": "const vscode = require('vscode');\nconst { spawn } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst { vm } = statusBarHelper.v1;\n\n(async function () {\n  const oc = vscode.window.createOutputChannel('SBH Build&Install');\n  const setText = (t) => (typeof vm?.setLabel === 'function' ? vm.setLabel(t) : vm.setText?.(t));\n  const log = (m) => oc.appendLine(m);\n  const run = (cmd, args, opts = {}) => new Promise((resolve, reject) => {\n    log(`$ ${cmd} ${args.join(' ')}`);\n    const cp = spawn(cmd, args, { shell: true, ...opts });\n    cp.stdout.on('data', d => oc.append(d.toString()));\n    cp.stderr.on('data', d => oc.append(d.toString()));\n    cp.on('close', code => code === 0 ? resolve() : reject(new Error(`${cmd} exited ${code}`)));\n  });\n\n  try {\n    oc.show(true);\n    setText('$(gear) build ▶ install ▶ reload');\n\n    // 取第一個 workspace 當根目錄\n    const root = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n    if (!root) throw new Error('找不到工作區（workspaceFolders 為空）');\n\n    // 1) npm run build（在根目錄）\n    await vscode.window.withProgress(\n      { location: vscode.ProgressLocation.Notification, title: 'SBH: 正在執行 npm run build…' },\n      async () => {\n        const npmCmd = process.platform === 'win32' ? 'npm.cmd' : 'npm';\n        await run(npmCmd, ['run', 'build'], { cwd: root });\n      }\n    );\n\n    // 從 package.json 讀 version 並組成 vsix 檔名\n    const pkgPath = path.join(root, 'package.json');\n    if (!fs.existsSync(pkgPath)) {\n      throw new Error(`在專案根目錄找不到 package.json：${pkgPath}`);\n    }\n    let pkg;\n    try {\n      pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));\n    } catch (e) {\n      throw new Error(`讀取 package.json 失敗：${e.message}`);\n    }\n    const version = String(pkg.version || '').trim();\n    if (!version) throw new Error('package.json 中找不到 version 欄位或為空');\n    const VSIX_NAME = `status-bar-helper-${version}.vsix`;\n\n    // 2) 直接指定 <root>/status-bar-helper-{version}.vsix\n    const vsixPath = path.join(root, VSIX_NAME);\n    if (!fs.existsSync(vsixPath)) {\n      throw new Error(`在專案根目錄找不到 ${VSIX_NAME}\\n期望路徑：${vsixPath}`);\n    }\n    log(`VSIX 檔案：${vsixPath}`);\n\n    // 3) 安裝 VSIX（先用 VS Code 內建指令，失敗再用 code CLI 後備）\n    await vscode.window.withProgress(\n      { location: vscode.ProgressLocation.Notification, title: `SBH: 安裝 ${VSIX_NAME}…` },\n      async () => {\n        try {\n          await vscode.commands.executeCommand('workbench.extensions.installExtension', vscode.Uri.file(vsixPath));\n          log('使用 workbench.extensions.installExtension 完成安裝。');\n        } catch (e) {\n          log(`installExtension 失敗，改用 CLI 後備： ${e.message}`);\n          await run('code', ['--install-extension', vsixPath, '--force']);\n          log('使用 CLI 完成安裝。');\n        }\n      }\n    );\n\n    // 4) 重新載入 VS Code\n    await vscode.window.withProgress(\n      { location: vscode.ProgressLocation.Notification, title: 'SBH: 重新載入 VS Code…' },\n      async () => {\n        await new Promise(r => setTimeout(r, 400));\n        await vscode.commands.executeCommand('workbench.action.reloadWindow');\n      }\n    );\n  } catch (err) {\n    log(`錯誤：${err?.stack || err?.message || String(err)}`);\n    vscode.window.showErrorMessage(`SBH: ${err?.message || err}`);\n    setText('$(error) build/install 失敗');\n  }\n})();\n"
  },
  {
    "command": "cmd.gszc03pubz",
    "text": "$(tools) ",
    "tooltip": "",
    "hidden": false,
    "enableOnInit": false,
    "script": "const vscode = require('vscode');\nconst { vm } = statusBarHelper.v1;\n\n(async () => {\n  try {\n    // Execute the built-in toggle theme command\n    await vscode.commands.executeCommand('workbench.action.toggleDevTools');\n  } catch (e) {\n    // Show an error message in VS Code if the command fails\n    vscode.window.showErrorMessage('Toggle theme failed: ' + (e?.message || e));\n  } finally {\n    vm.stop();\n  }\n})();"
  }
]